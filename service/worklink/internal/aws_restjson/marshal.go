// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

// Package aws_restjson service, marshal.go contains the generated operation marshalers and methods on it.

package aws_restjson

import (
	"bytes"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/awserr"
	"github.com/aws/aws-sdk-go-v2/private/protocol/jsonrpc"
	"github.com/aws/aws-sdk-go-v2/private/protocol/rest"
	"github.com/aws/aws-sdk-go-v2/service/worklink/types"
)

var _ bytes.Buffer
var _ awserr.Error

// AssociateDomainMarshaler defines marshaler for AssociateDomain operation
type AssociateDomainMarshaler struct {
	Input *types.AssociateDomainInput
}

// AssociateWebsiteAuthorizationProviderMarshaler defines marshaler for AssociateWebsiteAuthorizationProvider operation
type AssociateWebsiteAuthorizationProviderMarshaler struct {
	Input *types.AssociateWebsiteAuthorizationProviderInput
}

// AssociateWebsiteCertificateAuthorityMarshaler defines marshaler for AssociateWebsiteCertificateAuthority operation
type AssociateWebsiteCertificateAuthorityMarshaler struct {
	Input *types.AssociateWebsiteCertificateAuthorityInput
}

// CreateFleetMarshaler defines marshaler for CreateFleet operation
type CreateFleetMarshaler struct {
	Input *types.CreateFleetInput
}

// DeleteFleetMarshaler defines marshaler for DeleteFleet operation
type DeleteFleetMarshaler struct {
	Input *types.DeleteFleetInput
}

// DescribeAuditStreamConfigurationMarshaler defines marshaler for DescribeAuditStreamConfiguration operation
type DescribeAuditStreamConfigurationMarshaler struct {
	Input *types.DescribeAuditStreamConfigurationInput
}

// DescribeCompanyNetworkConfigurationMarshaler defines marshaler for DescribeCompanyNetworkConfiguration operation
type DescribeCompanyNetworkConfigurationMarshaler struct {
	Input *types.DescribeCompanyNetworkConfigurationInput
}

// DescribeDeviceMarshaler defines marshaler for DescribeDevice operation
type DescribeDeviceMarshaler struct {
	Input *types.DescribeDeviceInput
}

// DescribeDevicePolicyConfigurationMarshaler defines marshaler for DescribeDevicePolicyConfiguration operation
type DescribeDevicePolicyConfigurationMarshaler struct {
	Input *types.DescribeDevicePolicyConfigurationInput
}

// DescribeDomainMarshaler defines marshaler for DescribeDomain operation
type DescribeDomainMarshaler struct {
	Input *types.DescribeDomainInput
}

// DescribeFleetMetadataMarshaler defines marshaler for DescribeFleetMetadata operation
type DescribeFleetMetadataMarshaler struct {
	Input *types.DescribeFleetMetadataInput
}

// DescribeIdentityProviderConfigurationMarshaler defines marshaler for DescribeIdentityProviderConfiguration operation
type DescribeIdentityProviderConfigurationMarshaler struct {
	Input *types.DescribeIdentityProviderConfigurationInput
}

// DescribeWebsiteCertificateAuthorityMarshaler defines marshaler for DescribeWebsiteCertificateAuthority operation
type DescribeWebsiteCertificateAuthorityMarshaler struct {
	Input *types.DescribeWebsiteCertificateAuthorityInput
}

// DisassociateDomainMarshaler defines marshaler for DisassociateDomain operation
type DisassociateDomainMarshaler struct {
	Input *types.DisassociateDomainInput
}

// DisassociateWebsiteAuthorizationProviderMarshaler defines marshaler for DisassociateWebsiteAuthorizationProvider operation
type DisassociateWebsiteAuthorizationProviderMarshaler struct {
	Input *types.DisassociateWebsiteAuthorizationProviderInput
}

// DisassociateWebsiteCertificateAuthorityMarshaler defines marshaler for DisassociateWebsiteCertificateAuthority operation
type DisassociateWebsiteCertificateAuthorityMarshaler struct {
	Input *types.DisassociateWebsiteCertificateAuthorityInput
}

// ListDevicesMarshaler defines marshaler for ListDevices operation
type ListDevicesMarshaler struct {
	Input *types.ListDevicesInput
}

// ListDomainsMarshaler defines marshaler for ListDomains operation
type ListDomainsMarshaler struct {
	Input *types.ListDomainsInput
}

// ListFleetsMarshaler defines marshaler for ListFleets operation
type ListFleetsMarshaler struct {
	Input *types.ListFleetsInput
}

// ListWebsiteAuthorizationProvidersMarshaler defines marshaler for ListWebsiteAuthorizationProviders operation
type ListWebsiteAuthorizationProvidersMarshaler struct {
	Input *types.ListWebsiteAuthorizationProvidersInput
}

// ListWebsiteCertificateAuthoritiesMarshaler defines marshaler for ListWebsiteCertificateAuthorities operation
type ListWebsiteCertificateAuthoritiesMarshaler struct {
	Input *types.ListWebsiteCertificateAuthoritiesInput
}

// RestoreDomainAccessMarshaler defines marshaler for RestoreDomainAccess operation
type RestoreDomainAccessMarshaler struct {
	Input *types.RestoreDomainAccessInput
}

// RevokeDomainAccessMarshaler defines marshaler for RevokeDomainAccess operation
type RevokeDomainAccessMarshaler struct {
	Input *types.RevokeDomainAccessInput
}

// SignOutUserMarshaler defines marshaler for SignOutUser operation
type SignOutUserMarshaler struct {
	Input *types.SignOutUserInput
}

// UpdateAuditStreamConfigurationMarshaler defines marshaler for UpdateAuditStreamConfiguration operation
type UpdateAuditStreamConfigurationMarshaler struct {
	Input *types.UpdateAuditStreamConfigurationInput
}

// UpdateCompanyNetworkConfigurationMarshaler defines marshaler for UpdateCompanyNetworkConfiguration operation
type UpdateCompanyNetworkConfigurationMarshaler struct {
	Input *types.UpdateCompanyNetworkConfigurationInput
}

// UpdateDevicePolicyConfigurationMarshaler defines marshaler for UpdateDevicePolicyConfiguration operation
type UpdateDevicePolicyConfigurationMarshaler struct {
	Input *types.UpdateDevicePolicyConfigurationInput
}

// UpdateDomainMetadataMarshaler defines marshaler for UpdateDomainMetadata operation
type UpdateDomainMetadataMarshaler struct {
	Input *types.UpdateDomainMetadataInput
}

// UpdateFleetMetadataMarshaler defines marshaler for UpdateFleetMetadata operation
type UpdateFleetMetadataMarshaler struct {
	Input *types.UpdateFleetMetadataInput
}

// UpdateIdentityProviderConfigurationMarshaler defines marshaler for UpdateIdentityProviderConfiguration operation
type UpdateIdentityProviderConfigurationMarshaler struct {
	Input *types.UpdateIdentityProviderConfigurationInput
}

func MarshalAssociateDomainInputShapeAWSREST(v *types.AssociateDomainInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalAssociateDomainInputShapeAWSJSON(v *types.AssociateDomainInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalAssociateWebsiteAuthorizationProviderInputShapeAWSREST(v *types.AssociateWebsiteAuthorizationProviderInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalAssociateWebsiteAuthorizationProviderInputShapeAWSJSON(v *types.AssociateWebsiteAuthorizationProviderInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalAssociateWebsiteCertificateAuthorityInputShapeAWSREST(v *types.AssociateWebsiteCertificateAuthorityInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalAssociateWebsiteCertificateAuthorityInputShapeAWSJSON(v *types.AssociateWebsiteCertificateAuthorityInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalCreateFleetInputShapeAWSREST(v *types.CreateFleetInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCreateFleetInputShapeAWSJSON(v *types.CreateFleetInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDeleteFleetInputShapeAWSREST(v *types.DeleteFleetInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeleteFleetInputShapeAWSJSON(v *types.DeleteFleetInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDescribeAuditStreamConfigurationInputShapeAWSREST(v *types.DescribeAuditStreamConfigurationInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDescribeAuditStreamConfigurationInputShapeAWSJSON(v *types.DescribeAuditStreamConfigurationInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDescribeCompanyNetworkConfigurationInputShapeAWSREST(v *types.DescribeCompanyNetworkConfigurationInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDescribeCompanyNetworkConfigurationInputShapeAWSJSON(v *types.DescribeCompanyNetworkConfigurationInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDescribeDeviceInputShapeAWSREST(v *types.DescribeDeviceInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDescribeDeviceInputShapeAWSJSON(v *types.DescribeDeviceInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDescribeDevicePolicyConfigurationInputShapeAWSREST(v *types.DescribeDevicePolicyConfigurationInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDescribeDevicePolicyConfigurationInputShapeAWSJSON(v *types.DescribeDevicePolicyConfigurationInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDescribeDomainInputShapeAWSREST(v *types.DescribeDomainInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDescribeDomainInputShapeAWSJSON(v *types.DescribeDomainInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDescribeFleetMetadataInputShapeAWSREST(v *types.DescribeFleetMetadataInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDescribeFleetMetadataInputShapeAWSJSON(v *types.DescribeFleetMetadataInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDescribeIdentityProviderConfigurationInputShapeAWSREST(v *types.DescribeIdentityProviderConfigurationInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDescribeIdentityProviderConfigurationInputShapeAWSJSON(v *types.DescribeIdentityProviderConfigurationInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDescribeWebsiteCertificateAuthorityInputShapeAWSREST(v *types.DescribeWebsiteCertificateAuthorityInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDescribeWebsiteCertificateAuthorityInputShapeAWSJSON(v *types.DescribeWebsiteCertificateAuthorityInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDisassociateDomainInputShapeAWSREST(v *types.DisassociateDomainInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDisassociateDomainInputShapeAWSJSON(v *types.DisassociateDomainInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDisassociateWebsiteAuthorizationProviderInputShapeAWSREST(v *types.DisassociateWebsiteAuthorizationProviderInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDisassociateWebsiteAuthorizationProviderInputShapeAWSJSON(v *types.DisassociateWebsiteAuthorizationProviderInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDisassociateWebsiteCertificateAuthorityInputShapeAWSREST(v *types.DisassociateWebsiteCertificateAuthorityInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDisassociateWebsiteCertificateAuthorityInputShapeAWSJSON(v *types.DisassociateWebsiteCertificateAuthorityInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListDevicesInputShapeAWSREST(v *types.ListDevicesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListDevicesInputShapeAWSJSON(v *types.ListDevicesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListDomainsInputShapeAWSREST(v *types.ListDomainsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListDomainsInputShapeAWSJSON(v *types.ListDomainsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListFleetsInputShapeAWSREST(v *types.ListFleetsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListFleetsInputShapeAWSJSON(v *types.ListFleetsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListWebsiteAuthorizationProvidersInputShapeAWSREST(v *types.ListWebsiteAuthorizationProvidersInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListWebsiteAuthorizationProvidersInputShapeAWSJSON(v *types.ListWebsiteAuthorizationProvidersInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListWebsiteCertificateAuthoritiesInputShapeAWSREST(v *types.ListWebsiteCertificateAuthoritiesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListWebsiteCertificateAuthoritiesInputShapeAWSJSON(v *types.ListWebsiteCertificateAuthoritiesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalRestoreDomainAccessInputShapeAWSREST(v *types.RestoreDomainAccessInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalRestoreDomainAccessInputShapeAWSJSON(v *types.RestoreDomainAccessInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalRevokeDomainAccessInputShapeAWSREST(v *types.RevokeDomainAccessInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalRevokeDomainAccessInputShapeAWSJSON(v *types.RevokeDomainAccessInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalSignOutUserInputShapeAWSREST(v *types.SignOutUserInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalSignOutUserInputShapeAWSJSON(v *types.SignOutUserInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalUpdateAuditStreamConfigurationInputShapeAWSREST(v *types.UpdateAuditStreamConfigurationInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUpdateAuditStreamConfigurationInputShapeAWSJSON(v *types.UpdateAuditStreamConfigurationInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalUpdateCompanyNetworkConfigurationInputShapeAWSREST(v *types.UpdateCompanyNetworkConfigurationInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUpdateCompanyNetworkConfigurationInputShapeAWSJSON(v *types.UpdateCompanyNetworkConfigurationInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalUpdateDevicePolicyConfigurationInputShapeAWSREST(v *types.UpdateDevicePolicyConfigurationInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUpdateDevicePolicyConfigurationInputShapeAWSJSON(v *types.UpdateDevicePolicyConfigurationInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalUpdateDomainMetadataInputShapeAWSREST(v *types.UpdateDomainMetadataInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUpdateDomainMetadataInputShapeAWSJSON(v *types.UpdateDomainMetadataInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalUpdateFleetMetadataInputShapeAWSREST(v *types.UpdateFleetMetadataInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUpdateFleetMetadataInputShapeAWSJSON(v *types.UpdateFleetMetadataInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalUpdateIdentityProviderConfigurationInputShapeAWSREST(v *types.UpdateIdentityProviderConfigurationInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUpdateIdentityProviderConfigurationInputShapeAWSJSON(v *types.UpdateIdentityProviderConfigurationInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}
func (m AssociateDomainMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalAssociateDomainInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalAssociateDomainInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m AssociateDomainMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "AssociateDomain.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m AssociateWebsiteAuthorizationProviderMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalAssociateWebsiteAuthorizationProviderInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalAssociateWebsiteAuthorizationProviderInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m AssociateWebsiteAuthorizationProviderMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "AssociateWebsiteAuthorizationProvider.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m AssociateWebsiteCertificateAuthorityMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalAssociateWebsiteCertificateAuthorityInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalAssociateWebsiteCertificateAuthorityInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m AssociateWebsiteCertificateAuthorityMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "AssociateWebsiteCertificateAuthority.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m CreateFleetMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCreateFleetInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCreateFleetInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CreateFleetMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CreateFleet.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteFleetMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteFleetInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeleteFleetInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteFleetMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteFleet.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DescribeAuditStreamConfigurationMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDescribeAuditStreamConfigurationInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDescribeAuditStreamConfigurationInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DescribeAuditStreamConfigurationMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DescribeAuditStreamConfiguration.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DescribeCompanyNetworkConfigurationMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDescribeCompanyNetworkConfigurationInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDescribeCompanyNetworkConfigurationInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DescribeCompanyNetworkConfigurationMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DescribeCompanyNetworkConfiguration.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DescribeDeviceMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDescribeDeviceInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDescribeDeviceInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DescribeDeviceMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DescribeDevice.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DescribeDevicePolicyConfigurationMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDescribeDevicePolicyConfigurationInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDescribeDevicePolicyConfigurationInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DescribeDevicePolicyConfigurationMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DescribeDevicePolicyConfiguration.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DescribeDomainMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDescribeDomainInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDescribeDomainInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DescribeDomainMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DescribeDomain.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DescribeFleetMetadataMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDescribeFleetMetadataInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDescribeFleetMetadataInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DescribeFleetMetadataMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DescribeFleetMetadata.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DescribeIdentityProviderConfigurationMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDescribeIdentityProviderConfigurationInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDescribeIdentityProviderConfigurationInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DescribeIdentityProviderConfigurationMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DescribeIdentityProviderConfiguration.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DescribeWebsiteCertificateAuthorityMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDescribeWebsiteCertificateAuthorityInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDescribeWebsiteCertificateAuthorityInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DescribeWebsiteCertificateAuthorityMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DescribeWebsiteCertificateAuthority.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DisassociateDomainMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDisassociateDomainInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDisassociateDomainInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DisassociateDomainMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DisassociateDomain.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DisassociateWebsiteAuthorizationProviderMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDisassociateWebsiteAuthorizationProviderInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDisassociateWebsiteAuthorizationProviderInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DisassociateWebsiteAuthorizationProviderMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DisassociateWebsiteAuthorizationProvider.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DisassociateWebsiteCertificateAuthorityMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDisassociateWebsiteCertificateAuthorityInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDisassociateWebsiteCertificateAuthorityInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DisassociateWebsiteCertificateAuthorityMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DisassociateWebsiteCertificateAuthority.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListDevicesMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListDevicesInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListDevicesInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListDevicesMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListDevices.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListDomainsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListDomainsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListDomainsInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListDomainsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListDomains.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListFleetsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListFleetsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListFleetsInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListFleetsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListFleets.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListWebsiteAuthorizationProvidersMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListWebsiteAuthorizationProvidersInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListWebsiteAuthorizationProvidersInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListWebsiteAuthorizationProvidersMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListWebsiteAuthorizationProviders.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListWebsiteCertificateAuthoritiesMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListWebsiteCertificateAuthoritiesInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListWebsiteCertificateAuthoritiesInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListWebsiteCertificateAuthoritiesMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListWebsiteCertificateAuthorities.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m RestoreDomainAccessMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalRestoreDomainAccessInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalRestoreDomainAccessInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m RestoreDomainAccessMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "RestoreDomainAccess.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m RevokeDomainAccessMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalRevokeDomainAccessInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalRevokeDomainAccessInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m RevokeDomainAccessMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "RevokeDomainAccess.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m SignOutUserMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalSignOutUserInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalSignOutUserInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m SignOutUserMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "SignOutUser.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UpdateAuditStreamConfigurationMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUpdateAuditStreamConfigurationInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUpdateAuditStreamConfigurationInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UpdateAuditStreamConfigurationMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UpdateAuditStreamConfiguration.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UpdateCompanyNetworkConfigurationMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUpdateCompanyNetworkConfigurationInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUpdateCompanyNetworkConfigurationInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UpdateCompanyNetworkConfigurationMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UpdateCompanyNetworkConfiguration.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UpdateDevicePolicyConfigurationMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUpdateDevicePolicyConfigurationInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUpdateDevicePolicyConfigurationInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UpdateDevicePolicyConfigurationMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UpdateDevicePolicyConfiguration.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UpdateDomainMetadataMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUpdateDomainMetadataInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUpdateDomainMetadataInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UpdateDomainMetadataMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UpdateDomainMetadata.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UpdateFleetMetadataMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUpdateFleetMetadataInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUpdateFleetMetadataInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UpdateFleetMetadataMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UpdateFleetMetadata.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UpdateIdentityProviderConfigurationMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUpdateIdentityProviderConfigurationInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUpdateIdentityProviderConfigurationInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UpdateIdentityProviderConfigurationMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UpdateIdentityProviderConfiguration.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}
