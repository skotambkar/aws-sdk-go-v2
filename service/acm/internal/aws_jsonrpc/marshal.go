// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

// Package aws_jsonrpc service, marshal.go contains the generated operation marshalers and methods on it.

package aws_jsonrpc

import (
	"bytes"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/awserr"
	"github.com/aws/aws-sdk-go-v2/private/protocol/jsonrpc"
	"github.com/aws/aws-sdk-go-v2/service/acm/types"
)

var _ bytes.Buffer
var _ awserr.Error

// AddTagsToCertificateMarshaler defines marshaler for AddTagsToCertificate operation
type AddTagsToCertificateMarshaler struct {
	Input *types.AddTagsToCertificateInput
}

// DeleteCertificateMarshaler defines marshaler for DeleteCertificate operation
type DeleteCertificateMarshaler struct {
	Input *types.DeleteCertificateInput
}

// DescribeCertificateMarshaler defines marshaler for DescribeCertificate operation
type DescribeCertificateMarshaler struct {
	Input *types.DescribeCertificateInput
}

// ExportCertificateMarshaler defines marshaler for ExportCertificate operation
type ExportCertificateMarshaler struct {
	Input *types.ExportCertificateInput
}

// GetCertificateMarshaler defines marshaler for GetCertificate operation
type GetCertificateMarshaler struct {
	Input *types.GetCertificateInput
}

// ImportCertificateMarshaler defines marshaler for ImportCertificate operation
type ImportCertificateMarshaler struct {
	Input *types.ImportCertificateInput
}

// ListCertificatesMarshaler defines marshaler for ListCertificates operation
type ListCertificatesMarshaler struct {
	Input *types.ListCertificatesInput
}

// ListTagsForCertificateMarshaler defines marshaler for ListTagsForCertificate operation
type ListTagsForCertificateMarshaler struct {
	Input *types.ListTagsForCertificateInput
}

// RemoveTagsFromCertificateMarshaler defines marshaler for RemoveTagsFromCertificate operation
type RemoveTagsFromCertificateMarshaler struct {
	Input *types.RemoveTagsFromCertificateInput
}

// RenewCertificateMarshaler defines marshaler for RenewCertificate operation
type RenewCertificateMarshaler struct {
	Input *types.RenewCertificateInput
}

// RequestCertificateMarshaler defines marshaler for RequestCertificate operation
type RequestCertificateMarshaler struct {
	Input *types.RequestCertificateInput
}

// ResendValidationEmailMarshaler defines marshaler for ResendValidationEmail operation
type ResendValidationEmailMarshaler struct {
	Input *types.ResendValidationEmailInput
}

// UpdateCertificateOptionsMarshaler defines marshaler for UpdateCertificateOptions operation
type UpdateCertificateOptionsMarshaler struct {
	Input *types.UpdateCertificateOptionsInput
}

func MarshalAddTagsToCertificateInputShapeAWSJSON(v *types.AddTagsToCertificateInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	jsonrpc.Build(r)
	return nil
}

func MarshalDeleteCertificateInputShapeAWSJSON(v *types.DeleteCertificateInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	jsonrpc.Build(r)
	return nil
}

func MarshalDescribeCertificateInputShapeAWSJSON(v *types.DescribeCertificateInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	jsonrpc.Build(r)
	return nil
}

func MarshalExportCertificateInputShapeAWSJSON(v *types.ExportCertificateInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	jsonrpc.Build(r)
	return nil
}

func MarshalGetCertificateInputShapeAWSJSON(v *types.GetCertificateInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	jsonrpc.Build(r)
	return nil
}

func MarshalImportCertificateInputShapeAWSJSON(v *types.ImportCertificateInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	jsonrpc.Build(r)
	return nil
}

func MarshalListCertificatesInputShapeAWSJSON(v *types.ListCertificatesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	jsonrpc.Build(r)
	return nil
}

func MarshalListTagsForCertificateInputShapeAWSJSON(v *types.ListTagsForCertificateInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	jsonrpc.Build(r)
	return nil
}

func MarshalRemoveTagsFromCertificateInputShapeAWSJSON(v *types.RemoveTagsFromCertificateInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	jsonrpc.Build(r)
	return nil
}

func MarshalRenewCertificateInputShapeAWSJSON(v *types.RenewCertificateInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	jsonrpc.Build(r)
	return nil
}

func MarshalRequestCertificateInputShapeAWSJSON(v *types.RequestCertificateInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	jsonrpc.Build(r)
	return nil
}

func MarshalResendValidationEmailInputShapeAWSJSON(v *types.ResendValidationEmailInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	jsonrpc.Build(r)
	return nil
}

func MarshalUpdateCertificateOptionsInputShapeAWSJSON(v *types.UpdateCertificateOptionsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	jsonrpc.Build(r)
	return nil
}
func (m AddTagsToCertificateMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalAddTagsToCertificateInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m AddTagsToCertificateMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "AddTagsToCertificate.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteCertificateMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteCertificateInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteCertificateMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteCertificate.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DescribeCertificateMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDescribeCertificateInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DescribeCertificateMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DescribeCertificate.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ExportCertificateMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalExportCertificateInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ExportCertificateMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ExportCertificate.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetCertificateMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetCertificateInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetCertificateMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetCertificate.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ImportCertificateMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalImportCertificateInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ImportCertificateMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ImportCertificate.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListCertificatesMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListCertificatesInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListCertificatesMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListCertificates.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListTagsForCertificateMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListTagsForCertificateInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListTagsForCertificateMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListTagsForCertificate.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m RemoveTagsFromCertificateMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalRemoveTagsFromCertificateInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m RemoveTagsFromCertificateMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "RemoveTagsFromCertificate.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m RenewCertificateMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalRenewCertificateInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m RenewCertificateMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "RenewCertificate.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m RequestCertificateMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalRequestCertificateInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m RequestCertificateMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "RequestCertificate.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ResendValidationEmailMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalResendValidationEmailInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ResendValidationEmailMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ResendValidationEmail.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UpdateCertificateOptionsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUpdateCertificateOptionsInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UpdateCertificateOptionsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UpdateCertificateOptions.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}
