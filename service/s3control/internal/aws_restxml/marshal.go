// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

// Package aws_restxml service, marshal.go contains the generated operation marshalers and methods on it.

package aws_restxml

import (
	"bytes"
	"encoding/xml"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/awserr"
	"github.com/aws/aws-sdk-go-v2/private/protocol/rest"
	"github.com/aws/aws-sdk-go-v2/private/protocol/xml/xmlutil"
	"github.com/aws/aws-sdk-go-v2/service/s3control/types"
)

var _ bytes.Buffer
var _ awserr.Error

// CreateJobMarshaler defines marshaler for CreateJob operation
type CreateJobMarshaler struct {
	Input *types.CreateJobInput
}

// DeletePublicAccessBlockMarshaler defines marshaler for DeletePublicAccessBlock operation
type DeletePublicAccessBlockMarshaler struct {
	Input *types.DeletePublicAccessBlockInput
}

// DescribeJobMarshaler defines marshaler for DescribeJob operation
type DescribeJobMarshaler struct {
	Input *types.DescribeJobInput
}

// GetPublicAccessBlockMarshaler defines marshaler for GetPublicAccessBlock operation
type GetPublicAccessBlockMarshaler struct {
	Input *types.GetPublicAccessBlockInput
}

// ListJobsMarshaler defines marshaler for ListJobs operation
type ListJobsMarshaler struct {
	Input *types.ListJobsInput
}

// PutPublicAccessBlockMarshaler defines marshaler for PutPublicAccessBlock operation
type PutPublicAccessBlockMarshaler struct {
	Input *types.PutPublicAccessBlockInput
}

// UpdateJobPriorityMarshaler defines marshaler for UpdateJobPriority operation
type UpdateJobPriorityMarshaler struct {
	Input *types.UpdateJobPriorityInput
}

// UpdateJobStatusMarshaler defines marshaler for UpdateJobStatus operation
type UpdateJobStatusMarshaler struct {
	Input *types.UpdateJobStatusInput
}

func MarshalCreateJobInputShapeAWSREST(v *types.CreateJobInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCreateJobInputShapeAWSXML(v *types.CreateJobInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalDeletePublicAccessBlockInputShapeAWSREST(v *types.DeletePublicAccessBlockInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeletePublicAccessBlockInputShapeAWSXML(v *types.DeletePublicAccessBlockInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalDescribeJobInputShapeAWSREST(v *types.DescribeJobInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDescribeJobInputShapeAWSXML(v *types.DescribeJobInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalGetPublicAccessBlockInputShapeAWSREST(v *types.GetPublicAccessBlockInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetPublicAccessBlockInputShapeAWSXML(v *types.GetPublicAccessBlockInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalListJobsInputShapeAWSREST(v *types.ListJobsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListJobsInputShapeAWSXML(v *types.ListJobsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalPutPublicAccessBlockInputShapeAWSREST(v *types.PutPublicAccessBlockInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalPutPublicAccessBlockInputShapeAWSXML(v *types.PutPublicAccessBlockInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalUpdateJobPriorityInputShapeAWSREST(v *types.UpdateJobPriorityInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUpdateJobPriorityInputShapeAWSXML(v *types.UpdateJobPriorityInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalUpdateJobStatusInputShapeAWSREST(v *types.UpdateJobStatusInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUpdateJobStatusInputShapeAWSXML(v *types.UpdateJobStatusInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}
func (m CreateJobMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCreateJobInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCreateJobInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CreateJobMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CreateJob.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeletePublicAccessBlockMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeletePublicAccessBlockInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeletePublicAccessBlockInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeletePublicAccessBlockMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeletePublicAccessBlock.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DescribeJobMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDescribeJobInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDescribeJobInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DescribeJobMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DescribeJob.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetPublicAccessBlockMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetPublicAccessBlockInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetPublicAccessBlockInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetPublicAccessBlockMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetPublicAccessBlock.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListJobsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListJobsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListJobsInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListJobsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListJobs.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m PutPublicAccessBlockMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalPutPublicAccessBlockInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalPutPublicAccessBlockInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m PutPublicAccessBlockMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "PutPublicAccessBlock.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UpdateJobPriorityMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUpdateJobPriorityInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUpdateJobPriorityInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UpdateJobPriorityMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UpdateJobPriority.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UpdateJobStatusMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUpdateJobStatusInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUpdateJobStatusInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UpdateJobStatusMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UpdateJobStatus.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}
