// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

// Package aws_restjson service, marshal.go contains the generated operation marshalers and methods on it.

package aws_restjson

import (
	"bytes"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/awserr"
	"github.com/aws/aws-sdk-go-v2/private/protocol/jsonrpc"
	"github.com/aws/aws-sdk-go-v2/private/protocol/rest"
	"github.com/aws/aws-sdk-go-v2/service/iotanalytics/types"
)

var _ bytes.Buffer
var _ awserr.Error

// BatchPutMessageMarshaler defines marshaler for BatchPutMessage operation
type BatchPutMessageMarshaler struct {
	Input *types.BatchPutMessageInput
}

// CancelPipelineReprocessingMarshaler defines marshaler for CancelPipelineReprocessing operation
type CancelPipelineReprocessingMarshaler struct {
	Input *types.CancelPipelineReprocessingInput
}

// CreateChannelMarshaler defines marshaler for CreateChannel operation
type CreateChannelMarshaler struct {
	Input *types.CreateChannelInput
}

// CreateDatasetMarshaler defines marshaler for CreateDataset operation
type CreateDatasetMarshaler struct {
	Input *types.CreateDatasetInput
}

// CreateDatasetContentMarshaler defines marshaler for CreateDatasetContent operation
type CreateDatasetContentMarshaler struct {
	Input *types.CreateDatasetContentInput
}

// CreateDatastoreMarshaler defines marshaler for CreateDatastore operation
type CreateDatastoreMarshaler struct {
	Input *types.CreateDatastoreInput
}

// CreatePipelineMarshaler defines marshaler for CreatePipeline operation
type CreatePipelineMarshaler struct {
	Input *types.CreatePipelineInput
}

// DeleteChannelMarshaler defines marshaler for DeleteChannel operation
type DeleteChannelMarshaler struct {
	Input *types.DeleteChannelInput
}

// DeleteDatasetMarshaler defines marshaler for DeleteDataset operation
type DeleteDatasetMarshaler struct {
	Input *types.DeleteDatasetInput
}

// DeleteDatasetContentMarshaler defines marshaler for DeleteDatasetContent operation
type DeleteDatasetContentMarshaler struct {
	Input *types.DeleteDatasetContentInput
}

// DeleteDatastoreMarshaler defines marshaler for DeleteDatastore operation
type DeleteDatastoreMarshaler struct {
	Input *types.DeleteDatastoreInput
}

// DeletePipelineMarshaler defines marshaler for DeletePipeline operation
type DeletePipelineMarshaler struct {
	Input *types.DeletePipelineInput
}

// DescribeChannelMarshaler defines marshaler for DescribeChannel operation
type DescribeChannelMarshaler struct {
	Input *types.DescribeChannelInput
}

// DescribeDatasetMarshaler defines marshaler for DescribeDataset operation
type DescribeDatasetMarshaler struct {
	Input *types.DescribeDatasetInput
}

// DescribeDatastoreMarshaler defines marshaler for DescribeDatastore operation
type DescribeDatastoreMarshaler struct {
	Input *types.DescribeDatastoreInput
}

// DescribeLoggingOptionsMarshaler defines marshaler for DescribeLoggingOptions operation
type DescribeLoggingOptionsMarshaler struct {
	Input *types.DescribeLoggingOptionsInput
}

// DescribePipelineMarshaler defines marshaler for DescribePipeline operation
type DescribePipelineMarshaler struct {
	Input *types.DescribePipelineInput
}

// GetDatasetContentMarshaler defines marshaler for GetDatasetContent operation
type GetDatasetContentMarshaler struct {
	Input *types.GetDatasetContentInput
}

// ListChannelsMarshaler defines marshaler for ListChannels operation
type ListChannelsMarshaler struct {
	Input *types.ListChannelsInput
}

// ListDatasetContentsMarshaler defines marshaler for ListDatasetContents operation
type ListDatasetContentsMarshaler struct {
	Input *types.ListDatasetContentsInput
}

// ListDatasetsMarshaler defines marshaler for ListDatasets operation
type ListDatasetsMarshaler struct {
	Input *types.ListDatasetsInput
}

// ListDatastoresMarshaler defines marshaler for ListDatastores operation
type ListDatastoresMarshaler struct {
	Input *types.ListDatastoresInput
}

// ListPipelinesMarshaler defines marshaler for ListPipelines operation
type ListPipelinesMarshaler struct {
	Input *types.ListPipelinesInput
}

// ListTagsForResourceMarshaler defines marshaler for ListTagsForResource operation
type ListTagsForResourceMarshaler struct {
	Input *types.ListTagsForResourceInput
}

// PutLoggingOptionsMarshaler defines marshaler for PutLoggingOptions operation
type PutLoggingOptionsMarshaler struct {
	Input *types.PutLoggingOptionsInput
}

// RunPipelineActivityMarshaler defines marshaler for RunPipelineActivity operation
type RunPipelineActivityMarshaler struct {
	Input *types.RunPipelineActivityInput
}

// SampleChannelDataMarshaler defines marshaler for SampleChannelData operation
type SampleChannelDataMarshaler struct {
	Input *types.SampleChannelDataInput
}

// StartPipelineReprocessingMarshaler defines marshaler for StartPipelineReprocessing operation
type StartPipelineReprocessingMarshaler struct {
	Input *types.StartPipelineReprocessingInput
}

// TagResourceMarshaler defines marshaler for TagResource operation
type TagResourceMarshaler struct {
	Input *types.TagResourceInput
}

// UntagResourceMarshaler defines marshaler for UntagResource operation
type UntagResourceMarshaler struct {
	Input *types.UntagResourceInput
}

// UpdateChannelMarshaler defines marshaler for UpdateChannel operation
type UpdateChannelMarshaler struct {
	Input *types.UpdateChannelInput
}

// UpdateDatasetMarshaler defines marshaler for UpdateDataset operation
type UpdateDatasetMarshaler struct {
	Input *types.UpdateDatasetInput
}

// UpdateDatastoreMarshaler defines marshaler for UpdateDatastore operation
type UpdateDatastoreMarshaler struct {
	Input *types.UpdateDatastoreInput
}

// UpdatePipelineMarshaler defines marshaler for UpdatePipeline operation
type UpdatePipelineMarshaler struct {
	Input *types.UpdatePipelineInput
}

func MarshalBatchPutMessageInputShapeAWSREST(v *types.BatchPutMessageInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalBatchPutMessageInputShapeAWSJSON(v *types.BatchPutMessageInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalCancelPipelineReprocessingInputShapeAWSREST(v *types.CancelPipelineReprocessingInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCancelPipelineReprocessingInputShapeAWSJSON(v *types.CancelPipelineReprocessingInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalCreateChannelInputShapeAWSREST(v *types.CreateChannelInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCreateChannelInputShapeAWSJSON(v *types.CreateChannelInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalCreateDatasetInputShapeAWSREST(v *types.CreateDatasetInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCreateDatasetInputShapeAWSJSON(v *types.CreateDatasetInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalCreateDatasetContentInputShapeAWSREST(v *types.CreateDatasetContentInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCreateDatasetContentInputShapeAWSJSON(v *types.CreateDatasetContentInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalCreateDatastoreInputShapeAWSREST(v *types.CreateDatastoreInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCreateDatastoreInputShapeAWSJSON(v *types.CreateDatastoreInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalCreatePipelineInputShapeAWSREST(v *types.CreatePipelineInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCreatePipelineInputShapeAWSJSON(v *types.CreatePipelineInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDeleteChannelInputShapeAWSREST(v *types.DeleteChannelInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeleteChannelInputShapeAWSJSON(v *types.DeleteChannelInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDeleteDatasetInputShapeAWSREST(v *types.DeleteDatasetInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeleteDatasetInputShapeAWSJSON(v *types.DeleteDatasetInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDeleteDatasetContentInputShapeAWSREST(v *types.DeleteDatasetContentInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeleteDatasetContentInputShapeAWSJSON(v *types.DeleteDatasetContentInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDeleteDatastoreInputShapeAWSREST(v *types.DeleteDatastoreInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeleteDatastoreInputShapeAWSJSON(v *types.DeleteDatastoreInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDeletePipelineInputShapeAWSREST(v *types.DeletePipelineInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeletePipelineInputShapeAWSJSON(v *types.DeletePipelineInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDescribeChannelInputShapeAWSREST(v *types.DescribeChannelInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDescribeChannelInputShapeAWSJSON(v *types.DescribeChannelInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDescribeDatasetInputShapeAWSREST(v *types.DescribeDatasetInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDescribeDatasetInputShapeAWSJSON(v *types.DescribeDatasetInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDescribeDatastoreInputShapeAWSREST(v *types.DescribeDatastoreInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDescribeDatastoreInputShapeAWSJSON(v *types.DescribeDatastoreInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDescribeLoggingOptionsInputShapeAWSREST(v *types.DescribeLoggingOptionsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDescribeLoggingOptionsInputShapeAWSJSON(v *types.DescribeLoggingOptionsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDescribePipelineInputShapeAWSREST(v *types.DescribePipelineInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDescribePipelineInputShapeAWSJSON(v *types.DescribePipelineInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalGetDatasetContentInputShapeAWSREST(v *types.GetDatasetContentInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetDatasetContentInputShapeAWSJSON(v *types.GetDatasetContentInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListChannelsInputShapeAWSREST(v *types.ListChannelsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListChannelsInputShapeAWSJSON(v *types.ListChannelsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListDatasetContentsInputShapeAWSREST(v *types.ListDatasetContentsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListDatasetContentsInputShapeAWSJSON(v *types.ListDatasetContentsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListDatasetsInputShapeAWSREST(v *types.ListDatasetsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListDatasetsInputShapeAWSJSON(v *types.ListDatasetsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListDatastoresInputShapeAWSREST(v *types.ListDatastoresInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListDatastoresInputShapeAWSJSON(v *types.ListDatastoresInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListPipelinesInputShapeAWSREST(v *types.ListPipelinesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListPipelinesInputShapeAWSJSON(v *types.ListPipelinesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListTagsForResourceInputShapeAWSREST(v *types.ListTagsForResourceInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListTagsForResourceInputShapeAWSJSON(v *types.ListTagsForResourceInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalPutLoggingOptionsInputShapeAWSREST(v *types.PutLoggingOptionsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalPutLoggingOptionsInputShapeAWSJSON(v *types.PutLoggingOptionsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalRunPipelineActivityInputShapeAWSREST(v *types.RunPipelineActivityInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalRunPipelineActivityInputShapeAWSJSON(v *types.RunPipelineActivityInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalSampleChannelDataInputShapeAWSREST(v *types.SampleChannelDataInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalSampleChannelDataInputShapeAWSJSON(v *types.SampleChannelDataInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalStartPipelineReprocessingInputShapeAWSREST(v *types.StartPipelineReprocessingInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalStartPipelineReprocessingInputShapeAWSJSON(v *types.StartPipelineReprocessingInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalTagResourceInputShapeAWSREST(v *types.TagResourceInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalTagResourceInputShapeAWSJSON(v *types.TagResourceInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalUntagResourceInputShapeAWSREST(v *types.UntagResourceInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUntagResourceInputShapeAWSJSON(v *types.UntagResourceInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalUpdateChannelInputShapeAWSREST(v *types.UpdateChannelInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUpdateChannelInputShapeAWSJSON(v *types.UpdateChannelInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalUpdateDatasetInputShapeAWSREST(v *types.UpdateDatasetInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUpdateDatasetInputShapeAWSJSON(v *types.UpdateDatasetInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalUpdateDatastoreInputShapeAWSREST(v *types.UpdateDatastoreInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUpdateDatastoreInputShapeAWSJSON(v *types.UpdateDatastoreInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalUpdatePipelineInputShapeAWSREST(v *types.UpdatePipelineInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUpdatePipelineInputShapeAWSJSON(v *types.UpdatePipelineInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}
func (m BatchPutMessageMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalBatchPutMessageInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalBatchPutMessageInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m BatchPutMessageMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "BatchPutMessage.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m CancelPipelineReprocessingMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCancelPipelineReprocessingInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCancelPipelineReprocessingInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CancelPipelineReprocessingMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CancelPipelineReprocessing.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m CreateChannelMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCreateChannelInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCreateChannelInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CreateChannelMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CreateChannel.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m CreateDatasetMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCreateDatasetInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCreateDatasetInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CreateDatasetMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CreateDataset.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m CreateDatasetContentMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCreateDatasetContentInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCreateDatasetContentInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CreateDatasetContentMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CreateDatasetContent.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m CreateDatastoreMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCreateDatastoreInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCreateDatastoreInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CreateDatastoreMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CreateDatastore.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m CreatePipelineMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCreatePipelineInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCreatePipelineInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CreatePipelineMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CreatePipeline.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteChannelMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteChannelInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeleteChannelInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteChannelMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteChannel.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteDatasetMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteDatasetInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeleteDatasetInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteDatasetMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteDataset.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteDatasetContentMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteDatasetContentInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeleteDatasetContentInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteDatasetContentMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteDatasetContent.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteDatastoreMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteDatastoreInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeleteDatastoreInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteDatastoreMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteDatastore.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeletePipelineMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeletePipelineInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeletePipelineInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeletePipelineMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeletePipeline.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DescribeChannelMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDescribeChannelInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDescribeChannelInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DescribeChannelMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DescribeChannel.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DescribeDatasetMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDescribeDatasetInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDescribeDatasetInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DescribeDatasetMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DescribeDataset.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DescribeDatastoreMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDescribeDatastoreInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDescribeDatastoreInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DescribeDatastoreMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DescribeDatastore.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DescribeLoggingOptionsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDescribeLoggingOptionsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDescribeLoggingOptionsInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DescribeLoggingOptionsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DescribeLoggingOptions.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DescribePipelineMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDescribePipelineInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDescribePipelineInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DescribePipelineMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DescribePipeline.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetDatasetContentMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetDatasetContentInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetDatasetContentInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetDatasetContentMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetDatasetContent.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListChannelsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListChannelsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListChannelsInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListChannelsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListChannels.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListDatasetContentsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListDatasetContentsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListDatasetContentsInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListDatasetContentsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListDatasetContents.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListDatasetsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListDatasetsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListDatasetsInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListDatasetsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListDatasets.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListDatastoresMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListDatastoresInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListDatastoresInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListDatastoresMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListDatastores.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListPipelinesMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListPipelinesInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListPipelinesInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListPipelinesMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListPipelines.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListTagsForResourceMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListTagsForResourceInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListTagsForResourceInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListTagsForResourceMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListTagsForResource.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m PutLoggingOptionsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalPutLoggingOptionsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalPutLoggingOptionsInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m PutLoggingOptionsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "PutLoggingOptions.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m RunPipelineActivityMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalRunPipelineActivityInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalRunPipelineActivityInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m RunPipelineActivityMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "RunPipelineActivity.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m SampleChannelDataMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalSampleChannelDataInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalSampleChannelDataInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m SampleChannelDataMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "SampleChannelData.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m StartPipelineReprocessingMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalStartPipelineReprocessingInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalStartPipelineReprocessingInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m StartPipelineReprocessingMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "StartPipelineReprocessing.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m TagResourceMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalTagResourceInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalTagResourceInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m TagResourceMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "TagResource.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UntagResourceMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUntagResourceInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUntagResourceInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UntagResourceMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UntagResource.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UpdateChannelMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUpdateChannelInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUpdateChannelInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UpdateChannelMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UpdateChannel.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UpdateDatasetMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUpdateDatasetInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUpdateDatasetInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UpdateDatasetMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UpdateDataset.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UpdateDatastoreMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUpdateDatastoreInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUpdateDatastoreInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UpdateDatastoreMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UpdateDatastore.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UpdatePipelineMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUpdatePipelineInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUpdatePipelineInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UpdatePipelineMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UpdatePipeline.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}
