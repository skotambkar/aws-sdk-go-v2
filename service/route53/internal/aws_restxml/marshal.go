// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

// Package aws_restxml service, marshal.go contains the generated operation marshalers and methods on it.

package aws_restxml

import (
	"bytes"
	"encoding/xml"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/awserr"
	"github.com/aws/aws-sdk-go-v2/private/protocol/rest"
	"github.com/aws/aws-sdk-go-v2/private/protocol/xml/xmlutil"
	"github.com/aws/aws-sdk-go-v2/service/route53/types"
)

var _ bytes.Buffer
var _ awserr.Error

// AssociateVPCWithHostedZoneMarshaler defines marshaler for AssociateVPCWithHostedZone operation
type AssociateVPCWithHostedZoneMarshaler struct {
	Input *types.AssociateVPCWithHostedZoneInput
}

// ChangeResourceRecordSetsMarshaler defines marshaler for ChangeResourceRecordSets operation
type ChangeResourceRecordSetsMarshaler struct {
	Input *types.ChangeResourceRecordSetsInput
}

// ChangeTagsForResourceMarshaler defines marshaler for ChangeTagsForResource operation
type ChangeTagsForResourceMarshaler struct {
	Input *types.ChangeTagsForResourceInput
}

// CreateHealthCheckMarshaler defines marshaler for CreateHealthCheck operation
type CreateHealthCheckMarshaler struct {
	Input *types.CreateHealthCheckInput
}

// CreateHostedZoneMarshaler defines marshaler for CreateHostedZone operation
type CreateHostedZoneMarshaler struct {
	Input *types.CreateHostedZoneInput
}

// CreateQueryLoggingConfigMarshaler defines marshaler for CreateQueryLoggingConfig operation
type CreateQueryLoggingConfigMarshaler struct {
	Input *types.CreateQueryLoggingConfigInput
}

// CreateReusableDelegationSetMarshaler defines marshaler for CreateReusableDelegationSet operation
type CreateReusableDelegationSetMarshaler struct {
	Input *types.CreateReusableDelegationSetInput
}

// CreateTrafficPolicyMarshaler defines marshaler for CreateTrafficPolicy operation
type CreateTrafficPolicyMarshaler struct {
	Input *types.CreateTrafficPolicyInput
}

// CreateTrafficPolicyInstanceMarshaler defines marshaler for CreateTrafficPolicyInstance operation
type CreateTrafficPolicyInstanceMarshaler struct {
	Input *types.CreateTrafficPolicyInstanceInput
}

// CreateTrafficPolicyVersionMarshaler defines marshaler for CreateTrafficPolicyVersion operation
type CreateTrafficPolicyVersionMarshaler struct {
	Input *types.CreateTrafficPolicyVersionInput
}

// CreateVPCAssociationAuthorizationMarshaler defines marshaler for CreateVPCAssociationAuthorization operation
type CreateVPCAssociationAuthorizationMarshaler struct {
	Input *types.CreateVPCAssociationAuthorizationInput
}

// DeleteHealthCheckMarshaler defines marshaler for DeleteHealthCheck operation
type DeleteHealthCheckMarshaler struct {
	Input *types.DeleteHealthCheckInput
}

// DeleteHostedZoneMarshaler defines marshaler for DeleteHostedZone operation
type DeleteHostedZoneMarshaler struct {
	Input *types.DeleteHostedZoneInput
}

// DeleteQueryLoggingConfigMarshaler defines marshaler for DeleteQueryLoggingConfig operation
type DeleteQueryLoggingConfigMarshaler struct {
	Input *types.DeleteQueryLoggingConfigInput
}

// DeleteReusableDelegationSetMarshaler defines marshaler for DeleteReusableDelegationSet operation
type DeleteReusableDelegationSetMarshaler struct {
	Input *types.DeleteReusableDelegationSetInput
}

// DeleteTrafficPolicyMarshaler defines marshaler for DeleteTrafficPolicy operation
type DeleteTrafficPolicyMarshaler struct {
	Input *types.DeleteTrafficPolicyInput
}

// DeleteTrafficPolicyInstanceMarshaler defines marshaler for DeleteTrafficPolicyInstance operation
type DeleteTrafficPolicyInstanceMarshaler struct {
	Input *types.DeleteTrafficPolicyInstanceInput
}

// DeleteVPCAssociationAuthorizationMarshaler defines marshaler for DeleteVPCAssociationAuthorization operation
type DeleteVPCAssociationAuthorizationMarshaler struct {
	Input *types.DeleteVPCAssociationAuthorizationInput
}

// DisassociateVPCFromHostedZoneMarshaler defines marshaler for DisassociateVPCFromHostedZone operation
type DisassociateVPCFromHostedZoneMarshaler struct {
	Input *types.DisassociateVPCFromHostedZoneInput
}

// GetAccountLimitMarshaler defines marshaler for GetAccountLimit operation
type GetAccountLimitMarshaler struct {
	Input *types.GetAccountLimitInput
}

// GetChangeMarshaler defines marshaler for GetChange operation
type GetChangeMarshaler struct {
	Input *types.GetChangeInput
}

// GetCheckerIpRangesMarshaler defines marshaler for GetCheckerIpRanges operation
type GetCheckerIpRangesMarshaler struct {
	Input *types.GetCheckerIpRangesInput
}

// GetGeoLocationMarshaler defines marshaler for GetGeoLocation operation
type GetGeoLocationMarshaler struct {
	Input *types.GetGeoLocationInput
}

// GetHealthCheckMarshaler defines marshaler for GetHealthCheck operation
type GetHealthCheckMarshaler struct {
	Input *types.GetHealthCheckInput
}

// GetHealthCheckCountMarshaler defines marshaler for GetHealthCheckCount operation
type GetHealthCheckCountMarshaler struct {
	Input *types.GetHealthCheckCountInput
}

// GetHealthCheckLastFailureReasonMarshaler defines marshaler for GetHealthCheckLastFailureReason operation
type GetHealthCheckLastFailureReasonMarshaler struct {
	Input *types.GetHealthCheckLastFailureReasonInput
}

// GetHealthCheckStatusMarshaler defines marshaler for GetHealthCheckStatus operation
type GetHealthCheckStatusMarshaler struct {
	Input *types.GetHealthCheckStatusInput
}

// GetHostedZoneMarshaler defines marshaler for GetHostedZone operation
type GetHostedZoneMarshaler struct {
	Input *types.GetHostedZoneInput
}

// GetHostedZoneCountMarshaler defines marshaler for GetHostedZoneCount operation
type GetHostedZoneCountMarshaler struct {
	Input *types.GetHostedZoneCountInput
}

// GetHostedZoneLimitMarshaler defines marshaler for GetHostedZoneLimit operation
type GetHostedZoneLimitMarshaler struct {
	Input *types.GetHostedZoneLimitInput
}

// GetQueryLoggingConfigMarshaler defines marshaler for GetQueryLoggingConfig operation
type GetQueryLoggingConfigMarshaler struct {
	Input *types.GetQueryLoggingConfigInput
}

// GetReusableDelegationSetMarshaler defines marshaler for GetReusableDelegationSet operation
type GetReusableDelegationSetMarshaler struct {
	Input *types.GetReusableDelegationSetInput
}

// GetReusableDelegationSetLimitMarshaler defines marshaler for GetReusableDelegationSetLimit operation
type GetReusableDelegationSetLimitMarshaler struct {
	Input *types.GetReusableDelegationSetLimitInput
}

// GetTrafficPolicyMarshaler defines marshaler for GetTrafficPolicy operation
type GetTrafficPolicyMarshaler struct {
	Input *types.GetTrafficPolicyInput
}

// GetTrafficPolicyInstanceMarshaler defines marshaler for GetTrafficPolicyInstance operation
type GetTrafficPolicyInstanceMarshaler struct {
	Input *types.GetTrafficPolicyInstanceInput
}

// GetTrafficPolicyInstanceCountMarshaler defines marshaler for GetTrafficPolicyInstanceCount operation
type GetTrafficPolicyInstanceCountMarshaler struct {
	Input *types.GetTrafficPolicyInstanceCountInput
}

// ListGeoLocationsMarshaler defines marshaler for ListGeoLocations operation
type ListGeoLocationsMarshaler struct {
	Input *types.ListGeoLocationsInput
}

// ListHealthChecksMarshaler defines marshaler for ListHealthChecks operation
type ListHealthChecksMarshaler struct {
	Input *types.ListHealthChecksInput
}

// ListHostedZonesMarshaler defines marshaler for ListHostedZones operation
type ListHostedZonesMarshaler struct {
	Input *types.ListHostedZonesInput
}

// ListHostedZonesByNameMarshaler defines marshaler for ListHostedZonesByName operation
type ListHostedZonesByNameMarshaler struct {
	Input *types.ListHostedZonesByNameInput
}

// ListQueryLoggingConfigsMarshaler defines marshaler for ListQueryLoggingConfigs operation
type ListQueryLoggingConfigsMarshaler struct {
	Input *types.ListQueryLoggingConfigsInput
}

// ListResourceRecordSetsMarshaler defines marshaler for ListResourceRecordSets operation
type ListResourceRecordSetsMarshaler struct {
	Input *types.ListResourceRecordSetsInput
}

// ListReusableDelegationSetsMarshaler defines marshaler for ListReusableDelegationSets operation
type ListReusableDelegationSetsMarshaler struct {
	Input *types.ListReusableDelegationSetsInput
}

// ListTagsForResourceMarshaler defines marshaler for ListTagsForResource operation
type ListTagsForResourceMarshaler struct {
	Input *types.ListTagsForResourceInput
}

// ListTagsForResourcesMarshaler defines marshaler for ListTagsForResources operation
type ListTagsForResourcesMarshaler struct {
	Input *types.ListTagsForResourcesInput
}

// ListTrafficPoliciesMarshaler defines marshaler for ListTrafficPolicies operation
type ListTrafficPoliciesMarshaler struct {
	Input *types.ListTrafficPoliciesInput
}

// ListTrafficPolicyInstancesMarshaler defines marshaler for ListTrafficPolicyInstances operation
type ListTrafficPolicyInstancesMarshaler struct {
	Input *types.ListTrafficPolicyInstancesInput
}

// ListTrafficPolicyInstancesByHostedZoneMarshaler defines marshaler for ListTrafficPolicyInstancesByHostedZone operation
type ListTrafficPolicyInstancesByHostedZoneMarshaler struct {
	Input *types.ListTrafficPolicyInstancesByHostedZoneInput
}

// ListTrafficPolicyInstancesByPolicyMarshaler defines marshaler for ListTrafficPolicyInstancesByPolicy operation
type ListTrafficPolicyInstancesByPolicyMarshaler struct {
	Input *types.ListTrafficPolicyInstancesByPolicyInput
}

// ListTrafficPolicyVersionsMarshaler defines marshaler for ListTrafficPolicyVersions operation
type ListTrafficPolicyVersionsMarshaler struct {
	Input *types.ListTrafficPolicyVersionsInput
}

// ListVPCAssociationAuthorizationsMarshaler defines marshaler for ListVPCAssociationAuthorizations operation
type ListVPCAssociationAuthorizationsMarshaler struct {
	Input *types.ListVPCAssociationAuthorizationsInput
}

// TestDNSAnswerMarshaler defines marshaler for TestDNSAnswer operation
type TestDNSAnswerMarshaler struct {
	Input *types.TestDNSAnswerInput
}

// UpdateHealthCheckMarshaler defines marshaler for UpdateHealthCheck operation
type UpdateHealthCheckMarshaler struct {
	Input *types.UpdateHealthCheckInput
}

// UpdateHostedZoneCommentMarshaler defines marshaler for UpdateHostedZoneComment operation
type UpdateHostedZoneCommentMarshaler struct {
	Input *types.UpdateHostedZoneCommentInput
}

// UpdateTrafficPolicyCommentMarshaler defines marshaler for UpdateTrafficPolicyComment operation
type UpdateTrafficPolicyCommentMarshaler struct {
	Input *types.UpdateTrafficPolicyCommentInput
}

// UpdateTrafficPolicyInstanceMarshaler defines marshaler for UpdateTrafficPolicyInstance operation
type UpdateTrafficPolicyInstanceMarshaler struct {
	Input *types.UpdateTrafficPolicyInstanceInput
}

func MarshalAssociateVPCWithHostedZoneInputShapeAWSREST(v *types.AssociateVPCWithHostedZoneInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalAssociateVPCWithHostedZoneInputShapeAWSXML(v *types.AssociateVPCWithHostedZoneInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalChangeResourceRecordSetsInputShapeAWSREST(v *types.ChangeResourceRecordSetsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalChangeResourceRecordSetsInputShapeAWSXML(v *types.ChangeResourceRecordSetsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalChangeTagsForResourceInputShapeAWSREST(v *types.ChangeTagsForResourceInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalChangeTagsForResourceInputShapeAWSXML(v *types.ChangeTagsForResourceInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalCreateHealthCheckInputShapeAWSREST(v *types.CreateHealthCheckInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCreateHealthCheckInputShapeAWSXML(v *types.CreateHealthCheckInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalCreateHostedZoneInputShapeAWSREST(v *types.CreateHostedZoneInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCreateHostedZoneInputShapeAWSXML(v *types.CreateHostedZoneInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalCreateQueryLoggingConfigInputShapeAWSREST(v *types.CreateQueryLoggingConfigInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCreateQueryLoggingConfigInputShapeAWSXML(v *types.CreateQueryLoggingConfigInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalCreateReusableDelegationSetInputShapeAWSREST(v *types.CreateReusableDelegationSetInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCreateReusableDelegationSetInputShapeAWSXML(v *types.CreateReusableDelegationSetInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalCreateTrafficPolicyInputShapeAWSREST(v *types.CreateTrafficPolicyInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCreateTrafficPolicyInputShapeAWSXML(v *types.CreateTrafficPolicyInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalCreateTrafficPolicyInstanceInputShapeAWSREST(v *types.CreateTrafficPolicyInstanceInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCreateTrafficPolicyInstanceInputShapeAWSXML(v *types.CreateTrafficPolicyInstanceInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalCreateTrafficPolicyVersionInputShapeAWSREST(v *types.CreateTrafficPolicyVersionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCreateTrafficPolicyVersionInputShapeAWSXML(v *types.CreateTrafficPolicyVersionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalCreateVPCAssociationAuthorizationInputShapeAWSREST(v *types.CreateVPCAssociationAuthorizationInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCreateVPCAssociationAuthorizationInputShapeAWSXML(v *types.CreateVPCAssociationAuthorizationInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalDeleteHealthCheckInputShapeAWSREST(v *types.DeleteHealthCheckInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeleteHealthCheckInputShapeAWSXML(v *types.DeleteHealthCheckInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalDeleteHostedZoneInputShapeAWSREST(v *types.DeleteHostedZoneInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeleteHostedZoneInputShapeAWSXML(v *types.DeleteHostedZoneInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalDeleteQueryLoggingConfigInputShapeAWSREST(v *types.DeleteQueryLoggingConfigInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeleteQueryLoggingConfigInputShapeAWSXML(v *types.DeleteQueryLoggingConfigInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalDeleteReusableDelegationSetInputShapeAWSREST(v *types.DeleteReusableDelegationSetInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeleteReusableDelegationSetInputShapeAWSXML(v *types.DeleteReusableDelegationSetInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalDeleteTrafficPolicyInputShapeAWSREST(v *types.DeleteTrafficPolicyInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeleteTrafficPolicyInputShapeAWSXML(v *types.DeleteTrafficPolicyInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalDeleteTrafficPolicyInstanceInputShapeAWSREST(v *types.DeleteTrafficPolicyInstanceInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeleteTrafficPolicyInstanceInputShapeAWSXML(v *types.DeleteTrafficPolicyInstanceInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalDeleteVPCAssociationAuthorizationInputShapeAWSREST(v *types.DeleteVPCAssociationAuthorizationInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeleteVPCAssociationAuthorizationInputShapeAWSXML(v *types.DeleteVPCAssociationAuthorizationInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalDisassociateVPCFromHostedZoneInputShapeAWSREST(v *types.DisassociateVPCFromHostedZoneInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDisassociateVPCFromHostedZoneInputShapeAWSXML(v *types.DisassociateVPCFromHostedZoneInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalGetAccountLimitInputShapeAWSREST(v *types.GetAccountLimitInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetAccountLimitInputShapeAWSXML(v *types.GetAccountLimitInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalGetChangeInputShapeAWSREST(v *types.GetChangeInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetChangeInputShapeAWSXML(v *types.GetChangeInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalGetCheckerIpRangesInputShapeAWSREST(v *types.GetCheckerIpRangesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetCheckerIpRangesInputShapeAWSXML(v *types.GetCheckerIpRangesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalGetGeoLocationInputShapeAWSREST(v *types.GetGeoLocationInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetGeoLocationInputShapeAWSXML(v *types.GetGeoLocationInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalGetHealthCheckInputShapeAWSREST(v *types.GetHealthCheckInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetHealthCheckInputShapeAWSXML(v *types.GetHealthCheckInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalGetHealthCheckCountInputShapeAWSREST(v *types.GetHealthCheckCountInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetHealthCheckCountInputShapeAWSXML(v *types.GetHealthCheckCountInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalGetHealthCheckLastFailureReasonInputShapeAWSREST(v *types.GetHealthCheckLastFailureReasonInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetHealthCheckLastFailureReasonInputShapeAWSXML(v *types.GetHealthCheckLastFailureReasonInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalGetHealthCheckStatusInputShapeAWSREST(v *types.GetHealthCheckStatusInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetHealthCheckStatusInputShapeAWSXML(v *types.GetHealthCheckStatusInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalGetHostedZoneInputShapeAWSREST(v *types.GetHostedZoneInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetHostedZoneInputShapeAWSXML(v *types.GetHostedZoneInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalGetHostedZoneCountInputShapeAWSREST(v *types.GetHostedZoneCountInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetHostedZoneCountInputShapeAWSXML(v *types.GetHostedZoneCountInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalGetHostedZoneLimitInputShapeAWSREST(v *types.GetHostedZoneLimitInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetHostedZoneLimitInputShapeAWSXML(v *types.GetHostedZoneLimitInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalGetQueryLoggingConfigInputShapeAWSREST(v *types.GetQueryLoggingConfigInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetQueryLoggingConfigInputShapeAWSXML(v *types.GetQueryLoggingConfigInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalGetReusableDelegationSetInputShapeAWSREST(v *types.GetReusableDelegationSetInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetReusableDelegationSetInputShapeAWSXML(v *types.GetReusableDelegationSetInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalGetReusableDelegationSetLimitInputShapeAWSREST(v *types.GetReusableDelegationSetLimitInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetReusableDelegationSetLimitInputShapeAWSXML(v *types.GetReusableDelegationSetLimitInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalGetTrafficPolicyInputShapeAWSREST(v *types.GetTrafficPolicyInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetTrafficPolicyInputShapeAWSXML(v *types.GetTrafficPolicyInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalGetTrafficPolicyInstanceInputShapeAWSREST(v *types.GetTrafficPolicyInstanceInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetTrafficPolicyInstanceInputShapeAWSXML(v *types.GetTrafficPolicyInstanceInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalGetTrafficPolicyInstanceCountInputShapeAWSREST(v *types.GetTrafficPolicyInstanceCountInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetTrafficPolicyInstanceCountInputShapeAWSXML(v *types.GetTrafficPolicyInstanceCountInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalListGeoLocationsInputShapeAWSREST(v *types.ListGeoLocationsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListGeoLocationsInputShapeAWSXML(v *types.ListGeoLocationsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalListHealthChecksInputShapeAWSREST(v *types.ListHealthChecksInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListHealthChecksInputShapeAWSXML(v *types.ListHealthChecksInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalListHostedZonesInputShapeAWSREST(v *types.ListHostedZonesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListHostedZonesInputShapeAWSXML(v *types.ListHostedZonesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalListHostedZonesByNameInputShapeAWSREST(v *types.ListHostedZonesByNameInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListHostedZonesByNameInputShapeAWSXML(v *types.ListHostedZonesByNameInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalListQueryLoggingConfigsInputShapeAWSREST(v *types.ListQueryLoggingConfigsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListQueryLoggingConfigsInputShapeAWSXML(v *types.ListQueryLoggingConfigsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalListResourceRecordSetsInputShapeAWSREST(v *types.ListResourceRecordSetsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListResourceRecordSetsInputShapeAWSXML(v *types.ListResourceRecordSetsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalListReusableDelegationSetsInputShapeAWSREST(v *types.ListReusableDelegationSetsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListReusableDelegationSetsInputShapeAWSXML(v *types.ListReusableDelegationSetsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalListTagsForResourceInputShapeAWSREST(v *types.ListTagsForResourceInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListTagsForResourceInputShapeAWSXML(v *types.ListTagsForResourceInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalListTagsForResourcesInputShapeAWSREST(v *types.ListTagsForResourcesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListTagsForResourcesInputShapeAWSXML(v *types.ListTagsForResourcesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalListTrafficPoliciesInputShapeAWSREST(v *types.ListTrafficPoliciesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListTrafficPoliciesInputShapeAWSXML(v *types.ListTrafficPoliciesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalListTrafficPolicyInstancesInputShapeAWSREST(v *types.ListTrafficPolicyInstancesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListTrafficPolicyInstancesInputShapeAWSXML(v *types.ListTrafficPolicyInstancesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalListTrafficPolicyInstancesByHostedZoneInputShapeAWSREST(v *types.ListTrafficPolicyInstancesByHostedZoneInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListTrafficPolicyInstancesByHostedZoneInputShapeAWSXML(v *types.ListTrafficPolicyInstancesByHostedZoneInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalListTrafficPolicyInstancesByPolicyInputShapeAWSREST(v *types.ListTrafficPolicyInstancesByPolicyInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListTrafficPolicyInstancesByPolicyInputShapeAWSXML(v *types.ListTrafficPolicyInstancesByPolicyInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalListTrafficPolicyVersionsInputShapeAWSREST(v *types.ListTrafficPolicyVersionsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListTrafficPolicyVersionsInputShapeAWSXML(v *types.ListTrafficPolicyVersionsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalListVPCAssociationAuthorizationsInputShapeAWSREST(v *types.ListVPCAssociationAuthorizationsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListVPCAssociationAuthorizationsInputShapeAWSXML(v *types.ListVPCAssociationAuthorizationsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalTestDNSAnswerInputShapeAWSREST(v *types.TestDNSAnswerInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalTestDNSAnswerInputShapeAWSXML(v *types.TestDNSAnswerInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalUpdateHealthCheckInputShapeAWSREST(v *types.UpdateHealthCheckInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUpdateHealthCheckInputShapeAWSXML(v *types.UpdateHealthCheckInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalUpdateHostedZoneCommentInputShapeAWSREST(v *types.UpdateHostedZoneCommentInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUpdateHostedZoneCommentInputShapeAWSXML(v *types.UpdateHostedZoneCommentInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalUpdateTrafficPolicyCommentInputShapeAWSREST(v *types.UpdateTrafficPolicyCommentInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUpdateTrafficPolicyCommentInputShapeAWSXML(v *types.UpdateTrafficPolicyCommentInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalUpdateTrafficPolicyInstanceInputShapeAWSREST(v *types.UpdateTrafficPolicyInstanceInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUpdateTrafficPolicyInstanceInputShapeAWSXML(v *types.UpdateTrafficPolicyInstanceInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}
func (m AssociateVPCWithHostedZoneMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalAssociateVPCWithHostedZoneInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalAssociateVPCWithHostedZoneInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m AssociateVPCWithHostedZoneMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "AssociateVPCWithHostedZone.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ChangeResourceRecordSetsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalChangeResourceRecordSetsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalChangeResourceRecordSetsInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ChangeResourceRecordSetsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ChangeResourceRecordSets.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ChangeTagsForResourceMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalChangeTagsForResourceInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalChangeTagsForResourceInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ChangeTagsForResourceMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ChangeTagsForResource.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m CreateHealthCheckMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCreateHealthCheckInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCreateHealthCheckInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CreateHealthCheckMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CreateHealthCheck.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m CreateHostedZoneMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCreateHostedZoneInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCreateHostedZoneInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CreateHostedZoneMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CreateHostedZone.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m CreateQueryLoggingConfigMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCreateQueryLoggingConfigInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCreateQueryLoggingConfigInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CreateQueryLoggingConfigMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CreateQueryLoggingConfig.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m CreateReusableDelegationSetMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCreateReusableDelegationSetInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCreateReusableDelegationSetInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CreateReusableDelegationSetMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CreateReusableDelegationSet.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m CreateTrafficPolicyMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCreateTrafficPolicyInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCreateTrafficPolicyInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CreateTrafficPolicyMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CreateTrafficPolicy.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m CreateTrafficPolicyInstanceMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCreateTrafficPolicyInstanceInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCreateTrafficPolicyInstanceInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CreateTrafficPolicyInstanceMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CreateTrafficPolicyInstance.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m CreateTrafficPolicyVersionMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCreateTrafficPolicyVersionInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCreateTrafficPolicyVersionInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CreateTrafficPolicyVersionMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CreateTrafficPolicyVersion.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m CreateVPCAssociationAuthorizationMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCreateVPCAssociationAuthorizationInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCreateVPCAssociationAuthorizationInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CreateVPCAssociationAuthorizationMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CreateVPCAssociationAuthorization.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteHealthCheckMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteHealthCheckInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeleteHealthCheckInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteHealthCheckMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteHealthCheck.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteHostedZoneMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteHostedZoneInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeleteHostedZoneInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteHostedZoneMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteHostedZone.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteQueryLoggingConfigMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteQueryLoggingConfigInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeleteQueryLoggingConfigInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteQueryLoggingConfigMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteQueryLoggingConfig.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteReusableDelegationSetMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteReusableDelegationSetInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeleteReusableDelegationSetInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteReusableDelegationSetMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteReusableDelegationSet.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteTrafficPolicyMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteTrafficPolicyInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeleteTrafficPolicyInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteTrafficPolicyMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteTrafficPolicy.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteTrafficPolicyInstanceMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteTrafficPolicyInstanceInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeleteTrafficPolicyInstanceInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteTrafficPolicyInstanceMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteTrafficPolicyInstance.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteVPCAssociationAuthorizationMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteVPCAssociationAuthorizationInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeleteVPCAssociationAuthorizationInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteVPCAssociationAuthorizationMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteVPCAssociationAuthorization.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DisassociateVPCFromHostedZoneMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDisassociateVPCFromHostedZoneInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDisassociateVPCFromHostedZoneInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DisassociateVPCFromHostedZoneMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DisassociateVPCFromHostedZone.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetAccountLimitMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetAccountLimitInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetAccountLimitInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetAccountLimitMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetAccountLimit.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetChangeMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetChangeInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetChangeInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetChangeMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetChange.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetCheckerIpRangesMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetCheckerIpRangesInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetCheckerIpRangesInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetCheckerIpRangesMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetCheckerIpRanges.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetGeoLocationMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetGeoLocationInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetGeoLocationInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetGeoLocationMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetGeoLocation.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetHealthCheckMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetHealthCheckInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetHealthCheckInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetHealthCheckMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetHealthCheck.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetHealthCheckCountMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetHealthCheckCountInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetHealthCheckCountInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetHealthCheckCountMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetHealthCheckCount.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetHealthCheckLastFailureReasonMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetHealthCheckLastFailureReasonInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetHealthCheckLastFailureReasonInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetHealthCheckLastFailureReasonMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetHealthCheckLastFailureReason.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetHealthCheckStatusMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetHealthCheckStatusInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetHealthCheckStatusInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetHealthCheckStatusMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetHealthCheckStatus.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetHostedZoneMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetHostedZoneInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetHostedZoneInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetHostedZoneMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetHostedZone.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetHostedZoneCountMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetHostedZoneCountInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetHostedZoneCountInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetHostedZoneCountMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetHostedZoneCount.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetHostedZoneLimitMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetHostedZoneLimitInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetHostedZoneLimitInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetHostedZoneLimitMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetHostedZoneLimit.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetQueryLoggingConfigMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetQueryLoggingConfigInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetQueryLoggingConfigInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetQueryLoggingConfigMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetQueryLoggingConfig.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetReusableDelegationSetMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetReusableDelegationSetInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetReusableDelegationSetInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetReusableDelegationSetMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetReusableDelegationSet.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetReusableDelegationSetLimitMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetReusableDelegationSetLimitInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetReusableDelegationSetLimitInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetReusableDelegationSetLimitMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetReusableDelegationSetLimit.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetTrafficPolicyMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetTrafficPolicyInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetTrafficPolicyInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetTrafficPolicyMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetTrafficPolicy.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetTrafficPolicyInstanceMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetTrafficPolicyInstanceInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetTrafficPolicyInstanceInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetTrafficPolicyInstanceMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetTrafficPolicyInstance.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetTrafficPolicyInstanceCountMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetTrafficPolicyInstanceCountInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetTrafficPolicyInstanceCountInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetTrafficPolicyInstanceCountMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetTrafficPolicyInstanceCount.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListGeoLocationsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListGeoLocationsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListGeoLocationsInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListGeoLocationsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListGeoLocations.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListHealthChecksMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListHealthChecksInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListHealthChecksInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListHealthChecksMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListHealthChecks.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListHostedZonesMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListHostedZonesInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListHostedZonesInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListHostedZonesMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListHostedZones.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListHostedZonesByNameMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListHostedZonesByNameInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListHostedZonesByNameInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListHostedZonesByNameMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListHostedZonesByName.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListQueryLoggingConfigsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListQueryLoggingConfigsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListQueryLoggingConfigsInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListQueryLoggingConfigsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListQueryLoggingConfigs.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListResourceRecordSetsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListResourceRecordSetsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListResourceRecordSetsInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListResourceRecordSetsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListResourceRecordSets.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListReusableDelegationSetsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListReusableDelegationSetsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListReusableDelegationSetsInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListReusableDelegationSetsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListReusableDelegationSets.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListTagsForResourceMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListTagsForResourceInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListTagsForResourceInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListTagsForResourceMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListTagsForResource.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListTagsForResourcesMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListTagsForResourcesInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListTagsForResourcesInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListTagsForResourcesMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListTagsForResources.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListTrafficPoliciesMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListTrafficPoliciesInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListTrafficPoliciesInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListTrafficPoliciesMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListTrafficPolicies.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListTrafficPolicyInstancesMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListTrafficPolicyInstancesInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListTrafficPolicyInstancesInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListTrafficPolicyInstancesMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListTrafficPolicyInstances.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListTrafficPolicyInstancesByHostedZoneMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListTrafficPolicyInstancesByHostedZoneInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListTrafficPolicyInstancesByHostedZoneInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListTrafficPolicyInstancesByHostedZoneMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListTrafficPolicyInstancesByHostedZone.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListTrafficPolicyInstancesByPolicyMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListTrafficPolicyInstancesByPolicyInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListTrafficPolicyInstancesByPolicyInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListTrafficPolicyInstancesByPolicyMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListTrafficPolicyInstancesByPolicy.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListTrafficPolicyVersionsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListTrafficPolicyVersionsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListTrafficPolicyVersionsInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListTrafficPolicyVersionsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListTrafficPolicyVersions.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListVPCAssociationAuthorizationsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListVPCAssociationAuthorizationsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListVPCAssociationAuthorizationsInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListVPCAssociationAuthorizationsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListVPCAssociationAuthorizations.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m TestDNSAnswerMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalTestDNSAnswerInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalTestDNSAnswerInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m TestDNSAnswerMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "TestDNSAnswer.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UpdateHealthCheckMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUpdateHealthCheckInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUpdateHealthCheckInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UpdateHealthCheckMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UpdateHealthCheck.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UpdateHostedZoneCommentMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUpdateHostedZoneCommentInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUpdateHostedZoneCommentInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UpdateHostedZoneCommentMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UpdateHostedZoneComment.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UpdateTrafficPolicyCommentMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUpdateTrafficPolicyCommentInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUpdateTrafficPolicyCommentInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UpdateTrafficPolicyCommentMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UpdateTrafficPolicyComment.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UpdateTrafficPolicyInstanceMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUpdateTrafficPolicyInstanceInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUpdateTrafficPolicyInstanceInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UpdateTrafficPolicyInstanceMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UpdateTrafficPolicyInstance.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}
