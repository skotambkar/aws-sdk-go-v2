// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

// Package aws_jsonrpc service, marshal.go contains the generated operation marshalers and methods on it.

package aws_jsonrpc

import (
	"bytes"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/awserr"
	"github.com/aws/aws-sdk-go-v2/private/protocol/jsonrpc"
	"github.com/aws/aws-sdk-go-v2/service/acmpca/types"
)

var _ bytes.Buffer
var _ awserr.Error

// CreateCertificateAuthorityMarshaler defines marshaler for CreateCertificateAuthority operation
type CreateCertificateAuthorityMarshaler struct {
	Input *types.CreateCertificateAuthorityInput
}

// CreateCertificateAuthorityAuditReportMarshaler defines marshaler for CreateCertificateAuthorityAuditReport operation
type CreateCertificateAuthorityAuditReportMarshaler struct {
	Input *types.CreateCertificateAuthorityAuditReportInput
}

// CreatePermissionMarshaler defines marshaler for CreatePermission operation
type CreatePermissionMarshaler struct {
	Input *types.CreatePermissionInput
}

// DeleteCertificateAuthorityMarshaler defines marshaler for DeleteCertificateAuthority operation
type DeleteCertificateAuthorityMarshaler struct {
	Input *types.DeleteCertificateAuthorityInput
}

// DeletePermissionMarshaler defines marshaler for DeletePermission operation
type DeletePermissionMarshaler struct {
	Input *types.DeletePermissionInput
}

// DescribeCertificateAuthorityMarshaler defines marshaler for DescribeCertificateAuthority operation
type DescribeCertificateAuthorityMarshaler struct {
	Input *types.DescribeCertificateAuthorityInput
}

// DescribeCertificateAuthorityAuditReportMarshaler defines marshaler for DescribeCertificateAuthorityAuditReport operation
type DescribeCertificateAuthorityAuditReportMarshaler struct {
	Input *types.DescribeCertificateAuthorityAuditReportInput
}

// GetCertificateMarshaler defines marshaler for GetCertificate operation
type GetCertificateMarshaler struct {
	Input *types.GetCertificateInput
}

// GetCertificateAuthorityCertificateMarshaler defines marshaler for GetCertificateAuthorityCertificate operation
type GetCertificateAuthorityCertificateMarshaler struct {
	Input *types.GetCertificateAuthorityCertificateInput
}

// GetCertificateAuthorityCsrMarshaler defines marshaler for GetCertificateAuthorityCsr operation
type GetCertificateAuthorityCsrMarshaler struct {
	Input *types.GetCertificateAuthorityCsrInput
}

// ImportCertificateAuthorityCertificateMarshaler defines marshaler for ImportCertificateAuthorityCertificate operation
type ImportCertificateAuthorityCertificateMarshaler struct {
	Input *types.ImportCertificateAuthorityCertificateInput
}

// IssueCertificateMarshaler defines marshaler for IssueCertificate operation
type IssueCertificateMarshaler struct {
	Input *types.IssueCertificateInput
}

// ListCertificateAuthoritiesMarshaler defines marshaler for ListCertificateAuthorities operation
type ListCertificateAuthoritiesMarshaler struct {
	Input *types.ListCertificateAuthoritiesInput
}

// ListPermissionsMarshaler defines marshaler for ListPermissions operation
type ListPermissionsMarshaler struct {
	Input *types.ListPermissionsInput
}

// ListTagsMarshaler defines marshaler for ListTags operation
type ListTagsMarshaler struct {
	Input *types.ListTagsInput
}

// RestoreCertificateAuthorityMarshaler defines marshaler for RestoreCertificateAuthority operation
type RestoreCertificateAuthorityMarshaler struct {
	Input *types.RestoreCertificateAuthorityInput
}

// RevokeCertificateMarshaler defines marshaler for RevokeCertificate operation
type RevokeCertificateMarshaler struct {
	Input *types.RevokeCertificateInput
}

// TagCertificateAuthorityMarshaler defines marshaler for TagCertificateAuthority operation
type TagCertificateAuthorityMarshaler struct {
	Input *types.TagCertificateAuthorityInput
}

// UntagCertificateAuthorityMarshaler defines marshaler for UntagCertificateAuthority operation
type UntagCertificateAuthorityMarshaler struct {
	Input *types.UntagCertificateAuthorityInput
}

// UpdateCertificateAuthorityMarshaler defines marshaler for UpdateCertificateAuthority operation
type UpdateCertificateAuthorityMarshaler struct {
	Input *types.UpdateCertificateAuthorityInput
}

func MarshalCreateCertificateAuthorityInputShapeAWSJSON(v *types.CreateCertificateAuthorityInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	jsonrpc.Build(r)
	return nil
}

func MarshalCreateCertificateAuthorityAuditReportInputShapeAWSJSON(v *types.CreateCertificateAuthorityAuditReportInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	jsonrpc.Build(r)
	return nil
}

func MarshalCreatePermissionInputShapeAWSJSON(v *types.CreatePermissionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	jsonrpc.Build(r)
	return nil
}

func MarshalDeleteCertificateAuthorityInputShapeAWSJSON(v *types.DeleteCertificateAuthorityInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	jsonrpc.Build(r)
	return nil
}

func MarshalDeletePermissionInputShapeAWSJSON(v *types.DeletePermissionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	jsonrpc.Build(r)
	return nil
}

func MarshalDescribeCertificateAuthorityInputShapeAWSJSON(v *types.DescribeCertificateAuthorityInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	jsonrpc.Build(r)
	return nil
}

func MarshalDescribeCertificateAuthorityAuditReportInputShapeAWSJSON(v *types.DescribeCertificateAuthorityAuditReportInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	jsonrpc.Build(r)
	return nil
}

func MarshalGetCertificateInputShapeAWSJSON(v *types.GetCertificateInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	jsonrpc.Build(r)
	return nil
}

func MarshalGetCertificateAuthorityCertificateInputShapeAWSJSON(v *types.GetCertificateAuthorityCertificateInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	jsonrpc.Build(r)
	return nil
}

func MarshalGetCertificateAuthorityCsrInputShapeAWSJSON(v *types.GetCertificateAuthorityCsrInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	jsonrpc.Build(r)
	return nil
}

func MarshalImportCertificateAuthorityCertificateInputShapeAWSJSON(v *types.ImportCertificateAuthorityCertificateInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	jsonrpc.Build(r)
	return nil
}

func MarshalIssueCertificateInputShapeAWSJSON(v *types.IssueCertificateInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	jsonrpc.Build(r)
	return nil
}

func MarshalListCertificateAuthoritiesInputShapeAWSJSON(v *types.ListCertificateAuthoritiesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	jsonrpc.Build(r)
	return nil
}

func MarshalListPermissionsInputShapeAWSJSON(v *types.ListPermissionsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	jsonrpc.Build(r)
	return nil
}

func MarshalListTagsInputShapeAWSJSON(v *types.ListTagsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	jsonrpc.Build(r)
	return nil
}

func MarshalRestoreCertificateAuthorityInputShapeAWSJSON(v *types.RestoreCertificateAuthorityInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	jsonrpc.Build(r)
	return nil
}

func MarshalRevokeCertificateInputShapeAWSJSON(v *types.RevokeCertificateInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	jsonrpc.Build(r)
	return nil
}

func MarshalTagCertificateAuthorityInputShapeAWSJSON(v *types.TagCertificateAuthorityInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	jsonrpc.Build(r)
	return nil
}

func MarshalUntagCertificateAuthorityInputShapeAWSJSON(v *types.UntagCertificateAuthorityInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	jsonrpc.Build(r)
	return nil
}

func MarshalUpdateCertificateAuthorityInputShapeAWSJSON(v *types.UpdateCertificateAuthorityInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	jsonrpc.Build(r)
	return nil
}
func (m CreateCertificateAuthorityMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCreateCertificateAuthorityInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CreateCertificateAuthorityMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CreateCertificateAuthority.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m CreateCertificateAuthorityAuditReportMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCreateCertificateAuthorityAuditReportInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CreateCertificateAuthorityAuditReportMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CreateCertificateAuthorityAuditReport.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m CreatePermissionMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCreatePermissionInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CreatePermissionMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CreatePermission.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteCertificateAuthorityMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteCertificateAuthorityInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteCertificateAuthorityMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteCertificateAuthority.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeletePermissionMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeletePermissionInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeletePermissionMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeletePermission.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DescribeCertificateAuthorityMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDescribeCertificateAuthorityInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DescribeCertificateAuthorityMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DescribeCertificateAuthority.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DescribeCertificateAuthorityAuditReportMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDescribeCertificateAuthorityAuditReportInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DescribeCertificateAuthorityAuditReportMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DescribeCertificateAuthorityAuditReport.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetCertificateMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetCertificateInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetCertificateMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetCertificate.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetCertificateAuthorityCertificateMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetCertificateAuthorityCertificateInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetCertificateAuthorityCertificateMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetCertificateAuthorityCertificate.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetCertificateAuthorityCsrMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetCertificateAuthorityCsrInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetCertificateAuthorityCsrMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetCertificateAuthorityCsr.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ImportCertificateAuthorityCertificateMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalImportCertificateAuthorityCertificateInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ImportCertificateAuthorityCertificateMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ImportCertificateAuthorityCertificate.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m IssueCertificateMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalIssueCertificateInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m IssueCertificateMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "IssueCertificate.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListCertificateAuthoritiesMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListCertificateAuthoritiesInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListCertificateAuthoritiesMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListCertificateAuthorities.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListPermissionsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListPermissionsInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListPermissionsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListPermissions.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListTagsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListTagsInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListTagsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListTags.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m RestoreCertificateAuthorityMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalRestoreCertificateAuthorityInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m RestoreCertificateAuthorityMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "RestoreCertificateAuthority.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m RevokeCertificateMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalRevokeCertificateInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m RevokeCertificateMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "RevokeCertificate.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m TagCertificateAuthorityMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalTagCertificateAuthorityInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m TagCertificateAuthorityMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "TagCertificateAuthority.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UntagCertificateAuthorityMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUntagCertificateAuthorityInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UntagCertificateAuthorityMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UntagCertificateAuthority.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UpdateCertificateAuthorityMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUpdateCertificateAuthorityInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UpdateCertificateAuthorityMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UpdateCertificateAuthority.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}
