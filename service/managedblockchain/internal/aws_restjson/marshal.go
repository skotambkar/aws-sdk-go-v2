// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

// Package aws_restjson service, marshal.go contains the generated operation marshalers and methods on it.

package aws_restjson

import (
	"bytes"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/awserr"
	"github.com/aws/aws-sdk-go-v2/private/protocol/jsonrpc"
	"github.com/aws/aws-sdk-go-v2/private/protocol/rest"
	"github.com/aws/aws-sdk-go-v2/service/managedblockchain/types"
)

var _ bytes.Buffer
var _ awserr.Error

// CreateMemberMarshaler defines marshaler for CreateMember operation
type CreateMemberMarshaler struct {
	Input *types.CreateMemberInput
}

// CreateNetworkMarshaler defines marshaler for CreateNetwork operation
type CreateNetworkMarshaler struct {
	Input *types.CreateNetworkInput
}

// CreateNodeMarshaler defines marshaler for CreateNode operation
type CreateNodeMarshaler struct {
	Input *types.CreateNodeInput
}

// CreateProposalMarshaler defines marshaler for CreateProposal operation
type CreateProposalMarshaler struct {
	Input *types.CreateProposalInput
}

// DeleteMemberMarshaler defines marshaler for DeleteMember operation
type DeleteMemberMarshaler struct {
	Input *types.DeleteMemberInput
}

// DeleteNodeMarshaler defines marshaler for DeleteNode operation
type DeleteNodeMarshaler struct {
	Input *types.DeleteNodeInput
}

// GetMemberMarshaler defines marshaler for GetMember operation
type GetMemberMarshaler struct {
	Input *types.GetMemberInput
}

// GetNetworkMarshaler defines marshaler for GetNetwork operation
type GetNetworkMarshaler struct {
	Input *types.GetNetworkInput
}

// GetNodeMarshaler defines marshaler for GetNode operation
type GetNodeMarshaler struct {
	Input *types.GetNodeInput
}

// GetProposalMarshaler defines marshaler for GetProposal operation
type GetProposalMarshaler struct {
	Input *types.GetProposalInput
}

// ListInvitationsMarshaler defines marshaler for ListInvitations operation
type ListInvitationsMarshaler struct {
	Input *types.ListInvitationsInput
}

// ListMembersMarshaler defines marshaler for ListMembers operation
type ListMembersMarshaler struct {
	Input *types.ListMembersInput
}

// ListNetworksMarshaler defines marshaler for ListNetworks operation
type ListNetworksMarshaler struct {
	Input *types.ListNetworksInput
}

// ListNodesMarshaler defines marshaler for ListNodes operation
type ListNodesMarshaler struct {
	Input *types.ListNodesInput
}

// ListProposalVotesMarshaler defines marshaler for ListProposalVotes operation
type ListProposalVotesMarshaler struct {
	Input *types.ListProposalVotesInput
}

// ListProposalsMarshaler defines marshaler for ListProposals operation
type ListProposalsMarshaler struct {
	Input *types.ListProposalsInput
}

// RejectInvitationMarshaler defines marshaler for RejectInvitation operation
type RejectInvitationMarshaler struct {
	Input *types.RejectInvitationInput
}

// VoteOnProposalMarshaler defines marshaler for VoteOnProposal operation
type VoteOnProposalMarshaler struct {
	Input *types.VoteOnProposalInput
}

func MarshalCreateMemberInputShapeAWSREST(v *types.CreateMemberInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCreateMemberInputShapeAWSJSON(v *types.CreateMemberInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalCreateNetworkInputShapeAWSREST(v *types.CreateNetworkInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCreateNetworkInputShapeAWSJSON(v *types.CreateNetworkInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalCreateNodeInputShapeAWSREST(v *types.CreateNodeInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCreateNodeInputShapeAWSJSON(v *types.CreateNodeInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalCreateProposalInputShapeAWSREST(v *types.CreateProposalInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCreateProposalInputShapeAWSJSON(v *types.CreateProposalInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDeleteMemberInputShapeAWSREST(v *types.DeleteMemberInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeleteMemberInputShapeAWSJSON(v *types.DeleteMemberInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDeleteNodeInputShapeAWSREST(v *types.DeleteNodeInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeleteNodeInputShapeAWSJSON(v *types.DeleteNodeInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalGetMemberInputShapeAWSREST(v *types.GetMemberInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetMemberInputShapeAWSJSON(v *types.GetMemberInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalGetNetworkInputShapeAWSREST(v *types.GetNetworkInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetNetworkInputShapeAWSJSON(v *types.GetNetworkInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalGetNodeInputShapeAWSREST(v *types.GetNodeInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetNodeInputShapeAWSJSON(v *types.GetNodeInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalGetProposalInputShapeAWSREST(v *types.GetProposalInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetProposalInputShapeAWSJSON(v *types.GetProposalInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListInvitationsInputShapeAWSREST(v *types.ListInvitationsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListInvitationsInputShapeAWSJSON(v *types.ListInvitationsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListMembersInputShapeAWSREST(v *types.ListMembersInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListMembersInputShapeAWSJSON(v *types.ListMembersInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListNetworksInputShapeAWSREST(v *types.ListNetworksInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListNetworksInputShapeAWSJSON(v *types.ListNetworksInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListNodesInputShapeAWSREST(v *types.ListNodesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListNodesInputShapeAWSJSON(v *types.ListNodesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListProposalVotesInputShapeAWSREST(v *types.ListProposalVotesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListProposalVotesInputShapeAWSJSON(v *types.ListProposalVotesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListProposalsInputShapeAWSREST(v *types.ListProposalsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListProposalsInputShapeAWSJSON(v *types.ListProposalsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalRejectInvitationInputShapeAWSREST(v *types.RejectInvitationInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalRejectInvitationInputShapeAWSJSON(v *types.RejectInvitationInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalVoteOnProposalInputShapeAWSREST(v *types.VoteOnProposalInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalVoteOnProposalInputShapeAWSJSON(v *types.VoteOnProposalInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}
func (m CreateMemberMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCreateMemberInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCreateMemberInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CreateMemberMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CreateMember.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m CreateNetworkMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCreateNetworkInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCreateNetworkInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CreateNetworkMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CreateNetwork.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m CreateNodeMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCreateNodeInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCreateNodeInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CreateNodeMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CreateNode.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m CreateProposalMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCreateProposalInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCreateProposalInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CreateProposalMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CreateProposal.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteMemberMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteMemberInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeleteMemberInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteMemberMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteMember.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteNodeMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteNodeInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeleteNodeInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteNodeMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteNode.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetMemberMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetMemberInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetMemberInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetMemberMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetMember.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetNetworkMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetNetworkInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetNetworkInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetNetworkMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetNetwork.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetNodeMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetNodeInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetNodeInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetNodeMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetNode.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetProposalMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetProposalInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetProposalInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetProposalMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetProposal.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListInvitationsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListInvitationsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListInvitationsInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListInvitationsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListInvitations.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListMembersMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListMembersInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListMembersInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListMembersMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListMembers.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListNetworksMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListNetworksInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListNetworksInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListNetworksMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListNetworks.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListNodesMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListNodesInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListNodesInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListNodesMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListNodes.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListProposalVotesMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListProposalVotesInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListProposalVotesInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListProposalVotesMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListProposalVotes.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListProposalsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListProposalsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListProposalsInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListProposalsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListProposals.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m RejectInvitationMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalRejectInvitationInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalRejectInvitationInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m RejectInvitationMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "RejectInvitation.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m VoteOnProposalMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalVoteOnProposalInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalVoteOnProposalInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m VoteOnProposalMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "VoteOnProposal.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}
