// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

// Package aws_restjson service, marshal.go contains the generated operation marshalers and methods on it.

package aws_restjson

import (
	"bytes"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/awserr"
	"github.com/aws/aws-sdk-go-v2/private/protocol/jsonrpc"
	"github.com/aws/aws-sdk-go-v2/private/protocol/rest"
	"github.com/aws/aws-sdk-go-v2/service/elastictranscoder/types"
)

var _ bytes.Buffer
var _ awserr.Error

// CancelJobMarshaler defines marshaler for CancelJob operation
type CancelJobMarshaler struct {
	Input *types.CancelJobInput
}

// CreateJobMarshaler defines marshaler for CreateJob operation
type CreateJobMarshaler struct {
	Input *types.CreateJobInput
}

// CreatePipelineMarshaler defines marshaler for CreatePipeline operation
type CreatePipelineMarshaler struct {
	Input *types.CreatePipelineInput
}

// CreatePresetMarshaler defines marshaler for CreatePreset operation
type CreatePresetMarshaler struct {
	Input *types.CreatePresetInput
}

// DeletePipelineMarshaler defines marshaler for DeletePipeline operation
type DeletePipelineMarshaler struct {
	Input *types.DeletePipelineInput
}

// DeletePresetMarshaler defines marshaler for DeletePreset operation
type DeletePresetMarshaler struct {
	Input *types.DeletePresetInput
}

// ListJobsByPipelineMarshaler defines marshaler for ListJobsByPipeline operation
type ListJobsByPipelineMarshaler struct {
	Input *types.ListJobsByPipelineInput
}

// ListJobsByStatusMarshaler defines marshaler for ListJobsByStatus operation
type ListJobsByStatusMarshaler struct {
	Input *types.ListJobsByStatusInput
}

// ListPipelinesMarshaler defines marshaler for ListPipelines operation
type ListPipelinesMarshaler struct {
	Input *types.ListPipelinesInput
}

// ListPresetsMarshaler defines marshaler for ListPresets operation
type ListPresetsMarshaler struct {
	Input *types.ListPresetsInput
}

// ReadJobMarshaler defines marshaler for ReadJob operation
type ReadJobMarshaler struct {
	Input *types.ReadJobInput
}

// ReadPipelineMarshaler defines marshaler for ReadPipeline operation
type ReadPipelineMarshaler struct {
	Input *types.ReadPipelineInput
}

// ReadPresetMarshaler defines marshaler for ReadPreset operation
type ReadPresetMarshaler struct {
	Input *types.ReadPresetInput
}

// TestRoleMarshaler defines marshaler for TestRole operation
type TestRoleMarshaler struct {
	Input *types.TestRoleInput
}

// UpdatePipelineMarshaler defines marshaler for UpdatePipeline operation
type UpdatePipelineMarshaler struct {
	Input *types.UpdatePipelineInput
}

// UpdatePipelineNotificationsMarshaler defines marshaler for UpdatePipelineNotifications operation
type UpdatePipelineNotificationsMarshaler struct {
	Input *types.UpdatePipelineNotificationsInput
}

// UpdatePipelineStatusMarshaler defines marshaler for UpdatePipelineStatus operation
type UpdatePipelineStatusMarshaler struct {
	Input *types.UpdatePipelineStatusInput
}

func MarshalCancelJobInputShapeAWSREST(v *types.CancelJobInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCancelJobInputShapeAWSJSON(v *types.CancelJobInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalCreateJobInputShapeAWSREST(v *types.CreateJobInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCreateJobInputShapeAWSJSON(v *types.CreateJobInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalCreatePipelineInputShapeAWSREST(v *types.CreatePipelineInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCreatePipelineInputShapeAWSJSON(v *types.CreatePipelineInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalCreatePresetInputShapeAWSREST(v *types.CreatePresetInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCreatePresetInputShapeAWSJSON(v *types.CreatePresetInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDeletePipelineInputShapeAWSREST(v *types.DeletePipelineInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeletePipelineInputShapeAWSJSON(v *types.DeletePipelineInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDeletePresetInputShapeAWSREST(v *types.DeletePresetInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeletePresetInputShapeAWSJSON(v *types.DeletePresetInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListJobsByPipelineInputShapeAWSREST(v *types.ListJobsByPipelineInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListJobsByPipelineInputShapeAWSJSON(v *types.ListJobsByPipelineInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListJobsByStatusInputShapeAWSREST(v *types.ListJobsByStatusInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListJobsByStatusInputShapeAWSJSON(v *types.ListJobsByStatusInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListPipelinesInputShapeAWSREST(v *types.ListPipelinesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListPipelinesInputShapeAWSJSON(v *types.ListPipelinesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListPresetsInputShapeAWSREST(v *types.ListPresetsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListPresetsInputShapeAWSJSON(v *types.ListPresetsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalReadJobInputShapeAWSREST(v *types.ReadJobInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalReadJobInputShapeAWSJSON(v *types.ReadJobInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalReadPipelineInputShapeAWSREST(v *types.ReadPipelineInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalReadPipelineInputShapeAWSJSON(v *types.ReadPipelineInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalReadPresetInputShapeAWSREST(v *types.ReadPresetInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalReadPresetInputShapeAWSJSON(v *types.ReadPresetInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalTestRoleInputShapeAWSREST(v *types.TestRoleInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalTestRoleInputShapeAWSJSON(v *types.TestRoleInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalUpdatePipelineInputShapeAWSREST(v *types.UpdatePipelineInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUpdatePipelineInputShapeAWSJSON(v *types.UpdatePipelineInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalUpdatePipelineNotificationsInputShapeAWSREST(v *types.UpdatePipelineNotificationsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUpdatePipelineNotificationsInputShapeAWSJSON(v *types.UpdatePipelineNotificationsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalUpdatePipelineStatusInputShapeAWSREST(v *types.UpdatePipelineStatusInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUpdatePipelineStatusInputShapeAWSJSON(v *types.UpdatePipelineStatusInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}
func (m CancelJobMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCancelJobInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCancelJobInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CancelJobMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CancelJob.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m CreateJobMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCreateJobInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCreateJobInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CreateJobMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CreateJob.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m CreatePipelineMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCreatePipelineInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCreatePipelineInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CreatePipelineMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CreatePipeline.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m CreatePresetMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCreatePresetInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCreatePresetInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CreatePresetMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CreatePreset.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeletePipelineMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeletePipelineInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeletePipelineInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeletePipelineMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeletePipeline.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeletePresetMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeletePresetInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeletePresetInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeletePresetMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeletePreset.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListJobsByPipelineMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListJobsByPipelineInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListJobsByPipelineInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListJobsByPipelineMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListJobsByPipeline.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListJobsByStatusMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListJobsByStatusInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListJobsByStatusInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListJobsByStatusMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListJobsByStatus.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListPipelinesMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListPipelinesInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListPipelinesInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListPipelinesMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListPipelines.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListPresetsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListPresetsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListPresetsInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListPresetsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListPresets.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ReadJobMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalReadJobInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalReadJobInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ReadJobMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ReadJob.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ReadPipelineMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalReadPipelineInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalReadPipelineInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ReadPipelineMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ReadPipeline.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ReadPresetMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalReadPresetInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalReadPresetInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ReadPresetMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ReadPreset.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m TestRoleMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalTestRoleInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalTestRoleInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m TestRoleMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "TestRole.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UpdatePipelineMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUpdatePipelineInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUpdatePipelineInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UpdatePipelineMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UpdatePipeline.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UpdatePipelineNotificationsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUpdatePipelineNotificationsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUpdatePipelineNotificationsInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UpdatePipelineNotificationsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UpdatePipelineNotifications.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UpdatePipelineStatusMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUpdatePipelineStatusInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUpdatePipelineStatusInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UpdatePipelineStatusMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UpdatePipelineStatus.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}
