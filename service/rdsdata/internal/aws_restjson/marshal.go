// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

// Package aws_restjson service, marshal.go contains the generated operation marshalers and methods on it.

package aws_restjson

import (
	"bytes"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/awserr"
	"github.com/aws/aws-sdk-go-v2/private/protocol/jsonrpc"
	"github.com/aws/aws-sdk-go-v2/private/protocol/rest"
	"github.com/aws/aws-sdk-go-v2/service/rdsdata/types"
)

var _ bytes.Buffer
var _ awserr.Error

// BatchExecuteStatementMarshaler defines marshaler for BatchExecuteStatement operation
type BatchExecuteStatementMarshaler struct {
	Input *types.BatchExecuteStatementInput
}

// BeginTransactionMarshaler defines marshaler for BeginTransaction operation
type BeginTransactionMarshaler struct {
	Input *types.BeginTransactionInput
}

// CommitTransactionMarshaler defines marshaler for CommitTransaction operation
type CommitTransactionMarshaler struct {
	Input *types.CommitTransactionInput
}

// ExecuteSqlMarshaler defines marshaler for ExecuteSql operation
type ExecuteSqlMarshaler struct {
	Input *types.ExecuteSqlInput
}

// ExecuteStatementMarshaler defines marshaler for ExecuteStatement operation
type ExecuteStatementMarshaler struct {
	Input *types.ExecuteStatementInput
}

// RollbackTransactionMarshaler defines marshaler for RollbackTransaction operation
type RollbackTransactionMarshaler struct {
	Input *types.RollbackTransactionInput
}

func MarshalBatchExecuteStatementInputShapeAWSREST(v *types.BatchExecuteStatementInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalBatchExecuteStatementInputShapeAWSJSON(v *types.BatchExecuteStatementInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalBeginTransactionInputShapeAWSREST(v *types.BeginTransactionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalBeginTransactionInputShapeAWSJSON(v *types.BeginTransactionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalCommitTransactionInputShapeAWSREST(v *types.CommitTransactionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCommitTransactionInputShapeAWSJSON(v *types.CommitTransactionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalExecuteSqlInputShapeAWSREST(v *types.ExecuteSqlInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalExecuteSqlInputShapeAWSJSON(v *types.ExecuteSqlInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalExecuteStatementInputShapeAWSREST(v *types.ExecuteStatementInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalExecuteStatementInputShapeAWSJSON(v *types.ExecuteStatementInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalRollbackTransactionInputShapeAWSREST(v *types.RollbackTransactionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalRollbackTransactionInputShapeAWSJSON(v *types.RollbackTransactionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}
func (m BatchExecuteStatementMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalBatchExecuteStatementInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalBatchExecuteStatementInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m BatchExecuteStatementMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "BatchExecuteStatement.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m BeginTransactionMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalBeginTransactionInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalBeginTransactionInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m BeginTransactionMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "BeginTransaction.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m CommitTransactionMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCommitTransactionInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCommitTransactionInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CommitTransactionMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CommitTransaction.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ExecuteSqlMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalExecuteSqlInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalExecuteSqlInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ExecuteSqlMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ExecuteSql.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ExecuteStatementMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalExecuteStatementInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalExecuteStatementInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ExecuteStatementMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ExecuteStatement.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m RollbackTransactionMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalRollbackTransactionInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalRollbackTransactionInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m RollbackTransactionMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "RollbackTransaction.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}
