// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

// Package aws_restjson service, marshal.go contains the generated operation marshalers and methods on it.

package aws_restjson

import (
	"bytes"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/awserr"
	"github.com/aws/aws-sdk-go-v2/private/protocol/jsonrpc"
	"github.com/aws/aws-sdk-go-v2/private/protocol/rest"
	"github.com/aws/aws-sdk-go-v2/service/quicksight/types"
)

var _ bytes.Buffer
var _ awserr.Error

// CancelIngestionMarshaler defines marshaler for CancelIngestion operation
type CancelIngestionMarshaler struct {
	Input *types.CancelIngestionInput
}

// CreateDashboardMarshaler defines marshaler for CreateDashboard operation
type CreateDashboardMarshaler struct {
	Input *types.CreateDashboardInput
}

// CreateDataSetMarshaler defines marshaler for CreateDataSet operation
type CreateDataSetMarshaler struct {
	Input *types.CreateDataSetInput
}

// CreateDataSourceMarshaler defines marshaler for CreateDataSource operation
type CreateDataSourceMarshaler struct {
	Input *types.CreateDataSourceInput
}

// CreateGroupMarshaler defines marshaler for CreateGroup operation
type CreateGroupMarshaler struct {
	Input *types.CreateGroupInput
}

// CreateGroupMembershipMarshaler defines marshaler for CreateGroupMembership operation
type CreateGroupMembershipMarshaler struct {
	Input *types.CreateGroupMembershipInput
}

// CreateIAMPolicyAssignmentMarshaler defines marshaler for CreateIAMPolicyAssignment operation
type CreateIAMPolicyAssignmentMarshaler struct {
	Input *types.CreateIAMPolicyAssignmentInput
}

// CreateIngestionMarshaler defines marshaler for CreateIngestion operation
type CreateIngestionMarshaler struct {
	Input *types.CreateIngestionInput
}

// CreateTemplateMarshaler defines marshaler for CreateTemplate operation
type CreateTemplateMarshaler struct {
	Input *types.CreateTemplateInput
}

// CreateTemplateAliasMarshaler defines marshaler for CreateTemplateAlias operation
type CreateTemplateAliasMarshaler struct {
	Input *types.CreateTemplateAliasInput
}

// DeleteDashboardMarshaler defines marshaler for DeleteDashboard operation
type DeleteDashboardMarshaler struct {
	Input *types.DeleteDashboardInput
}

// DeleteDataSetMarshaler defines marshaler for DeleteDataSet operation
type DeleteDataSetMarshaler struct {
	Input *types.DeleteDataSetInput
}

// DeleteDataSourceMarshaler defines marshaler for DeleteDataSource operation
type DeleteDataSourceMarshaler struct {
	Input *types.DeleteDataSourceInput
}

// DeleteGroupMarshaler defines marshaler for DeleteGroup operation
type DeleteGroupMarshaler struct {
	Input *types.DeleteGroupInput
}

// DeleteGroupMembershipMarshaler defines marshaler for DeleteGroupMembership operation
type DeleteGroupMembershipMarshaler struct {
	Input *types.DeleteGroupMembershipInput
}

// DeleteIAMPolicyAssignmentMarshaler defines marshaler for DeleteIAMPolicyAssignment operation
type DeleteIAMPolicyAssignmentMarshaler struct {
	Input *types.DeleteIAMPolicyAssignmentInput
}

// DeleteTemplateMarshaler defines marshaler for DeleteTemplate operation
type DeleteTemplateMarshaler struct {
	Input *types.DeleteTemplateInput
}

// DeleteTemplateAliasMarshaler defines marshaler for DeleteTemplateAlias operation
type DeleteTemplateAliasMarshaler struct {
	Input *types.DeleteTemplateAliasInput
}

// DeleteUserMarshaler defines marshaler for DeleteUser operation
type DeleteUserMarshaler struct {
	Input *types.DeleteUserInput
}

// DeleteUserByPrincipalIdMarshaler defines marshaler for DeleteUserByPrincipalId operation
type DeleteUserByPrincipalIdMarshaler struct {
	Input *types.DeleteUserByPrincipalIdInput
}

// DescribeDashboardMarshaler defines marshaler for DescribeDashboard operation
type DescribeDashboardMarshaler struct {
	Input *types.DescribeDashboardInput
}

// DescribeDashboardPermissionsMarshaler defines marshaler for DescribeDashboardPermissions operation
type DescribeDashboardPermissionsMarshaler struct {
	Input *types.DescribeDashboardPermissionsInput
}

// DescribeDataSetMarshaler defines marshaler for DescribeDataSet operation
type DescribeDataSetMarshaler struct {
	Input *types.DescribeDataSetInput
}

// DescribeDataSetPermissionsMarshaler defines marshaler for DescribeDataSetPermissions operation
type DescribeDataSetPermissionsMarshaler struct {
	Input *types.DescribeDataSetPermissionsInput
}

// DescribeDataSourceMarshaler defines marshaler for DescribeDataSource operation
type DescribeDataSourceMarshaler struct {
	Input *types.DescribeDataSourceInput
}

// DescribeDataSourcePermissionsMarshaler defines marshaler for DescribeDataSourcePermissions operation
type DescribeDataSourcePermissionsMarshaler struct {
	Input *types.DescribeDataSourcePermissionsInput
}

// DescribeGroupMarshaler defines marshaler for DescribeGroup operation
type DescribeGroupMarshaler struct {
	Input *types.DescribeGroupInput
}

// DescribeIAMPolicyAssignmentMarshaler defines marshaler for DescribeIAMPolicyAssignment operation
type DescribeIAMPolicyAssignmentMarshaler struct {
	Input *types.DescribeIAMPolicyAssignmentInput
}

// DescribeIngestionMarshaler defines marshaler for DescribeIngestion operation
type DescribeIngestionMarshaler struct {
	Input *types.DescribeIngestionInput
}

// DescribeTemplateMarshaler defines marshaler for DescribeTemplate operation
type DescribeTemplateMarshaler struct {
	Input *types.DescribeTemplateInput
}

// DescribeTemplateAliasMarshaler defines marshaler for DescribeTemplateAlias operation
type DescribeTemplateAliasMarshaler struct {
	Input *types.DescribeTemplateAliasInput
}

// DescribeTemplatePermissionsMarshaler defines marshaler for DescribeTemplatePermissions operation
type DescribeTemplatePermissionsMarshaler struct {
	Input *types.DescribeTemplatePermissionsInput
}

// DescribeUserMarshaler defines marshaler for DescribeUser operation
type DescribeUserMarshaler struct {
	Input *types.DescribeUserInput
}

// GetDashboardEmbedUrlMarshaler defines marshaler for GetDashboardEmbedUrl operation
type GetDashboardEmbedUrlMarshaler struct {
	Input *types.GetDashboardEmbedUrlInput
}

// ListDashboardVersionsMarshaler defines marshaler for ListDashboardVersions operation
type ListDashboardVersionsMarshaler struct {
	Input *types.ListDashboardVersionsInput
}

// ListDashboardsMarshaler defines marshaler for ListDashboards operation
type ListDashboardsMarshaler struct {
	Input *types.ListDashboardsInput
}

// ListDataSetsMarshaler defines marshaler for ListDataSets operation
type ListDataSetsMarshaler struct {
	Input *types.ListDataSetsInput
}

// ListDataSourcesMarshaler defines marshaler for ListDataSources operation
type ListDataSourcesMarshaler struct {
	Input *types.ListDataSourcesInput
}

// ListGroupMembershipsMarshaler defines marshaler for ListGroupMemberships operation
type ListGroupMembershipsMarshaler struct {
	Input *types.ListGroupMembershipsInput
}

// ListGroupsMarshaler defines marshaler for ListGroups operation
type ListGroupsMarshaler struct {
	Input *types.ListGroupsInput
}

// ListIAMPolicyAssignmentsMarshaler defines marshaler for ListIAMPolicyAssignments operation
type ListIAMPolicyAssignmentsMarshaler struct {
	Input *types.ListIAMPolicyAssignmentsInput
}

// ListIAMPolicyAssignmentsForUserMarshaler defines marshaler for ListIAMPolicyAssignmentsForUser operation
type ListIAMPolicyAssignmentsForUserMarshaler struct {
	Input *types.ListIAMPolicyAssignmentsForUserInput
}

// ListIngestionsMarshaler defines marshaler for ListIngestions operation
type ListIngestionsMarshaler struct {
	Input *types.ListIngestionsInput
}

// ListTagsForResourceMarshaler defines marshaler for ListTagsForResource operation
type ListTagsForResourceMarshaler struct {
	Input *types.ListTagsForResourceInput
}

// ListTemplateAliasesMarshaler defines marshaler for ListTemplateAliases operation
type ListTemplateAliasesMarshaler struct {
	Input *types.ListTemplateAliasesInput
}

// ListTemplateVersionsMarshaler defines marshaler for ListTemplateVersions operation
type ListTemplateVersionsMarshaler struct {
	Input *types.ListTemplateVersionsInput
}

// ListTemplatesMarshaler defines marshaler for ListTemplates operation
type ListTemplatesMarshaler struct {
	Input *types.ListTemplatesInput
}

// ListUserGroupsMarshaler defines marshaler for ListUserGroups operation
type ListUserGroupsMarshaler struct {
	Input *types.ListUserGroupsInput
}

// ListUsersMarshaler defines marshaler for ListUsers operation
type ListUsersMarshaler struct {
	Input *types.ListUsersInput
}

// RegisterUserMarshaler defines marshaler for RegisterUser operation
type RegisterUserMarshaler struct {
	Input *types.RegisterUserInput
}

// TagResourceMarshaler defines marshaler for TagResource operation
type TagResourceMarshaler struct {
	Input *types.TagResourceInput
}

// UntagResourceMarshaler defines marshaler for UntagResource operation
type UntagResourceMarshaler struct {
	Input *types.UntagResourceInput
}

// UpdateDashboardMarshaler defines marshaler for UpdateDashboard operation
type UpdateDashboardMarshaler struct {
	Input *types.UpdateDashboardInput
}

// UpdateDashboardPermissionsMarshaler defines marshaler for UpdateDashboardPermissions operation
type UpdateDashboardPermissionsMarshaler struct {
	Input *types.UpdateDashboardPermissionsInput
}

// UpdateDashboardPublishedVersionMarshaler defines marshaler for UpdateDashboardPublishedVersion operation
type UpdateDashboardPublishedVersionMarshaler struct {
	Input *types.UpdateDashboardPublishedVersionInput
}

// UpdateDataSetMarshaler defines marshaler for UpdateDataSet operation
type UpdateDataSetMarshaler struct {
	Input *types.UpdateDataSetInput
}

// UpdateDataSetPermissionsMarshaler defines marshaler for UpdateDataSetPermissions operation
type UpdateDataSetPermissionsMarshaler struct {
	Input *types.UpdateDataSetPermissionsInput
}

// UpdateDataSourceMarshaler defines marshaler for UpdateDataSource operation
type UpdateDataSourceMarshaler struct {
	Input *types.UpdateDataSourceInput
}

// UpdateDataSourcePermissionsMarshaler defines marshaler for UpdateDataSourcePermissions operation
type UpdateDataSourcePermissionsMarshaler struct {
	Input *types.UpdateDataSourcePermissionsInput
}

// UpdateGroupMarshaler defines marshaler for UpdateGroup operation
type UpdateGroupMarshaler struct {
	Input *types.UpdateGroupInput
}

// UpdateIAMPolicyAssignmentMarshaler defines marshaler for UpdateIAMPolicyAssignment operation
type UpdateIAMPolicyAssignmentMarshaler struct {
	Input *types.UpdateIAMPolicyAssignmentInput
}

// UpdateTemplateMarshaler defines marshaler for UpdateTemplate operation
type UpdateTemplateMarshaler struct {
	Input *types.UpdateTemplateInput
}

// UpdateTemplateAliasMarshaler defines marshaler for UpdateTemplateAlias operation
type UpdateTemplateAliasMarshaler struct {
	Input *types.UpdateTemplateAliasInput
}

// UpdateTemplatePermissionsMarshaler defines marshaler for UpdateTemplatePermissions operation
type UpdateTemplatePermissionsMarshaler struct {
	Input *types.UpdateTemplatePermissionsInput
}

// UpdateUserMarshaler defines marshaler for UpdateUser operation
type UpdateUserMarshaler struct {
	Input *types.UpdateUserInput
}

func MarshalCancelIngestionInputShapeAWSREST(v *types.CancelIngestionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCancelIngestionInputShapeAWSJSON(v *types.CancelIngestionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalCreateDashboardInputShapeAWSREST(v *types.CreateDashboardInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCreateDashboardInputShapeAWSJSON(v *types.CreateDashboardInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalCreateDataSetInputShapeAWSREST(v *types.CreateDataSetInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCreateDataSetInputShapeAWSJSON(v *types.CreateDataSetInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalCreateDataSourceInputShapeAWSREST(v *types.CreateDataSourceInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCreateDataSourceInputShapeAWSJSON(v *types.CreateDataSourceInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalCreateGroupInputShapeAWSREST(v *types.CreateGroupInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCreateGroupInputShapeAWSJSON(v *types.CreateGroupInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalCreateGroupMembershipInputShapeAWSREST(v *types.CreateGroupMembershipInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCreateGroupMembershipInputShapeAWSJSON(v *types.CreateGroupMembershipInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalCreateIAMPolicyAssignmentInputShapeAWSREST(v *types.CreateIAMPolicyAssignmentInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCreateIAMPolicyAssignmentInputShapeAWSJSON(v *types.CreateIAMPolicyAssignmentInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalCreateIngestionInputShapeAWSREST(v *types.CreateIngestionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCreateIngestionInputShapeAWSJSON(v *types.CreateIngestionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalCreateTemplateInputShapeAWSREST(v *types.CreateTemplateInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCreateTemplateInputShapeAWSJSON(v *types.CreateTemplateInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalCreateTemplateAliasInputShapeAWSREST(v *types.CreateTemplateAliasInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCreateTemplateAliasInputShapeAWSJSON(v *types.CreateTemplateAliasInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDeleteDashboardInputShapeAWSREST(v *types.DeleteDashboardInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeleteDashboardInputShapeAWSJSON(v *types.DeleteDashboardInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDeleteDataSetInputShapeAWSREST(v *types.DeleteDataSetInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeleteDataSetInputShapeAWSJSON(v *types.DeleteDataSetInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDeleteDataSourceInputShapeAWSREST(v *types.DeleteDataSourceInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeleteDataSourceInputShapeAWSJSON(v *types.DeleteDataSourceInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDeleteGroupInputShapeAWSREST(v *types.DeleteGroupInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeleteGroupInputShapeAWSJSON(v *types.DeleteGroupInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDeleteGroupMembershipInputShapeAWSREST(v *types.DeleteGroupMembershipInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeleteGroupMembershipInputShapeAWSJSON(v *types.DeleteGroupMembershipInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDeleteIAMPolicyAssignmentInputShapeAWSREST(v *types.DeleteIAMPolicyAssignmentInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeleteIAMPolicyAssignmentInputShapeAWSJSON(v *types.DeleteIAMPolicyAssignmentInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDeleteTemplateInputShapeAWSREST(v *types.DeleteTemplateInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeleteTemplateInputShapeAWSJSON(v *types.DeleteTemplateInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDeleteTemplateAliasInputShapeAWSREST(v *types.DeleteTemplateAliasInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeleteTemplateAliasInputShapeAWSJSON(v *types.DeleteTemplateAliasInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDeleteUserInputShapeAWSREST(v *types.DeleteUserInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeleteUserInputShapeAWSJSON(v *types.DeleteUserInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDeleteUserByPrincipalIdInputShapeAWSREST(v *types.DeleteUserByPrincipalIdInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeleteUserByPrincipalIdInputShapeAWSJSON(v *types.DeleteUserByPrincipalIdInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDescribeDashboardInputShapeAWSREST(v *types.DescribeDashboardInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDescribeDashboardInputShapeAWSJSON(v *types.DescribeDashboardInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDescribeDashboardPermissionsInputShapeAWSREST(v *types.DescribeDashboardPermissionsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDescribeDashboardPermissionsInputShapeAWSJSON(v *types.DescribeDashboardPermissionsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDescribeDataSetInputShapeAWSREST(v *types.DescribeDataSetInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDescribeDataSetInputShapeAWSJSON(v *types.DescribeDataSetInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDescribeDataSetPermissionsInputShapeAWSREST(v *types.DescribeDataSetPermissionsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDescribeDataSetPermissionsInputShapeAWSJSON(v *types.DescribeDataSetPermissionsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDescribeDataSourceInputShapeAWSREST(v *types.DescribeDataSourceInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDescribeDataSourceInputShapeAWSJSON(v *types.DescribeDataSourceInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDescribeDataSourcePermissionsInputShapeAWSREST(v *types.DescribeDataSourcePermissionsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDescribeDataSourcePermissionsInputShapeAWSJSON(v *types.DescribeDataSourcePermissionsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDescribeGroupInputShapeAWSREST(v *types.DescribeGroupInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDescribeGroupInputShapeAWSJSON(v *types.DescribeGroupInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDescribeIAMPolicyAssignmentInputShapeAWSREST(v *types.DescribeIAMPolicyAssignmentInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDescribeIAMPolicyAssignmentInputShapeAWSJSON(v *types.DescribeIAMPolicyAssignmentInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDescribeIngestionInputShapeAWSREST(v *types.DescribeIngestionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDescribeIngestionInputShapeAWSJSON(v *types.DescribeIngestionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDescribeTemplateInputShapeAWSREST(v *types.DescribeTemplateInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDescribeTemplateInputShapeAWSJSON(v *types.DescribeTemplateInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDescribeTemplateAliasInputShapeAWSREST(v *types.DescribeTemplateAliasInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDescribeTemplateAliasInputShapeAWSJSON(v *types.DescribeTemplateAliasInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDescribeTemplatePermissionsInputShapeAWSREST(v *types.DescribeTemplatePermissionsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDescribeTemplatePermissionsInputShapeAWSJSON(v *types.DescribeTemplatePermissionsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDescribeUserInputShapeAWSREST(v *types.DescribeUserInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDescribeUserInputShapeAWSJSON(v *types.DescribeUserInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalGetDashboardEmbedUrlInputShapeAWSREST(v *types.GetDashboardEmbedUrlInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetDashboardEmbedUrlInputShapeAWSJSON(v *types.GetDashboardEmbedUrlInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListDashboardVersionsInputShapeAWSREST(v *types.ListDashboardVersionsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListDashboardVersionsInputShapeAWSJSON(v *types.ListDashboardVersionsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListDashboardsInputShapeAWSREST(v *types.ListDashboardsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListDashboardsInputShapeAWSJSON(v *types.ListDashboardsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListDataSetsInputShapeAWSREST(v *types.ListDataSetsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListDataSetsInputShapeAWSJSON(v *types.ListDataSetsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListDataSourcesInputShapeAWSREST(v *types.ListDataSourcesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListDataSourcesInputShapeAWSJSON(v *types.ListDataSourcesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListGroupMembershipsInputShapeAWSREST(v *types.ListGroupMembershipsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListGroupMembershipsInputShapeAWSJSON(v *types.ListGroupMembershipsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListGroupsInputShapeAWSREST(v *types.ListGroupsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListGroupsInputShapeAWSJSON(v *types.ListGroupsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListIAMPolicyAssignmentsInputShapeAWSREST(v *types.ListIAMPolicyAssignmentsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListIAMPolicyAssignmentsInputShapeAWSJSON(v *types.ListIAMPolicyAssignmentsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListIAMPolicyAssignmentsForUserInputShapeAWSREST(v *types.ListIAMPolicyAssignmentsForUserInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListIAMPolicyAssignmentsForUserInputShapeAWSJSON(v *types.ListIAMPolicyAssignmentsForUserInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListIngestionsInputShapeAWSREST(v *types.ListIngestionsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListIngestionsInputShapeAWSJSON(v *types.ListIngestionsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListTagsForResourceInputShapeAWSREST(v *types.ListTagsForResourceInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListTagsForResourceInputShapeAWSJSON(v *types.ListTagsForResourceInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListTemplateAliasesInputShapeAWSREST(v *types.ListTemplateAliasesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListTemplateAliasesInputShapeAWSJSON(v *types.ListTemplateAliasesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListTemplateVersionsInputShapeAWSREST(v *types.ListTemplateVersionsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListTemplateVersionsInputShapeAWSJSON(v *types.ListTemplateVersionsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListTemplatesInputShapeAWSREST(v *types.ListTemplatesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListTemplatesInputShapeAWSJSON(v *types.ListTemplatesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListUserGroupsInputShapeAWSREST(v *types.ListUserGroupsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListUserGroupsInputShapeAWSJSON(v *types.ListUserGroupsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListUsersInputShapeAWSREST(v *types.ListUsersInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListUsersInputShapeAWSJSON(v *types.ListUsersInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalRegisterUserInputShapeAWSREST(v *types.RegisterUserInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalRegisterUserInputShapeAWSJSON(v *types.RegisterUserInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalTagResourceInputShapeAWSREST(v *types.TagResourceInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalTagResourceInputShapeAWSJSON(v *types.TagResourceInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalUntagResourceInputShapeAWSREST(v *types.UntagResourceInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUntagResourceInputShapeAWSJSON(v *types.UntagResourceInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalUpdateDashboardInputShapeAWSREST(v *types.UpdateDashboardInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUpdateDashboardInputShapeAWSJSON(v *types.UpdateDashboardInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalUpdateDashboardPermissionsInputShapeAWSREST(v *types.UpdateDashboardPermissionsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUpdateDashboardPermissionsInputShapeAWSJSON(v *types.UpdateDashboardPermissionsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalUpdateDashboardPublishedVersionInputShapeAWSREST(v *types.UpdateDashboardPublishedVersionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUpdateDashboardPublishedVersionInputShapeAWSJSON(v *types.UpdateDashboardPublishedVersionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalUpdateDataSetInputShapeAWSREST(v *types.UpdateDataSetInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUpdateDataSetInputShapeAWSJSON(v *types.UpdateDataSetInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalUpdateDataSetPermissionsInputShapeAWSREST(v *types.UpdateDataSetPermissionsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUpdateDataSetPermissionsInputShapeAWSJSON(v *types.UpdateDataSetPermissionsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalUpdateDataSourceInputShapeAWSREST(v *types.UpdateDataSourceInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUpdateDataSourceInputShapeAWSJSON(v *types.UpdateDataSourceInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalUpdateDataSourcePermissionsInputShapeAWSREST(v *types.UpdateDataSourcePermissionsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUpdateDataSourcePermissionsInputShapeAWSJSON(v *types.UpdateDataSourcePermissionsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalUpdateGroupInputShapeAWSREST(v *types.UpdateGroupInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUpdateGroupInputShapeAWSJSON(v *types.UpdateGroupInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalUpdateIAMPolicyAssignmentInputShapeAWSREST(v *types.UpdateIAMPolicyAssignmentInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUpdateIAMPolicyAssignmentInputShapeAWSJSON(v *types.UpdateIAMPolicyAssignmentInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalUpdateTemplateInputShapeAWSREST(v *types.UpdateTemplateInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUpdateTemplateInputShapeAWSJSON(v *types.UpdateTemplateInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalUpdateTemplateAliasInputShapeAWSREST(v *types.UpdateTemplateAliasInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUpdateTemplateAliasInputShapeAWSJSON(v *types.UpdateTemplateAliasInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalUpdateTemplatePermissionsInputShapeAWSREST(v *types.UpdateTemplatePermissionsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUpdateTemplatePermissionsInputShapeAWSJSON(v *types.UpdateTemplatePermissionsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalUpdateUserInputShapeAWSREST(v *types.UpdateUserInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUpdateUserInputShapeAWSJSON(v *types.UpdateUserInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}
func (m CancelIngestionMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCancelIngestionInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCancelIngestionInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CancelIngestionMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CancelIngestion.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m CreateDashboardMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCreateDashboardInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCreateDashboardInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CreateDashboardMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CreateDashboard.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m CreateDataSetMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCreateDataSetInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCreateDataSetInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CreateDataSetMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CreateDataSet.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m CreateDataSourceMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCreateDataSourceInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCreateDataSourceInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CreateDataSourceMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CreateDataSource.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m CreateGroupMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCreateGroupInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCreateGroupInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CreateGroupMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CreateGroup.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m CreateGroupMembershipMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCreateGroupMembershipInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCreateGroupMembershipInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CreateGroupMembershipMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CreateGroupMembership.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m CreateIAMPolicyAssignmentMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCreateIAMPolicyAssignmentInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCreateIAMPolicyAssignmentInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CreateIAMPolicyAssignmentMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CreateIAMPolicyAssignment.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m CreateIngestionMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCreateIngestionInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCreateIngestionInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CreateIngestionMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CreateIngestion.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m CreateTemplateMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCreateTemplateInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCreateTemplateInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CreateTemplateMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CreateTemplate.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m CreateTemplateAliasMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCreateTemplateAliasInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCreateTemplateAliasInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CreateTemplateAliasMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CreateTemplateAlias.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteDashboardMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteDashboardInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeleteDashboardInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteDashboardMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteDashboard.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteDataSetMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteDataSetInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeleteDataSetInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteDataSetMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteDataSet.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteDataSourceMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteDataSourceInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeleteDataSourceInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteDataSourceMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteDataSource.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteGroupMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteGroupInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeleteGroupInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteGroupMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteGroup.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteGroupMembershipMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteGroupMembershipInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeleteGroupMembershipInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteGroupMembershipMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteGroupMembership.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteIAMPolicyAssignmentMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteIAMPolicyAssignmentInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeleteIAMPolicyAssignmentInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteIAMPolicyAssignmentMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteIAMPolicyAssignment.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteTemplateMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteTemplateInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeleteTemplateInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteTemplateMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteTemplate.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteTemplateAliasMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteTemplateAliasInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeleteTemplateAliasInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteTemplateAliasMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteTemplateAlias.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteUserMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteUserInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeleteUserInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteUserMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteUser.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteUserByPrincipalIdMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteUserByPrincipalIdInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeleteUserByPrincipalIdInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteUserByPrincipalIdMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteUserByPrincipalId.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DescribeDashboardMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDescribeDashboardInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDescribeDashboardInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DescribeDashboardMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DescribeDashboard.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DescribeDashboardPermissionsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDescribeDashboardPermissionsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDescribeDashboardPermissionsInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DescribeDashboardPermissionsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DescribeDashboardPermissions.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DescribeDataSetMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDescribeDataSetInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDescribeDataSetInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DescribeDataSetMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DescribeDataSet.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DescribeDataSetPermissionsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDescribeDataSetPermissionsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDescribeDataSetPermissionsInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DescribeDataSetPermissionsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DescribeDataSetPermissions.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DescribeDataSourceMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDescribeDataSourceInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDescribeDataSourceInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DescribeDataSourceMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DescribeDataSource.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DescribeDataSourcePermissionsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDescribeDataSourcePermissionsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDescribeDataSourcePermissionsInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DescribeDataSourcePermissionsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DescribeDataSourcePermissions.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DescribeGroupMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDescribeGroupInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDescribeGroupInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DescribeGroupMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DescribeGroup.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DescribeIAMPolicyAssignmentMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDescribeIAMPolicyAssignmentInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDescribeIAMPolicyAssignmentInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DescribeIAMPolicyAssignmentMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DescribeIAMPolicyAssignment.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DescribeIngestionMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDescribeIngestionInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDescribeIngestionInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DescribeIngestionMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DescribeIngestion.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DescribeTemplateMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDescribeTemplateInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDescribeTemplateInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DescribeTemplateMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DescribeTemplate.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DescribeTemplateAliasMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDescribeTemplateAliasInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDescribeTemplateAliasInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DescribeTemplateAliasMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DescribeTemplateAlias.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DescribeTemplatePermissionsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDescribeTemplatePermissionsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDescribeTemplatePermissionsInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DescribeTemplatePermissionsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DescribeTemplatePermissions.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DescribeUserMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDescribeUserInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDescribeUserInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DescribeUserMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DescribeUser.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetDashboardEmbedUrlMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetDashboardEmbedUrlInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetDashboardEmbedUrlInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetDashboardEmbedUrlMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetDashboardEmbedUrl.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListDashboardVersionsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListDashboardVersionsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListDashboardVersionsInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListDashboardVersionsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListDashboardVersions.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListDashboardsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListDashboardsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListDashboardsInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListDashboardsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListDashboards.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListDataSetsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListDataSetsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListDataSetsInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListDataSetsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListDataSets.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListDataSourcesMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListDataSourcesInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListDataSourcesInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListDataSourcesMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListDataSources.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListGroupMembershipsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListGroupMembershipsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListGroupMembershipsInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListGroupMembershipsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListGroupMemberships.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListGroupsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListGroupsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListGroupsInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListGroupsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListGroups.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListIAMPolicyAssignmentsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListIAMPolicyAssignmentsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListIAMPolicyAssignmentsInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListIAMPolicyAssignmentsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListIAMPolicyAssignments.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListIAMPolicyAssignmentsForUserMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListIAMPolicyAssignmentsForUserInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListIAMPolicyAssignmentsForUserInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListIAMPolicyAssignmentsForUserMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListIAMPolicyAssignmentsForUser.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListIngestionsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListIngestionsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListIngestionsInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListIngestionsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListIngestions.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListTagsForResourceMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListTagsForResourceInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListTagsForResourceInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListTagsForResourceMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListTagsForResource.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListTemplateAliasesMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListTemplateAliasesInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListTemplateAliasesInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListTemplateAliasesMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListTemplateAliases.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListTemplateVersionsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListTemplateVersionsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListTemplateVersionsInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListTemplateVersionsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListTemplateVersions.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListTemplatesMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListTemplatesInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListTemplatesInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListTemplatesMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListTemplates.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListUserGroupsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListUserGroupsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListUserGroupsInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListUserGroupsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListUserGroups.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListUsersMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListUsersInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListUsersInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListUsersMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListUsers.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m RegisterUserMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalRegisterUserInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalRegisterUserInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m RegisterUserMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "RegisterUser.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m TagResourceMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalTagResourceInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalTagResourceInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m TagResourceMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "TagResource.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UntagResourceMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUntagResourceInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUntagResourceInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UntagResourceMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UntagResource.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UpdateDashboardMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUpdateDashboardInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUpdateDashboardInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UpdateDashboardMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UpdateDashboard.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UpdateDashboardPermissionsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUpdateDashboardPermissionsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUpdateDashboardPermissionsInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UpdateDashboardPermissionsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UpdateDashboardPermissions.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UpdateDashboardPublishedVersionMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUpdateDashboardPublishedVersionInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUpdateDashboardPublishedVersionInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UpdateDashboardPublishedVersionMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UpdateDashboardPublishedVersion.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UpdateDataSetMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUpdateDataSetInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUpdateDataSetInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UpdateDataSetMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UpdateDataSet.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UpdateDataSetPermissionsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUpdateDataSetPermissionsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUpdateDataSetPermissionsInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UpdateDataSetPermissionsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UpdateDataSetPermissions.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UpdateDataSourceMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUpdateDataSourceInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUpdateDataSourceInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UpdateDataSourceMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UpdateDataSource.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UpdateDataSourcePermissionsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUpdateDataSourcePermissionsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUpdateDataSourcePermissionsInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UpdateDataSourcePermissionsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UpdateDataSourcePermissions.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UpdateGroupMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUpdateGroupInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUpdateGroupInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UpdateGroupMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UpdateGroup.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UpdateIAMPolicyAssignmentMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUpdateIAMPolicyAssignmentInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUpdateIAMPolicyAssignmentInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UpdateIAMPolicyAssignmentMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UpdateIAMPolicyAssignment.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UpdateTemplateMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUpdateTemplateInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUpdateTemplateInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UpdateTemplateMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UpdateTemplate.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UpdateTemplateAliasMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUpdateTemplateAliasInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUpdateTemplateAliasInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UpdateTemplateAliasMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UpdateTemplateAlias.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UpdateTemplatePermissionsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUpdateTemplatePermissionsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUpdateTemplatePermissionsInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UpdateTemplatePermissionsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UpdateTemplatePermissions.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UpdateUserMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUpdateUserInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUpdateUserInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UpdateUserMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UpdateUser.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}
