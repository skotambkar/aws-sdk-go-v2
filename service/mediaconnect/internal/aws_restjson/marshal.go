// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

// Package aws_restjson service, marshal.go contains the generated operation marshalers and methods on it.

package aws_restjson

import (
	"bytes"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/awserr"
	"github.com/aws/aws-sdk-go-v2/private/protocol/jsonrpc"
	"github.com/aws/aws-sdk-go-v2/private/protocol/rest"
	"github.com/aws/aws-sdk-go-v2/service/mediaconnect/types"
)

var _ bytes.Buffer
var _ awserr.Error

// AddFlowOutputsMarshaler defines marshaler for AddFlowOutputs operation
type AddFlowOutputsMarshaler struct {
	Input *types.AddFlowOutputsInput
}

// CreateFlowMarshaler defines marshaler for CreateFlow operation
type CreateFlowMarshaler struct {
	Input *types.CreateFlowInput
}

// DeleteFlowMarshaler defines marshaler for DeleteFlow operation
type DeleteFlowMarshaler struct {
	Input *types.DeleteFlowInput
}

// DescribeFlowMarshaler defines marshaler for DescribeFlow operation
type DescribeFlowMarshaler struct {
	Input *types.DescribeFlowInput
}

// GrantFlowEntitlementsMarshaler defines marshaler for GrantFlowEntitlements operation
type GrantFlowEntitlementsMarshaler struct {
	Input *types.GrantFlowEntitlementsInput
}

// ListEntitlementsMarshaler defines marshaler for ListEntitlements operation
type ListEntitlementsMarshaler struct {
	Input *types.ListEntitlementsInput
}

// ListFlowsMarshaler defines marshaler for ListFlows operation
type ListFlowsMarshaler struct {
	Input *types.ListFlowsInput
}

// ListTagsForResourceMarshaler defines marshaler for ListTagsForResource operation
type ListTagsForResourceMarshaler struct {
	Input *types.ListTagsForResourceInput
}

// RemoveFlowOutputMarshaler defines marshaler for RemoveFlowOutput operation
type RemoveFlowOutputMarshaler struct {
	Input *types.RemoveFlowOutputInput
}

// RevokeFlowEntitlementMarshaler defines marshaler for RevokeFlowEntitlement operation
type RevokeFlowEntitlementMarshaler struct {
	Input *types.RevokeFlowEntitlementInput
}

// StartFlowMarshaler defines marshaler for StartFlow operation
type StartFlowMarshaler struct {
	Input *types.StartFlowInput
}

// StopFlowMarshaler defines marshaler for StopFlow operation
type StopFlowMarshaler struct {
	Input *types.StopFlowInput
}

// TagResourceMarshaler defines marshaler for TagResource operation
type TagResourceMarshaler struct {
	Input *types.TagResourceInput
}

// UntagResourceMarshaler defines marshaler for UntagResource operation
type UntagResourceMarshaler struct {
	Input *types.UntagResourceInput
}

// UpdateFlowEntitlementMarshaler defines marshaler for UpdateFlowEntitlement operation
type UpdateFlowEntitlementMarshaler struct {
	Input *types.UpdateFlowEntitlementInput
}

// UpdateFlowOutputMarshaler defines marshaler for UpdateFlowOutput operation
type UpdateFlowOutputMarshaler struct {
	Input *types.UpdateFlowOutputInput
}

// UpdateFlowSourceMarshaler defines marshaler for UpdateFlowSource operation
type UpdateFlowSourceMarshaler struct {
	Input *types.UpdateFlowSourceInput
}

func MarshalAddFlowOutputsInputShapeAWSREST(v *types.AddFlowOutputsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalAddFlowOutputsInputShapeAWSJSON(v *types.AddFlowOutputsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalCreateFlowInputShapeAWSREST(v *types.CreateFlowInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCreateFlowInputShapeAWSJSON(v *types.CreateFlowInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDeleteFlowInputShapeAWSREST(v *types.DeleteFlowInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeleteFlowInputShapeAWSJSON(v *types.DeleteFlowInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDescribeFlowInputShapeAWSREST(v *types.DescribeFlowInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDescribeFlowInputShapeAWSJSON(v *types.DescribeFlowInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalGrantFlowEntitlementsInputShapeAWSREST(v *types.GrantFlowEntitlementsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGrantFlowEntitlementsInputShapeAWSJSON(v *types.GrantFlowEntitlementsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListEntitlementsInputShapeAWSREST(v *types.ListEntitlementsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListEntitlementsInputShapeAWSJSON(v *types.ListEntitlementsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListFlowsInputShapeAWSREST(v *types.ListFlowsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListFlowsInputShapeAWSJSON(v *types.ListFlowsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListTagsForResourceInputShapeAWSREST(v *types.ListTagsForResourceInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListTagsForResourceInputShapeAWSJSON(v *types.ListTagsForResourceInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalRemoveFlowOutputInputShapeAWSREST(v *types.RemoveFlowOutputInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalRemoveFlowOutputInputShapeAWSJSON(v *types.RemoveFlowOutputInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalRevokeFlowEntitlementInputShapeAWSREST(v *types.RevokeFlowEntitlementInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalRevokeFlowEntitlementInputShapeAWSJSON(v *types.RevokeFlowEntitlementInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalStartFlowInputShapeAWSREST(v *types.StartFlowInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalStartFlowInputShapeAWSJSON(v *types.StartFlowInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalStopFlowInputShapeAWSREST(v *types.StopFlowInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalStopFlowInputShapeAWSJSON(v *types.StopFlowInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalTagResourceInputShapeAWSREST(v *types.TagResourceInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalTagResourceInputShapeAWSJSON(v *types.TagResourceInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalUntagResourceInputShapeAWSREST(v *types.UntagResourceInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUntagResourceInputShapeAWSJSON(v *types.UntagResourceInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalUpdateFlowEntitlementInputShapeAWSREST(v *types.UpdateFlowEntitlementInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUpdateFlowEntitlementInputShapeAWSJSON(v *types.UpdateFlowEntitlementInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalUpdateFlowOutputInputShapeAWSREST(v *types.UpdateFlowOutputInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUpdateFlowOutputInputShapeAWSJSON(v *types.UpdateFlowOutputInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalUpdateFlowSourceInputShapeAWSREST(v *types.UpdateFlowSourceInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUpdateFlowSourceInputShapeAWSJSON(v *types.UpdateFlowSourceInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}
func (m AddFlowOutputsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalAddFlowOutputsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalAddFlowOutputsInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m AddFlowOutputsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "AddFlowOutputs.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m CreateFlowMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCreateFlowInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCreateFlowInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CreateFlowMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CreateFlow.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteFlowMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteFlowInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeleteFlowInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteFlowMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteFlow.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DescribeFlowMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDescribeFlowInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDescribeFlowInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DescribeFlowMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DescribeFlow.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GrantFlowEntitlementsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGrantFlowEntitlementsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGrantFlowEntitlementsInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GrantFlowEntitlementsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GrantFlowEntitlements.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListEntitlementsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListEntitlementsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListEntitlementsInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListEntitlementsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListEntitlements.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListFlowsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListFlowsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListFlowsInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListFlowsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListFlows.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListTagsForResourceMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListTagsForResourceInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListTagsForResourceInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListTagsForResourceMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListTagsForResource.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m RemoveFlowOutputMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalRemoveFlowOutputInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalRemoveFlowOutputInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m RemoveFlowOutputMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "RemoveFlowOutput.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m RevokeFlowEntitlementMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalRevokeFlowEntitlementInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalRevokeFlowEntitlementInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m RevokeFlowEntitlementMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "RevokeFlowEntitlement.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m StartFlowMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalStartFlowInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalStartFlowInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m StartFlowMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "StartFlow.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m StopFlowMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalStopFlowInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalStopFlowInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m StopFlowMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "StopFlow.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m TagResourceMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalTagResourceInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalTagResourceInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m TagResourceMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "TagResource.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UntagResourceMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUntagResourceInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUntagResourceInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UntagResourceMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UntagResource.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UpdateFlowEntitlementMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUpdateFlowEntitlementInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUpdateFlowEntitlementInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UpdateFlowEntitlementMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UpdateFlowEntitlement.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UpdateFlowOutputMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUpdateFlowOutputInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUpdateFlowOutputInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UpdateFlowOutputMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UpdateFlowOutput.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UpdateFlowSourceMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUpdateFlowSourceInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUpdateFlowSourceInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UpdateFlowSourceMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UpdateFlowSource.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}
