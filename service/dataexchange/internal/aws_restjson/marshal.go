// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

// Package aws_restjson service, marshal.go contains the generated operation marshalers and methods on it.

package aws_restjson

import (
	"bytes"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/awserr"
	"github.com/aws/aws-sdk-go-v2/private/protocol/jsonrpc"
	"github.com/aws/aws-sdk-go-v2/private/protocol/rest"
	"github.com/aws/aws-sdk-go-v2/service/dataexchange/types"
)

var _ bytes.Buffer
var _ awserr.Error

// CancelJobMarshaler defines marshaler for CancelJob operation
type CancelJobMarshaler struct {
	Input *types.CancelJobInput
}

// CreateDataSetMarshaler defines marshaler for CreateDataSet operation
type CreateDataSetMarshaler struct {
	Input *types.CreateDataSetInput
}

// CreateJobMarshaler defines marshaler for CreateJob operation
type CreateJobMarshaler struct {
	Input *types.CreateJobInput
}

// CreateRevisionMarshaler defines marshaler for CreateRevision operation
type CreateRevisionMarshaler struct {
	Input *types.CreateRevisionInput
}

// DeleteAssetMarshaler defines marshaler for DeleteAsset operation
type DeleteAssetMarshaler struct {
	Input *types.DeleteAssetInput
}

// DeleteDataSetMarshaler defines marshaler for DeleteDataSet operation
type DeleteDataSetMarshaler struct {
	Input *types.DeleteDataSetInput
}

// DeleteRevisionMarshaler defines marshaler for DeleteRevision operation
type DeleteRevisionMarshaler struct {
	Input *types.DeleteRevisionInput
}

// GetAssetMarshaler defines marshaler for GetAsset operation
type GetAssetMarshaler struct {
	Input *types.GetAssetInput
}

// GetDataSetMarshaler defines marshaler for GetDataSet operation
type GetDataSetMarshaler struct {
	Input *types.GetDataSetInput
}

// GetJobMarshaler defines marshaler for GetJob operation
type GetJobMarshaler struct {
	Input *types.GetJobInput
}

// GetRevisionMarshaler defines marshaler for GetRevision operation
type GetRevisionMarshaler struct {
	Input *types.GetRevisionInput
}

// ListDataSetRevisionsMarshaler defines marshaler for ListDataSetRevisions operation
type ListDataSetRevisionsMarshaler struct {
	Input *types.ListDataSetRevisionsInput
}

// ListDataSetsMarshaler defines marshaler for ListDataSets operation
type ListDataSetsMarshaler struct {
	Input *types.ListDataSetsInput
}

// ListJobsMarshaler defines marshaler for ListJobs operation
type ListJobsMarshaler struct {
	Input *types.ListJobsInput
}

// ListRevisionAssetsMarshaler defines marshaler for ListRevisionAssets operation
type ListRevisionAssetsMarshaler struct {
	Input *types.ListRevisionAssetsInput
}

// ListTagsForResourceMarshaler defines marshaler for ListTagsForResource operation
type ListTagsForResourceMarshaler struct {
	Input *types.ListTagsForResourceInput
}

// StartJobMarshaler defines marshaler for StartJob operation
type StartJobMarshaler struct {
	Input *types.StartJobInput
}

// TagResourceMarshaler defines marshaler for TagResource operation
type TagResourceMarshaler struct {
	Input *types.TagResourceInput
}

// UntagResourceMarshaler defines marshaler for UntagResource operation
type UntagResourceMarshaler struct {
	Input *types.UntagResourceInput
}

// UpdateAssetMarshaler defines marshaler for UpdateAsset operation
type UpdateAssetMarshaler struct {
	Input *types.UpdateAssetInput
}

// UpdateDataSetMarshaler defines marshaler for UpdateDataSet operation
type UpdateDataSetMarshaler struct {
	Input *types.UpdateDataSetInput
}

// UpdateRevisionMarshaler defines marshaler for UpdateRevision operation
type UpdateRevisionMarshaler struct {
	Input *types.UpdateRevisionInput
}

func MarshalCancelJobInputShapeAWSREST(v *types.CancelJobInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCancelJobInputShapeAWSJSON(v *types.CancelJobInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalCreateDataSetInputShapeAWSREST(v *types.CreateDataSetInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCreateDataSetInputShapeAWSJSON(v *types.CreateDataSetInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalCreateJobInputShapeAWSREST(v *types.CreateJobInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCreateJobInputShapeAWSJSON(v *types.CreateJobInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalCreateRevisionInputShapeAWSREST(v *types.CreateRevisionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCreateRevisionInputShapeAWSJSON(v *types.CreateRevisionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDeleteAssetInputShapeAWSREST(v *types.DeleteAssetInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeleteAssetInputShapeAWSJSON(v *types.DeleteAssetInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDeleteDataSetInputShapeAWSREST(v *types.DeleteDataSetInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeleteDataSetInputShapeAWSJSON(v *types.DeleteDataSetInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDeleteRevisionInputShapeAWSREST(v *types.DeleteRevisionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeleteRevisionInputShapeAWSJSON(v *types.DeleteRevisionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalGetAssetInputShapeAWSREST(v *types.GetAssetInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetAssetInputShapeAWSJSON(v *types.GetAssetInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalGetDataSetInputShapeAWSREST(v *types.GetDataSetInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetDataSetInputShapeAWSJSON(v *types.GetDataSetInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalGetJobInputShapeAWSREST(v *types.GetJobInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetJobInputShapeAWSJSON(v *types.GetJobInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalGetRevisionInputShapeAWSREST(v *types.GetRevisionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetRevisionInputShapeAWSJSON(v *types.GetRevisionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListDataSetRevisionsInputShapeAWSREST(v *types.ListDataSetRevisionsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListDataSetRevisionsInputShapeAWSJSON(v *types.ListDataSetRevisionsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListDataSetsInputShapeAWSREST(v *types.ListDataSetsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListDataSetsInputShapeAWSJSON(v *types.ListDataSetsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListJobsInputShapeAWSREST(v *types.ListJobsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListJobsInputShapeAWSJSON(v *types.ListJobsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListRevisionAssetsInputShapeAWSREST(v *types.ListRevisionAssetsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListRevisionAssetsInputShapeAWSJSON(v *types.ListRevisionAssetsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListTagsForResourceInputShapeAWSREST(v *types.ListTagsForResourceInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListTagsForResourceInputShapeAWSJSON(v *types.ListTagsForResourceInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalStartJobInputShapeAWSREST(v *types.StartJobInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalStartJobInputShapeAWSJSON(v *types.StartJobInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalTagResourceInputShapeAWSREST(v *types.TagResourceInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalTagResourceInputShapeAWSJSON(v *types.TagResourceInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalUntagResourceInputShapeAWSREST(v *types.UntagResourceInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUntagResourceInputShapeAWSJSON(v *types.UntagResourceInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalUpdateAssetInputShapeAWSREST(v *types.UpdateAssetInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUpdateAssetInputShapeAWSJSON(v *types.UpdateAssetInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalUpdateDataSetInputShapeAWSREST(v *types.UpdateDataSetInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUpdateDataSetInputShapeAWSJSON(v *types.UpdateDataSetInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalUpdateRevisionInputShapeAWSREST(v *types.UpdateRevisionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUpdateRevisionInputShapeAWSJSON(v *types.UpdateRevisionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}
func (m CancelJobMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCancelJobInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCancelJobInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CancelJobMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CancelJob.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m CreateDataSetMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCreateDataSetInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCreateDataSetInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CreateDataSetMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CreateDataSet.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m CreateJobMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCreateJobInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCreateJobInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CreateJobMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CreateJob.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m CreateRevisionMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCreateRevisionInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCreateRevisionInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CreateRevisionMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CreateRevision.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteAssetMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteAssetInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeleteAssetInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteAssetMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteAsset.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteDataSetMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteDataSetInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeleteDataSetInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteDataSetMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteDataSet.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteRevisionMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteRevisionInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeleteRevisionInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteRevisionMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteRevision.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetAssetMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetAssetInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetAssetInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetAssetMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetAsset.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetDataSetMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetDataSetInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetDataSetInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetDataSetMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetDataSet.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetJobMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetJobInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetJobInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetJobMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetJob.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetRevisionMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetRevisionInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetRevisionInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetRevisionMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetRevision.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListDataSetRevisionsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListDataSetRevisionsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListDataSetRevisionsInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListDataSetRevisionsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListDataSetRevisions.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListDataSetsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListDataSetsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListDataSetsInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListDataSetsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListDataSets.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListJobsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListJobsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListJobsInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListJobsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListJobs.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListRevisionAssetsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListRevisionAssetsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListRevisionAssetsInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListRevisionAssetsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListRevisionAssets.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListTagsForResourceMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListTagsForResourceInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListTagsForResourceInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListTagsForResourceMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListTagsForResource.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m StartJobMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalStartJobInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalStartJobInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m StartJobMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "StartJob.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m TagResourceMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalTagResourceInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalTagResourceInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m TagResourceMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "TagResource.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UntagResourceMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUntagResourceInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUntagResourceInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UntagResourceMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UntagResource.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UpdateAssetMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUpdateAssetInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUpdateAssetInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UpdateAssetMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UpdateAsset.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UpdateDataSetMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUpdateDataSetInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUpdateDataSetInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UpdateDataSetMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UpdateDataSet.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UpdateRevisionMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUpdateRevisionInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUpdateRevisionInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UpdateRevisionMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UpdateRevision.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}
