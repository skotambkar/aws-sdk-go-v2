// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

// Package aws_restjson service, marshal.go contains the generated operation marshalers and methods on it.

package aws_restjson

import (
	"bytes"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/awserr"
	"github.com/aws/aws-sdk-go-v2/private/protocol/jsonrpc"
	"github.com/aws/aws-sdk-go-v2/private/protocol/rest"
	"github.com/aws/aws-sdk-go-v2/service/mobile/types"
)

var _ bytes.Buffer
var _ awserr.Error

// CreateProjectMarshaler defines marshaler for CreateProject operation
type CreateProjectMarshaler struct {
	Input *types.CreateProjectInput
}

// DeleteProjectMarshaler defines marshaler for DeleteProject operation
type DeleteProjectMarshaler struct {
	Input *types.DeleteProjectInput
}

// DescribeBundleMarshaler defines marshaler for DescribeBundle operation
type DescribeBundleMarshaler struct {
	Input *types.DescribeBundleInput
}

// DescribeProjectMarshaler defines marshaler for DescribeProject operation
type DescribeProjectMarshaler struct {
	Input *types.DescribeProjectInput
}

// ExportBundleMarshaler defines marshaler for ExportBundle operation
type ExportBundleMarshaler struct {
	Input *types.ExportBundleInput
}

// ExportProjectMarshaler defines marshaler for ExportProject operation
type ExportProjectMarshaler struct {
	Input *types.ExportProjectInput
}

// ListBundlesMarshaler defines marshaler for ListBundles operation
type ListBundlesMarshaler struct {
	Input *types.ListBundlesInput
}

// ListProjectsMarshaler defines marshaler for ListProjects operation
type ListProjectsMarshaler struct {
	Input *types.ListProjectsInput
}

// UpdateProjectMarshaler defines marshaler for UpdateProject operation
type UpdateProjectMarshaler struct {
	Input *types.UpdateProjectInput
}

func MarshalCreateProjectInputShapeAWSREST(v *types.CreateProjectInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCreateProjectInputShapeAWSJSON(v *types.CreateProjectInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDeleteProjectInputShapeAWSREST(v *types.DeleteProjectInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeleteProjectInputShapeAWSJSON(v *types.DeleteProjectInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDescribeBundleInputShapeAWSREST(v *types.DescribeBundleInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDescribeBundleInputShapeAWSJSON(v *types.DescribeBundleInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDescribeProjectInputShapeAWSREST(v *types.DescribeProjectInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDescribeProjectInputShapeAWSJSON(v *types.DescribeProjectInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalExportBundleInputShapeAWSREST(v *types.ExportBundleInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalExportBundleInputShapeAWSJSON(v *types.ExportBundleInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalExportProjectInputShapeAWSREST(v *types.ExportProjectInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalExportProjectInputShapeAWSJSON(v *types.ExportProjectInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListBundlesInputShapeAWSREST(v *types.ListBundlesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListBundlesInputShapeAWSJSON(v *types.ListBundlesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListProjectsInputShapeAWSREST(v *types.ListProjectsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListProjectsInputShapeAWSJSON(v *types.ListProjectsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalUpdateProjectInputShapeAWSREST(v *types.UpdateProjectInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUpdateProjectInputShapeAWSJSON(v *types.UpdateProjectInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}
func (m CreateProjectMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCreateProjectInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCreateProjectInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CreateProjectMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CreateProject.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteProjectMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteProjectInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeleteProjectInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteProjectMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteProject.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DescribeBundleMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDescribeBundleInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDescribeBundleInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DescribeBundleMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DescribeBundle.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DescribeProjectMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDescribeProjectInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDescribeProjectInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DescribeProjectMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DescribeProject.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ExportBundleMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalExportBundleInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalExportBundleInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ExportBundleMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ExportBundle.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ExportProjectMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalExportProjectInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalExportProjectInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ExportProjectMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ExportProject.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListBundlesMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListBundlesInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListBundlesInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListBundlesMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListBundles.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListProjectsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListProjectsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListProjectsInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListProjectsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListProjects.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UpdateProjectMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUpdateProjectInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUpdateProjectInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UpdateProjectMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UpdateProject.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}
