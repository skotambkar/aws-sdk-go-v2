// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

// Package aws_restjson service, marshal.go contains the generated operation marshalers and methods on it.

package aws_restjson

import (
	"bytes"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/awserr"
	"github.com/aws/aws-sdk-go-v2/private/protocol/jsonrpc"
	"github.com/aws/aws-sdk-go-v2/private/protocol/rest"
	"github.com/aws/aws-sdk-go-v2/service/eks/types"
)

var _ bytes.Buffer
var _ awserr.Error

// CreateClusterMarshaler defines marshaler for CreateCluster operation
type CreateClusterMarshaler struct {
	Input *types.CreateClusterInput
}

// CreateNodegroupMarshaler defines marshaler for CreateNodegroup operation
type CreateNodegroupMarshaler struct {
	Input *types.CreateNodegroupInput
}

// DeleteClusterMarshaler defines marshaler for DeleteCluster operation
type DeleteClusterMarshaler struct {
	Input *types.DeleteClusterInput
}

// DeleteNodegroupMarshaler defines marshaler for DeleteNodegroup operation
type DeleteNodegroupMarshaler struct {
	Input *types.DeleteNodegroupInput
}

// DescribeClusterMarshaler defines marshaler for DescribeCluster operation
type DescribeClusterMarshaler struct {
	Input *types.DescribeClusterInput
}

// DescribeNodegroupMarshaler defines marshaler for DescribeNodegroup operation
type DescribeNodegroupMarshaler struct {
	Input *types.DescribeNodegroupInput
}

// DescribeUpdateMarshaler defines marshaler for DescribeUpdate operation
type DescribeUpdateMarshaler struct {
	Input *types.DescribeUpdateInput
}

// ListClustersMarshaler defines marshaler for ListClusters operation
type ListClustersMarshaler struct {
	Input *types.ListClustersInput
}

// ListNodegroupsMarshaler defines marshaler for ListNodegroups operation
type ListNodegroupsMarshaler struct {
	Input *types.ListNodegroupsInput
}

// ListTagsForResourceMarshaler defines marshaler for ListTagsForResource operation
type ListTagsForResourceMarshaler struct {
	Input *types.ListTagsForResourceInput
}

// ListUpdatesMarshaler defines marshaler for ListUpdates operation
type ListUpdatesMarshaler struct {
	Input *types.ListUpdatesInput
}

// TagResourceMarshaler defines marshaler for TagResource operation
type TagResourceMarshaler struct {
	Input *types.TagResourceInput
}

// UntagResourceMarshaler defines marshaler for UntagResource operation
type UntagResourceMarshaler struct {
	Input *types.UntagResourceInput
}

// UpdateClusterConfigMarshaler defines marshaler for UpdateClusterConfig operation
type UpdateClusterConfigMarshaler struct {
	Input *types.UpdateClusterConfigInput
}

// UpdateClusterVersionMarshaler defines marshaler for UpdateClusterVersion operation
type UpdateClusterVersionMarshaler struct {
	Input *types.UpdateClusterVersionInput
}

// UpdateNodegroupConfigMarshaler defines marshaler for UpdateNodegroupConfig operation
type UpdateNodegroupConfigMarshaler struct {
	Input *types.UpdateNodegroupConfigInput
}

// UpdateNodegroupVersionMarshaler defines marshaler for UpdateNodegroupVersion operation
type UpdateNodegroupVersionMarshaler struct {
	Input *types.UpdateNodegroupVersionInput
}

func MarshalCreateClusterInputShapeAWSREST(v *types.CreateClusterInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCreateClusterInputShapeAWSJSON(v *types.CreateClusterInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalCreateNodegroupInputShapeAWSREST(v *types.CreateNodegroupInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCreateNodegroupInputShapeAWSJSON(v *types.CreateNodegroupInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDeleteClusterInputShapeAWSREST(v *types.DeleteClusterInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeleteClusterInputShapeAWSJSON(v *types.DeleteClusterInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDeleteNodegroupInputShapeAWSREST(v *types.DeleteNodegroupInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeleteNodegroupInputShapeAWSJSON(v *types.DeleteNodegroupInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDescribeClusterInputShapeAWSREST(v *types.DescribeClusterInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDescribeClusterInputShapeAWSJSON(v *types.DescribeClusterInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDescribeNodegroupInputShapeAWSREST(v *types.DescribeNodegroupInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDescribeNodegroupInputShapeAWSJSON(v *types.DescribeNodegroupInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDescribeUpdateInputShapeAWSREST(v *types.DescribeUpdateInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDescribeUpdateInputShapeAWSJSON(v *types.DescribeUpdateInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListClustersInputShapeAWSREST(v *types.ListClustersInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListClustersInputShapeAWSJSON(v *types.ListClustersInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListNodegroupsInputShapeAWSREST(v *types.ListNodegroupsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListNodegroupsInputShapeAWSJSON(v *types.ListNodegroupsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListTagsForResourceInputShapeAWSREST(v *types.ListTagsForResourceInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListTagsForResourceInputShapeAWSJSON(v *types.ListTagsForResourceInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListUpdatesInputShapeAWSREST(v *types.ListUpdatesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListUpdatesInputShapeAWSJSON(v *types.ListUpdatesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalTagResourceInputShapeAWSREST(v *types.TagResourceInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalTagResourceInputShapeAWSJSON(v *types.TagResourceInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalUntagResourceInputShapeAWSREST(v *types.UntagResourceInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUntagResourceInputShapeAWSJSON(v *types.UntagResourceInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalUpdateClusterConfigInputShapeAWSREST(v *types.UpdateClusterConfigInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUpdateClusterConfigInputShapeAWSJSON(v *types.UpdateClusterConfigInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalUpdateClusterVersionInputShapeAWSREST(v *types.UpdateClusterVersionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUpdateClusterVersionInputShapeAWSJSON(v *types.UpdateClusterVersionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalUpdateNodegroupConfigInputShapeAWSREST(v *types.UpdateNodegroupConfigInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUpdateNodegroupConfigInputShapeAWSJSON(v *types.UpdateNodegroupConfigInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalUpdateNodegroupVersionInputShapeAWSREST(v *types.UpdateNodegroupVersionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUpdateNodegroupVersionInputShapeAWSJSON(v *types.UpdateNodegroupVersionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}
func (m CreateClusterMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCreateClusterInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCreateClusterInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CreateClusterMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CreateCluster.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m CreateNodegroupMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCreateNodegroupInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCreateNodegroupInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CreateNodegroupMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CreateNodegroup.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteClusterMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteClusterInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeleteClusterInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteClusterMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteCluster.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteNodegroupMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteNodegroupInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeleteNodegroupInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteNodegroupMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteNodegroup.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DescribeClusterMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDescribeClusterInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDescribeClusterInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DescribeClusterMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DescribeCluster.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DescribeNodegroupMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDescribeNodegroupInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDescribeNodegroupInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DescribeNodegroupMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DescribeNodegroup.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DescribeUpdateMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDescribeUpdateInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDescribeUpdateInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DescribeUpdateMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DescribeUpdate.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListClustersMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListClustersInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListClustersInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListClustersMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListClusters.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListNodegroupsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListNodegroupsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListNodegroupsInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListNodegroupsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListNodegroups.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListTagsForResourceMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListTagsForResourceInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListTagsForResourceInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListTagsForResourceMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListTagsForResource.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListUpdatesMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListUpdatesInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListUpdatesInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListUpdatesMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListUpdates.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m TagResourceMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalTagResourceInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalTagResourceInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m TagResourceMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "TagResource.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UntagResourceMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUntagResourceInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUntagResourceInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UntagResourceMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UntagResource.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UpdateClusterConfigMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUpdateClusterConfigInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUpdateClusterConfigInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UpdateClusterConfigMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UpdateClusterConfig.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UpdateClusterVersionMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUpdateClusterVersionInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUpdateClusterVersionInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UpdateClusterVersionMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UpdateClusterVersion.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UpdateNodegroupConfigMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUpdateNodegroupConfigInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUpdateNodegroupConfigInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UpdateNodegroupConfigMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UpdateNodegroupConfig.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UpdateNodegroupVersionMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUpdateNodegroupVersionInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUpdateNodegroupVersionInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UpdateNodegroupVersionMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UpdateNodegroupVersion.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}
