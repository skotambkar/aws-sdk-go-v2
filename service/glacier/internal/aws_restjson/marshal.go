// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

// Package aws_restjson service, marshal.go contains the generated operation marshalers and methods on it.

package aws_restjson

import (
	"bytes"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/awserr"
	"github.com/aws/aws-sdk-go-v2/private/protocol/jsonrpc"
	"github.com/aws/aws-sdk-go-v2/private/protocol/rest"
	"github.com/aws/aws-sdk-go-v2/service/glacier/types"
)

var _ bytes.Buffer
var _ awserr.Error

// AbortMultipartUploadMarshaler defines marshaler for AbortMultipartUpload operation
type AbortMultipartUploadMarshaler struct {
	Input *types.AbortMultipartUploadInput
}

// AbortVaultLockMarshaler defines marshaler for AbortVaultLock operation
type AbortVaultLockMarshaler struct {
	Input *types.AbortVaultLockInput
}

// AddTagsToVaultMarshaler defines marshaler for AddTagsToVault operation
type AddTagsToVaultMarshaler struct {
	Input *types.AddTagsToVaultInput
}

// CompleteMultipartUploadMarshaler defines marshaler for CompleteMultipartUpload operation
type CompleteMultipartUploadMarshaler struct {
	Input *types.CompleteMultipartUploadInput
}

// CompleteVaultLockMarshaler defines marshaler for CompleteVaultLock operation
type CompleteVaultLockMarshaler struct {
	Input *types.CompleteVaultLockInput
}

// CreateVaultMarshaler defines marshaler for CreateVault operation
type CreateVaultMarshaler struct {
	Input *types.CreateVaultInput
}

// DeleteArchiveMarshaler defines marshaler for DeleteArchive operation
type DeleteArchiveMarshaler struct {
	Input *types.DeleteArchiveInput
}

// DeleteVaultMarshaler defines marshaler for DeleteVault operation
type DeleteVaultMarshaler struct {
	Input *types.DeleteVaultInput
}

// DeleteVaultAccessPolicyMarshaler defines marshaler for DeleteVaultAccessPolicy operation
type DeleteVaultAccessPolicyMarshaler struct {
	Input *types.DeleteVaultAccessPolicyInput
}

// DeleteVaultNotificationsMarshaler defines marshaler for DeleteVaultNotifications operation
type DeleteVaultNotificationsMarshaler struct {
	Input *types.DeleteVaultNotificationsInput
}

// DescribeJobMarshaler defines marshaler for DescribeJob operation
type DescribeJobMarshaler struct {
	Input *types.DescribeJobInput
}

// DescribeVaultMarshaler defines marshaler for DescribeVault operation
type DescribeVaultMarshaler struct {
	Input *types.DescribeVaultInput
}

// GetDataRetrievalPolicyMarshaler defines marshaler for GetDataRetrievalPolicy operation
type GetDataRetrievalPolicyMarshaler struct {
	Input *types.GetDataRetrievalPolicyInput
}

// GetJobOutputMarshaler defines marshaler for GetJobOutput operation
type GetJobOutputMarshaler struct {
	Input *types.GetJobOutputInput
}

// GetVaultAccessPolicyMarshaler defines marshaler for GetVaultAccessPolicy operation
type GetVaultAccessPolicyMarshaler struct {
	Input *types.GetVaultAccessPolicyInput
}

// GetVaultLockMarshaler defines marshaler for GetVaultLock operation
type GetVaultLockMarshaler struct {
	Input *types.GetVaultLockInput
}

// GetVaultNotificationsMarshaler defines marshaler for GetVaultNotifications operation
type GetVaultNotificationsMarshaler struct {
	Input *types.GetVaultNotificationsInput
}

// InitiateJobMarshaler defines marshaler for InitiateJob operation
type InitiateJobMarshaler struct {
	Input *types.InitiateJobInput
}

// InitiateMultipartUploadMarshaler defines marshaler for InitiateMultipartUpload operation
type InitiateMultipartUploadMarshaler struct {
	Input *types.InitiateMultipartUploadInput
}

// InitiateVaultLockMarshaler defines marshaler for InitiateVaultLock operation
type InitiateVaultLockMarshaler struct {
	Input *types.InitiateVaultLockInput
}

// ListJobsMarshaler defines marshaler for ListJobs operation
type ListJobsMarshaler struct {
	Input *types.ListJobsInput
}

// ListMultipartUploadsMarshaler defines marshaler for ListMultipartUploads operation
type ListMultipartUploadsMarshaler struct {
	Input *types.ListMultipartUploadsInput
}

// ListPartsMarshaler defines marshaler for ListParts operation
type ListPartsMarshaler struct {
	Input *types.ListPartsInput
}

// ListProvisionedCapacityMarshaler defines marshaler for ListProvisionedCapacity operation
type ListProvisionedCapacityMarshaler struct {
	Input *types.ListProvisionedCapacityInput
}

// ListTagsForVaultMarshaler defines marshaler for ListTagsForVault operation
type ListTagsForVaultMarshaler struct {
	Input *types.ListTagsForVaultInput
}

// ListVaultsMarshaler defines marshaler for ListVaults operation
type ListVaultsMarshaler struct {
	Input *types.ListVaultsInput
}

// PurchaseProvisionedCapacityMarshaler defines marshaler for PurchaseProvisionedCapacity operation
type PurchaseProvisionedCapacityMarshaler struct {
	Input *types.PurchaseProvisionedCapacityInput
}

// RemoveTagsFromVaultMarshaler defines marshaler for RemoveTagsFromVault operation
type RemoveTagsFromVaultMarshaler struct {
	Input *types.RemoveTagsFromVaultInput
}

// SetDataRetrievalPolicyMarshaler defines marshaler for SetDataRetrievalPolicy operation
type SetDataRetrievalPolicyMarshaler struct {
	Input *types.SetDataRetrievalPolicyInput
}

// SetVaultAccessPolicyMarshaler defines marshaler for SetVaultAccessPolicy operation
type SetVaultAccessPolicyMarshaler struct {
	Input *types.SetVaultAccessPolicyInput
}

// SetVaultNotificationsMarshaler defines marshaler for SetVaultNotifications operation
type SetVaultNotificationsMarshaler struct {
	Input *types.SetVaultNotificationsInput
}

// UploadArchiveMarshaler defines marshaler for UploadArchive operation
type UploadArchiveMarshaler struct {
	Input *types.UploadArchiveInput
}

// UploadMultipartPartMarshaler defines marshaler for UploadMultipartPart operation
type UploadMultipartPartMarshaler struct {
	Input *types.UploadMultipartPartInput
}

func MarshalAbortMultipartUploadInputShapeAWSREST(v *types.AbortMultipartUploadInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalAbortMultipartUploadInputShapeAWSJSON(v *types.AbortMultipartUploadInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalAbortVaultLockInputShapeAWSREST(v *types.AbortVaultLockInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalAbortVaultLockInputShapeAWSJSON(v *types.AbortVaultLockInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalAddTagsToVaultInputShapeAWSREST(v *types.AddTagsToVaultInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalAddTagsToVaultInputShapeAWSJSON(v *types.AddTagsToVaultInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalCompleteMultipartUploadInputShapeAWSREST(v *types.CompleteMultipartUploadInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCompleteMultipartUploadInputShapeAWSJSON(v *types.CompleteMultipartUploadInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalCompleteVaultLockInputShapeAWSREST(v *types.CompleteVaultLockInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCompleteVaultLockInputShapeAWSJSON(v *types.CompleteVaultLockInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalCreateVaultInputShapeAWSREST(v *types.CreateVaultInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCreateVaultInputShapeAWSJSON(v *types.CreateVaultInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDeleteArchiveInputShapeAWSREST(v *types.DeleteArchiveInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeleteArchiveInputShapeAWSJSON(v *types.DeleteArchiveInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDeleteVaultInputShapeAWSREST(v *types.DeleteVaultInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeleteVaultInputShapeAWSJSON(v *types.DeleteVaultInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDeleteVaultAccessPolicyInputShapeAWSREST(v *types.DeleteVaultAccessPolicyInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeleteVaultAccessPolicyInputShapeAWSJSON(v *types.DeleteVaultAccessPolicyInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDeleteVaultNotificationsInputShapeAWSREST(v *types.DeleteVaultNotificationsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeleteVaultNotificationsInputShapeAWSJSON(v *types.DeleteVaultNotificationsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDescribeJobInputShapeAWSREST(v *types.DescribeJobInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDescribeJobInputShapeAWSJSON(v *types.DescribeJobInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDescribeVaultInputShapeAWSREST(v *types.DescribeVaultInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDescribeVaultInputShapeAWSJSON(v *types.DescribeVaultInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalGetDataRetrievalPolicyInputShapeAWSREST(v *types.GetDataRetrievalPolicyInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetDataRetrievalPolicyInputShapeAWSJSON(v *types.GetDataRetrievalPolicyInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalGetJobOutputInputShapeAWSREST(v *types.GetJobOutputInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetJobOutputInputShapeAWSJSON(v *types.GetJobOutputInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalGetVaultAccessPolicyInputShapeAWSREST(v *types.GetVaultAccessPolicyInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetVaultAccessPolicyInputShapeAWSJSON(v *types.GetVaultAccessPolicyInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalGetVaultLockInputShapeAWSREST(v *types.GetVaultLockInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetVaultLockInputShapeAWSJSON(v *types.GetVaultLockInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalGetVaultNotificationsInputShapeAWSREST(v *types.GetVaultNotificationsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetVaultNotificationsInputShapeAWSJSON(v *types.GetVaultNotificationsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalInitiateJobInputShapeAWSREST(v *types.InitiateJobInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalInitiateJobInputShapeAWSJSON(v *types.InitiateJobInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalInitiateMultipartUploadInputShapeAWSREST(v *types.InitiateMultipartUploadInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalInitiateMultipartUploadInputShapeAWSJSON(v *types.InitiateMultipartUploadInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalInitiateVaultLockInputShapeAWSREST(v *types.InitiateVaultLockInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalInitiateVaultLockInputShapeAWSJSON(v *types.InitiateVaultLockInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListJobsInputShapeAWSREST(v *types.ListJobsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListJobsInputShapeAWSJSON(v *types.ListJobsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListMultipartUploadsInputShapeAWSREST(v *types.ListMultipartUploadsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListMultipartUploadsInputShapeAWSJSON(v *types.ListMultipartUploadsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListPartsInputShapeAWSREST(v *types.ListPartsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListPartsInputShapeAWSJSON(v *types.ListPartsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListProvisionedCapacityInputShapeAWSREST(v *types.ListProvisionedCapacityInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListProvisionedCapacityInputShapeAWSJSON(v *types.ListProvisionedCapacityInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListTagsForVaultInputShapeAWSREST(v *types.ListTagsForVaultInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListTagsForVaultInputShapeAWSJSON(v *types.ListTagsForVaultInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListVaultsInputShapeAWSREST(v *types.ListVaultsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListVaultsInputShapeAWSJSON(v *types.ListVaultsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalPurchaseProvisionedCapacityInputShapeAWSREST(v *types.PurchaseProvisionedCapacityInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalPurchaseProvisionedCapacityInputShapeAWSJSON(v *types.PurchaseProvisionedCapacityInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalRemoveTagsFromVaultInputShapeAWSREST(v *types.RemoveTagsFromVaultInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalRemoveTagsFromVaultInputShapeAWSJSON(v *types.RemoveTagsFromVaultInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalSetDataRetrievalPolicyInputShapeAWSREST(v *types.SetDataRetrievalPolicyInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalSetDataRetrievalPolicyInputShapeAWSJSON(v *types.SetDataRetrievalPolicyInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalSetVaultAccessPolicyInputShapeAWSREST(v *types.SetVaultAccessPolicyInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalSetVaultAccessPolicyInputShapeAWSJSON(v *types.SetVaultAccessPolicyInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalSetVaultNotificationsInputShapeAWSREST(v *types.SetVaultNotificationsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalSetVaultNotificationsInputShapeAWSJSON(v *types.SetVaultNotificationsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalUploadArchiveInputShapeAWSREST(v *types.UploadArchiveInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUploadArchiveInputShapeAWSJSON(v *types.UploadArchiveInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalUploadMultipartPartInputShapeAWSREST(v *types.UploadMultipartPartInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUploadMultipartPartInputShapeAWSJSON(v *types.UploadMultipartPartInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}
func (m AbortMultipartUploadMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalAbortMultipartUploadInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalAbortMultipartUploadInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m AbortMultipartUploadMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "AbortMultipartUpload.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m AbortVaultLockMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalAbortVaultLockInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalAbortVaultLockInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m AbortVaultLockMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "AbortVaultLock.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m AddTagsToVaultMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalAddTagsToVaultInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalAddTagsToVaultInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m AddTagsToVaultMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "AddTagsToVault.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m CompleteMultipartUploadMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCompleteMultipartUploadInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCompleteMultipartUploadInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CompleteMultipartUploadMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CompleteMultipartUpload.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m CompleteVaultLockMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCompleteVaultLockInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCompleteVaultLockInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CompleteVaultLockMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CompleteVaultLock.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m CreateVaultMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCreateVaultInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCreateVaultInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CreateVaultMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CreateVault.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteArchiveMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteArchiveInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeleteArchiveInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteArchiveMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteArchive.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteVaultMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteVaultInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeleteVaultInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteVaultMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteVault.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteVaultAccessPolicyMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteVaultAccessPolicyInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeleteVaultAccessPolicyInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteVaultAccessPolicyMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteVaultAccessPolicy.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteVaultNotificationsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteVaultNotificationsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeleteVaultNotificationsInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteVaultNotificationsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteVaultNotifications.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DescribeJobMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDescribeJobInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDescribeJobInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DescribeJobMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DescribeJob.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DescribeVaultMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDescribeVaultInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDescribeVaultInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DescribeVaultMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DescribeVault.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetDataRetrievalPolicyMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetDataRetrievalPolicyInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetDataRetrievalPolicyInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetDataRetrievalPolicyMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetDataRetrievalPolicy.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetJobOutputMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetJobOutputInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetJobOutputInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetJobOutputMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetJobOutput.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetVaultAccessPolicyMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetVaultAccessPolicyInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetVaultAccessPolicyInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetVaultAccessPolicyMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetVaultAccessPolicy.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetVaultLockMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetVaultLockInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetVaultLockInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetVaultLockMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetVaultLock.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetVaultNotificationsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetVaultNotificationsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetVaultNotificationsInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetVaultNotificationsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetVaultNotifications.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m InitiateJobMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalInitiateJobInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalInitiateJobInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m InitiateJobMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "InitiateJob.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m InitiateMultipartUploadMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalInitiateMultipartUploadInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalInitiateMultipartUploadInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m InitiateMultipartUploadMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "InitiateMultipartUpload.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m InitiateVaultLockMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalInitiateVaultLockInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalInitiateVaultLockInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m InitiateVaultLockMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "InitiateVaultLock.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListJobsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListJobsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListJobsInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListJobsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListJobs.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListMultipartUploadsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListMultipartUploadsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListMultipartUploadsInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListMultipartUploadsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListMultipartUploads.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListPartsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListPartsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListPartsInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListPartsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListParts.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListProvisionedCapacityMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListProvisionedCapacityInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListProvisionedCapacityInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListProvisionedCapacityMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListProvisionedCapacity.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListTagsForVaultMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListTagsForVaultInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListTagsForVaultInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListTagsForVaultMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListTagsForVault.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListVaultsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListVaultsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListVaultsInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListVaultsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListVaults.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m PurchaseProvisionedCapacityMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalPurchaseProvisionedCapacityInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalPurchaseProvisionedCapacityInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m PurchaseProvisionedCapacityMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "PurchaseProvisionedCapacity.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m RemoveTagsFromVaultMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalRemoveTagsFromVaultInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalRemoveTagsFromVaultInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m RemoveTagsFromVaultMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "RemoveTagsFromVault.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m SetDataRetrievalPolicyMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalSetDataRetrievalPolicyInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalSetDataRetrievalPolicyInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m SetDataRetrievalPolicyMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "SetDataRetrievalPolicy.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m SetVaultAccessPolicyMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalSetVaultAccessPolicyInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalSetVaultAccessPolicyInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m SetVaultAccessPolicyMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "SetVaultAccessPolicy.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m SetVaultNotificationsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalSetVaultNotificationsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalSetVaultNotificationsInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m SetVaultNotificationsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "SetVaultNotifications.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UploadArchiveMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUploadArchiveInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUploadArchiveInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UploadArchiveMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UploadArchive.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UploadMultipartPartMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUploadMultipartPartInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUploadMultipartPartInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UploadMultipartPartMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UploadMultipartPart.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}
