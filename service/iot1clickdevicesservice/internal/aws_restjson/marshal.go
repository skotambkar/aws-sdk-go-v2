// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

// Package aws_restjson service, marshal.go contains the generated operation marshalers and methods on it.

package aws_restjson

import (
	"bytes"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/awserr"
	"github.com/aws/aws-sdk-go-v2/private/protocol/jsonrpc"
	"github.com/aws/aws-sdk-go-v2/private/protocol/rest"
	"github.com/aws/aws-sdk-go-v2/service/iot1clickdevicesservice/types"
)

var _ bytes.Buffer
var _ awserr.Error

// ClaimDevicesByClaimCodeMarshaler defines marshaler for ClaimDevicesByClaimCode operation
type ClaimDevicesByClaimCodeMarshaler struct {
	Input *types.ClaimDevicesByClaimCodeInput
}

// DescribeDeviceMarshaler defines marshaler for DescribeDevice operation
type DescribeDeviceMarshaler struct {
	Input *types.DescribeDeviceInput
}

// FinalizeDeviceClaimMarshaler defines marshaler for FinalizeDeviceClaim operation
type FinalizeDeviceClaimMarshaler struct {
	Input *types.FinalizeDeviceClaimInput
}

// GetDeviceMethodsMarshaler defines marshaler for GetDeviceMethods operation
type GetDeviceMethodsMarshaler struct {
	Input *types.GetDeviceMethodsInput
}

// InitiateDeviceClaimMarshaler defines marshaler for InitiateDeviceClaim operation
type InitiateDeviceClaimMarshaler struct {
	Input *types.InitiateDeviceClaimInput
}

// InvokeDeviceMethodMarshaler defines marshaler for InvokeDeviceMethod operation
type InvokeDeviceMethodMarshaler struct {
	Input *types.InvokeDeviceMethodInput
}

// ListDeviceEventsMarshaler defines marshaler for ListDeviceEvents operation
type ListDeviceEventsMarshaler struct {
	Input *types.ListDeviceEventsInput
}

// ListDevicesMarshaler defines marshaler for ListDevices operation
type ListDevicesMarshaler struct {
	Input *types.ListDevicesInput
}

// ListTagsForResourceMarshaler defines marshaler for ListTagsForResource operation
type ListTagsForResourceMarshaler struct {
	Input *types.ListTagsForResourceInput
}

// TagResourceMarshaler defines marshaler for TagResource operation
type TagResourceMarshaler struct {
	Input *types.TagResourceInput
}

// UnclaimDeviceMarshaler defines marshaler for UnclaimDevice operation
type UnclaimDeviceMarshaler struct {
	Input *types.UnclaimDeviceInput
}

// UntagResourceMarshaler defines marshaler for UntagResource operation
type UntagResourceMarshaler struct {
	Input *types.UntagResourceInput
}

// UpdateDeviceStateMarshaler defines marshaler for UpdateDeviceState operation
type UpdateDeviceStateMarshaler struct {
	Input *types.UpdateDeviceStateInput
}

func MarshalClaimDevicesByClaimCodeInputShapeAWSREST(v *types.ClaimDevicesByClaimCodeInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalClaimDevicesByClaimCodeInputShapeAWSJSON(v *types.ClaimDevicesByClaimCodeInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDescribeDeviceInputShapeAWSREST(v *types.DescribeDeviceInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDescribeDeviceInputShapeAWSJSON(v *types.DescribeDeviceInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalFinalizeDeviceClaimInputShapeAWSREST(v *types.FinalizeDeviceClaimInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalFinalizeDeviceClaimInputShapeAWSJSON(v *types.FinalizeDeviceClaimInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalGetDeviceMethodsInputShapeAWSREST(v *types.GetDeviceMethodsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetDeviceMethodsInputShapeAWSJSON(v *types.GetDeviceMethodsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalInitiateDeviceClaimInputShapeAWSREST(v *types.InitiateDeviceClaimInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalInitiateDeviceClaimInputShapeAWSJSON(v *types.InitiateDeviceClaimInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalInvokeDeviceMethodInputShapeAWSREST(v *types.InvokeDeviceMethodInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalInvokeDeviceMethodInputShapeAWSJSON(v *types.InvokeDeviceMethodInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListDeviceEventsInputShapeAWSREST(v *types.ListDeviceEventsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListDeviceEventsInputShapeAWSJSON(v *types.ListDeviceEventsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListDevicesInputShapeAWSREST(v *types.ListDevicesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListDevicesInputShapeAWSJSON(v *types.ListDevicesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListTagsForResourceInputShapeAWSREST(v *types.ListTagsForResourceInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListTagsForResourceInputShapeAWSJSON(v *types.ListTagsForResourceInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalTagResourceInputShapeAWSREST(v *types.TagResourceInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalTagResourceInputShapeAWSJSON(v *types.TagResourceInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalUnclaimDeviceInputShapeAWSREST(v *types.UnclaimDeviceInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUnclaimDeviceInputShapeAWSJSON(v *types.UnclaimDeviceInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalUntagResourceInputShapeAWSREST(v *types.UntagResourceInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUntagResourceInputShapeAWSJSON(v *types.UntagResourceInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalUpdateDeviceStateInputShapeAWSREST(v *types.UpdateDeviceStateInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUpdateDeviceStateInputShapeAWSJSON(v *types.UpdateDeviceStateInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}
func (m ClaimDevicesByClaimCodeMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalClaimDevicesByClaimCodeInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalClaimDevicesByClaimCodeInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ClaimDevicesByClaimCodeMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ClaimDevicesByClaimCode.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DescribeDeviceMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDescribeDeviceInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDescribeDeviceInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DescribeDeviceMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DescribeDevice.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m FinalizeDeviceClaimMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalFinalizeDeviceClaimInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalFinalizeDeviceClaimInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m FinalizeDeviceClaimMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "FinalizeDeviceClaim.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetDeviceMethodsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetDeviceMethodsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetDeviceMethodsInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetDeviceMethodsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetDeviceMethods.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m InitiateDeviceClaimMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalInitiateDeviceClaimInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalInitiateDeviceClaimInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m InitiateDeviceClaimMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "InitiateDeviceClaim.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m InvokeDeviceMethodMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalInvokeDeviceMethodInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalInvokeDeviceMethodInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m InvokeDeviceMethodMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "InvokeDeviceMethod.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListDeviceEventsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListDeviceEventsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListDeviceEventsInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListDeviceEventsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListDeviceEvents.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListDevicesMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListDevicesInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListDevicesInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListDevicesMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListDevices.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListTagsForResourceMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListTagsForResourceInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListTagsForResourceInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListTagsForResourceMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListTagsForResource.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m TagResourceMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalTagResourceInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalTagResourceInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m TagResourceMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "TagResource.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UnclaimDeviceMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUnclaimDeviceInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUnclaimDeviceInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UnclaimDeviceMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UnclaimDevice.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UntagResourceMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUntagResourceInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUntagResourceInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UntagResourceMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UntagResource.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UpdateDeviceStateMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUpdateDeviceStateInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUpdateDeviceStateInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UpdateDeviceStateMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UpdateDeviceState.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}
