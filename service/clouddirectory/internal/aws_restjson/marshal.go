// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

// Package aws_restjson service, marshal.go contains the generated operation marshalers and methods on it.

package aws_restjson

import (
	"bytes"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/awserr"
	"github.com/aws/aws-sdk-go-v2/private/protocol/jsonrpc"
	"github.com/aws/aws-sdk-go-v2/private/protocol/rest"
	"github.com/aws/aws-sdk-go-v2/service/clouddirectory/types"
)

var _ bytes.Buffer
var _ awserr.Error

// AddFacetToObjectMarshaler defines marshaler for AddFacetToObject operation
type AddFacetToObjectMarshaler struct {
	Input *types.AddFacetToObjectInput
}

// ApplySchemaMarshaler defines marshaler for ApplySchema operation
type ApplySchemaMarshaler struct {
	Input *types.ApplySchemaInput
}

// AttachObjectMarshaler defines marshaler for AttachObject operation
type AttachObjectMarshaler struct {
	Input *types.AttachObjectInput
}

// AttachPolicyMarshaler defines marshaler for AttachPolicy operation
type AttachPolicyMarshaler struct {
	Input *types.AttachPolicyInput
}

// AttachToIndexMarshaler defines marshaler for AttachToIndex operation
type AttachToIndexMarshaler struct {
	Input *types.AttachToIndexInput
}

// AttachTypedLinkMarshaler defines marshaler for AttachTypedLink operation
type AttachTypedLinkMarshaler struct {
	Input *types.AttachTypedLinkInput
}

// BatchReadMarshaler defines marshaler for BatchRead operation
type BatchReadMarshaler struct {
	Input *types.BatchReadInput
}

// BatchWriteMarshaler defines marshaler for BatchWrite operation
type BatchWriteMarshaler struct {
	Input *types.BatchWriteInput
}

// CreateDirectoryMarshaler defines marshaler for CreateDirectory operation
type CreateDirectoryMarshaler struct {
	Input *types.CreateDirectoryInput
}

// CreateFacetMarshaler defines marshaler for CreateFacet operation
type CreateFacetMarshaler struct {
	Input *types.CreateFacetInput
}

// CreateIndexMarshaler defines marshaler for CreateIndex operation
type CreateIndexMarshaler struct {
	Input *types.CreateIndexInput
}

// CreateObjectMarshaler defines marshaler for CreateObject operation
type CreateObjectMarshaler struct {
	Input *types.CreateObjectInput
}

// CreateSchemaMarshaler defines marshaler for CreateSchema operation
type CreateSchemaMarshaler struct {
	Input *types.CreateSchemaInput
}

// CreateTypedLinkFacetMarshaler defines marshaler for CreateTypedLinkFacet operation
type CreateTypedLinkFacetMarshaler struct {
	Input *types.CreateTypedLinkFacetInput
}

// DeleteDirectoryMarshaler defines marshaler for DeleteDirectory operation
type DeleteDirectoryMarshaler struct {
	Input *types.DeleteDirectoryInput
}

// DeleteFacetMarshaler defines marshaler for DeleteFacet operation
type DeleteFacetMarshaler struct {
	Input *types.DeleteFacetInput
}

// DeleteObjectMarshaler defines marshaler for DeleteObject operation
type DeleteObjectMarshaler struct {
	Input *types.DeleteObjectInput
}

// DeleteSchemaMarshaler defines marshaler for DeleteSchema operation
type DeleteSchemaMarshaler struct {
	Input *types.DeleteSchemaInput
}

// DeleteTypedLinkFacetMarshaler defines marshaler for DeleteTypedLinkFacet operation
type DeleteTypedLinkFacetMarshaler struct {
	Input *types.DeleteTypedLinkFacetInput
}

// DetachFromIndexMarshaler defines marshaler for DetachFromIndex operation
type DetachFromIndexMarshaler struct {
	Input *types.DetachFromIndexInput
}

// DetachObjectMarshaler defines marshaler for DetachObject operation
type DetachObjectMarshaler struct {
	Input *types.DetachObjectInput
}

// DetachPolicyMarshaler defines marshaler for DetachPolicy operation
type DetachPolicyMarshaler struct {
	Input *types.DetachPolicyInput
}

// DetachTypedLinkMarshaler defines marshaler for DetachTypedLink operation
type DetachTypedLinkMarshaler struct {
	Input *types.DetachTypedLinkInput
}

// DisableDirectoryMarshaler defines marshaler for DisableDirectory operation
type DisableDirectoryMarshaler struct {
	Input *types.DisableDirectoryInput
}

// EnableDirectoryMarshaler defines marshaler for EnableDirectory operation
type EnableDirectoryMarshaler struct {
	Input *types.EnableDirectoryInput
}

// GetAppliedSchemaVersionMarshaler defines marshaler for GetAppliedSchemaVersion operation
type GetAppliedSchemaVersionMarshaler struct {
	Input *types.GetAppliedSchemaVersionInput
}

// GetDirectoryMarshaler defines marshaler for GetDirectory operation
type GetDirectoryMarshaler struct {
	Input *types.GetDirectoryInput
}

// GetFacetMarshaler defines marshaler for GetFacet operation
type GetFacetMarshaler struct {
	Input *types.GetFacetInput
}

// GetLinkAttributesMarshaler defines marshaler for GetLinkAttributes operation
type GetLinkAttributesMarshaler struct {
	Input *types.GetLinkAttributesInput
}

// GetObjectAttributesMarshaler defines marshaler for GetObjectAttributes operation
type GetObjectAttributesMarshaler struct {
	Input *types.GetObjectAttributesInput
}

// GetObjectInformationMarshaler defines marshaler for GetObjectInformation operation
type GetObjectInformationMarshaler struct {
	Input *types.GetObjectInformationInput
}

// GetSchemaAsJsonMarshaler defines marshaler for GetSchemaAsJson operation
type GetSchemaAsJsonMarshaler struct {
	Input *types.GetSchemaAsJsonInput
}

// GetTypedLinkFacetInformationMarshaler defines marshaler for GetTypedLinkFacetInformation operation
type GetTypedLinkFacetInformationMarshaler struct {
	Input *types.GetTypedLinkFacetInformationInput
}

// ListAppliedSchemaArnsMarshaler defines marshaler for ListAppliedSchemaArns operation
type ListAppliedSchemaArnsMarshaler struct {
	Input *types.ListAppliedSchemaArnsInput
}

// ListAttachedIndicesMarshaler defines marshaler for ListAttachedIndices operation
type ListAttachedIndicesMarshaler struct {
	Input *types.ListAttachedIndicesInput
}

// ListDevelopmentSchemaArnsMarshaler defines marshaler for ListDevelopmentSchemaArns operation
type ListDevelopmentSchemaArnsMarshaler struct {
	Input *types.ListDevelopmentSchemaArnsInput
}

// ListDirectoriesMarshaler defines marshaler for ListDirectories operation
type ListDirectoriesMarshaler struct {
	Input *types.ListDirectoriesInput
}

// ListFacetAttributesMarshaler defines marshaler for ListFacetAttributes operation
type ListFacetAttributesMarshaler struct {
	Input *types.ListFacetAttributesInput
}

// ListFacetNamesMarshaler defines marshaler for ListFacetNames operation
type ListFacetNamesMarshaler struct {
	Input *types.ListFacetNamesInput
}

// ListIncomingTypedLinksMarshaler defines marshaler for ListIncomingTypedLinks operation
type ListIncomingTypedLinksMarshaler struct {
	Input *types.ListIncomingTypedLinksInput
}

// ListIndexMarshaler defines marshaler for ListIndex operation
type ListIndexMarshaler struct {
	Input *types.ListIndexInput
}

// ListManagedSchemaArnsMarshaler defines marshaler for ListManagedSchemaArns operation
type ListManagedSchemaArnsMarshaler struct {
	Input *types.ListManagedSchemaArnsInput
}

// ListObjectAttributesMarshaler defines marshaler for ListObjectAttributes operation
type ListObjectAttributesMarshaler struct {
	Input *types.ListObjectAttributesInput
}

// ListObjectChildrenMarshaler defines marshaler for ListObjectChildren operation
type ListObjectChildrenMarshaler struct {
	Input *types.ListObjectChildrenInput
}

// ListObjectParentPathsMarshaler defines marshaler for ListObjectParentPaths operation
type ListObjectParentPathsMarshaler struct {
	Input *types.ListObjectParentPathsInput
}

// ListObjectParentsMarshaler defines marshaler for ListObjectParents operation
type ListObjectParentsMarshaler struct {
	Input *types.ListObjectParentsInput
}

// ListObjectPoliciesMarshaler defines marshaler for ListObjectPolicies operation
type ListObjectPoliciesMarshaler struct {
	Input *types.ListObjectPoliciesInput
}

// ListOutgoingTypedLinksMarshaler defines marshaler for ListOutgoingTypedLinks operation
type ListOutgoingTypedLinksMarshaler struct {
	Input *types.ListOutgoingTypedLinksInput
}

// ListPolicyAttachmentsMarshaler defines marshaler for ListPolicyAttachments operation
type ListPolicyAttachmentsMarshaler struct {
	Input *types.ListPolicyAttachmentsInput
}

// ListPublishedSchemaArnsMarshaler defines marshaler for ListPublishedSchemaArns operation
type ListPublishedSchemaArnsMarshaler struct {
	Input *types.ListPublishedSchemaArnsInput
}

// ListTagsForResourceMarshaler defines marshaler for ListTagsForResource operation
type ListTagsForResourceMarshaler struct {
	Input *types.ListTagsForResourceInput
}

// ListTypedLinkFacetAttributesMarshaler defines marshaler for ListTypedLinkFacetAttributes operation
type ListTypedLinkFacetAttributesMarshaler struct {
	Input *types.ListTypedLinkFacetAttributesInput
}

// ListTypedLinkFacetNamesMarshaler defines marshaler for ListTypedLinkFacetNames operation
type ListTypedLinkFacetNamesMarshaler struct {
	Input *types.ListTypedLinkFacetNamesInput
}

// LookupPolicyMarshaler defines marshaler for LookupPolicy operation
type LookupPolicyMarshaler struct {
	Input *types.LookupPolicyInput
}

// PublishSchemaMarshaler defines marshaler for PublishSchema operation
type PublishSchemaMarshaler struct {
	Input *types.PublishSchemaInput
}

// PutSchemaFromJsonMarshaler defines marshaler for PutSchemaFromJson operation
type PutSchemaFromJsonMarshaler struct {
	Input *types.PutSchemaFromJsonInput
}

// RemoveFacetFromObjectMarshaler defines marshaler for RemoveFacetFromObject operation
type RemoveFacetFromObjectMarshaler struct {
	Input *types.RemoveFacetFromObjectInput
}

// TagResourceMarshaler defines marshaler for TagResource operation
type TagResourceMarshaler struct {
	Input *types.TagResourceInput
}

// UntagResourceMarshaler defines marshaler for UntagResource operation
type UntagResourceMarshaler struct {
	Input *types.UntagResourceInput
}

// UpdateFacetMarshaler defines marshaler for UpdateFacet operation
type UpdateFacetMarshaler struct {
	Input *types.UpdateFacetInput
}

// UpdateLinkAttributesMarshaler defines marshaler for UpdateLinkAttributes operation
type UpdateLinkAttributesMarshaler struct {
	Input *types.UpdateLinkAttributesInput
}

// UpdateObjectAttributesMarshaler defines marshaler for UpdateObjectAttributes operation
type UpdateObjectAttributesMarshaler struct {
	Input *types.UpdateObjectAttributesInput
}

// UpdateSchemaMarshaler defines marshaler for UpdateSchema operation
type UpdateSchemaMarshaler struct {
	Input *types.UpdateSchemaInput
}

// UpdateTypedLinkFacetMarshaler defines marshaler for UpdateTypedLinkFacet operation
type UpdateTypedLinkFacetMarshaler struct {
	Input *types.UpdateTypedLinkFacetInput
}

// UpgradeAppliedSchemaMarshaler defines marshaler for UpgradeAppliedSchema operation
type UpgradeAppliedSchemaMarshaler struct {
	Input *types.UpgradeAppliedSchemaInput
}

// UpgradePublishedSchemaMarshaler defines marshaler for UpgradePublishedSchema operation
type UpgradePublishedSchemaMarshaler struct {
	Input *types.UpgradePublishedSchemaInput
}

func MarshalAddFacetToObjectInputShapeAWSREST(v *types.AddFacetToObjectInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalAddFacetToObjectInputShapeAWSJSON(v *types.AddFacetToObjectInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalApplySchemaInputShapeAWSREST(v *types.ApplySchemaInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalApplySchemaInputShapeAWSJSON(v *types.ApplySchemaInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalAttachObjectInputShapeAWSREST(v *types.AttachObjectInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalAttachObjectInputShapeAWSJSON(v *types.AttachObjectInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalAttachPolicyInputShapeAWSREST(v *types.AttachPolicyInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalAttachPolicyInputShapeAWSJSON(v *types.AttachPolicyInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalAttachToIndexInputShapeAWSREST(v *types.AttachToIndexInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalAttachToIndexInputShapeAWSJSON(v *types.AttachToIndexInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalAttachTypedLinkInputShapeAWSREST(v *types.AttachTypedLinkInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalAttachTypedLinkInputShapeAWSJSON(v *types.AttachTypedLinkInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalBatchReadInputShapeAWSREST(v *types.BatchReadInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalBatchReadInputShapeAWSJSON(v *types.BatchReadInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalBatchWriteInputShapeAWSREST(v *types.BatchWriteInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalBatchWriteInputShapeAWSJSON(v *types.BatchWriteInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalCreateDirectoryInputShapeAWSREST(v *types.CreateDirectoryInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCreateDirectoryInputShapeAWSJSON(v *types.CreateDirectoryInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalCreateFacetInputShapeAWSREST(v *types.CreateFacetInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCreateFacetInputShapeAWSJSON(v *types.CreateFacetInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalCreateIndexInputShapeAWSREST(v *types.CreateIndexInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCreateIndexInputShapeAWSJSON(v *types.CreateIndexInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalCreateObjectInputShapeAWSREST(v *types.CreateObjectInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCreateObjectInputShapeAWSJSON(v *types.CreateObjectInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalCreateSchemaInputShapeAWSREST(v *types.CreateSchemaInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCreateSchemaInputShapeAWSJSON(v *types.CreateSchemaInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalCreateTypedLinkFacetInputShapeAWSREST(v *types.CreateTypedLinkFacetInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCreateTypedLinkFacetInputShapeAWSJSON(v *types.CreateTypedLinkFacetInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDeleteDirectoryInputShapeAWSREST(v *types.DeleteDirectoryInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeleteDirectoryInputShapeAWSJSON(v *types.DeleteDirectoryInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDeleteFacetInputShapeAWSREST(v *types.DeleteFacetInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeleteFacetInputShapeAWSJSON(v *types.DeleteFacetInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDeleteObjectInputShapeAWSREST(v *types.DeleteObjectInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeleteObjectInputShapeAWSJSON(v *types.DeleteObjectInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDeleteSchemaInputShapeAWSREST(v *types.DeleteSchemaInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeleteSchemaInputShapeAWSJSON(v *types.DeleteSchemaInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDeleteTypedLinkFacetInputShapeAWSREST(v *types.DeleteTypedLinkFacetInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeleteTypedLinkFacetInputShapeAWSJSON(v *types.DeleteTypedLinkFacetInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDetachFromIndexInputShapeAWSREST(v *types.DetachFromIndexInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDetachFromIndexInputShapeAWSJSON(v *types.DetachFromIndexInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDetachObjectInputShapeAWSREST(v *types.DetachObjectInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDetachObjectInputShapeAWSJSON(v *types.DetachObjectInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDetachPolicyInputShapeAWSREST(v *types.DetachPolicyInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDetachPolicyInputShapeAWSJSON(v *types.DetachPolicyInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDetachTypedLinkInputShapeAWSREST(v *types.DetachTypedLinkInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDetachTypedLinkInputShapeAWSJSON(v *types.DetachTypedLinkInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDisableDirectoryInputShapeAWSREST(v *types.DisableDirectoryInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDisableDirectoryInputShapeAWSJSON(v *types.DisableDirectoryInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalEnableDirectoryInputShapeAWSREST(v *types.EnableDirectoryInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalEnableDirectoryInputShapeAWSJSON(v *types.EnableDirectoryInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalGetAppliedSchemaVersionInputShapeAWSREST(v *types.GetAppliedSchemaVersionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetAppliedSchemaVersionInputShapeAWSJSON(v *types.GetAppliedSchemaVersionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalGetDirectoryInputShapeAWSREST(v *types.GetDirectoryInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetDirectoryInputShapeAWSJSON(v *types.GetDirectoryInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalGetFacetInputShapeAWSREST(v *types.GetFacetInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetFacetInputShapeAWSJSON(v *types.GetFacetInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalGetLinkAttributesInputShapeAWSREST(v *types.GetLinkAttributesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetLinkAttributesInputShapeAWSJSON(v *types.GetLinkAttributesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalGetObjectAttributesInputShapeAWSREST(v *types.GetObjectAttributesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetObjectAttributesInputShapeAWSJSON(v *types.GetObjectAttributesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalGetObjectInformationInputShapeAWSREST(v *types.GetObjectInformationInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetObjectInformationInputShapeAWSJSON(v *types.GetObjectInformationInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalGetSchemaAsJsonInputShapeAWSREST(v *types.GetSchemaAsJsonInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetSchemaAsJsonInputShapeAWSJSON(v *types.GetSchemaAsJsonInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalGetTypedLinkFacetInformationInputShapeAWSREST(v *types.GetTypedLinkFacetInformationInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetTypedLinkFacetInformationInputShapeAWSJSON(v *types.GetTypedLinkFacetInformationInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListAppliedSchemaArnsInputShapeAWSREST(v *types.ListAppliedSchemaArnsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListAppliedSchemaArnsInputShapeAWSJSON(v *types.ListAppliedSchemaArnsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListAttachedIndicesInputShapeAWSREST(v *types.ListAttachedIndicesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListAttachedIndicesInputShapeAWSJSON(v *types.ListAttachedIndicesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListDevelopmentSchemaArnsInputShapeAWSREST(v *types.ListDevelopmentSchemaArnsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListDevelopmentSchemaArnsInputShapeAWSJSON(v *types.ListDevelopmentSchemaArnsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListDirectoriesInputShapeAWSREST(v *types.ListDirectoriesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListDirectoriesInputShapeAWSJSON(v *types.ListDirectoriesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListFacetAttributesInputShapeAWSREST(v *types.ListFacetAttributesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListFacetAttributesInputShapeAWSJSON(v *types.ListFacetAttributesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListFacetNamesInputShapeAWSREST(v *types.ListFacetNamesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListFacetNamesInputShapeAWSJSON(v *types.ListFacetNamesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListIncomingTypedLinksInputShapeAWSREST(v *types.ListIncomingTypedLinksInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListIncomingTypedLinksInputShapeAWSJSON(v *types.ListIncomingTypedLinksInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListIndexInputShapeAWSREST(v *types.ListIndexInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListIndexInputShapeAWSJSON(v *types.ListIndexInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListManagedSchemaArnsInputShapeAWSREST(v *types.ListManagedSchemaArnsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListManagedSchemaArnsInputShapeAWSJSON(v *types.ListManagedSchemaArnsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListObjectAttributesInputShapeAWSREST(v *types.ListObjectAttributesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListObjectAttributesInputShapeAWSJSON(v *types.ListObjectAttributesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListObjectChildrenInputShapeAWSREST(v *types.ListObjectChildrenInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListObjectChildrenInputShapeAWSJSON(v *types.ListObjectChildrenInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListObjectParentPathsInputShapeAWSREST(v *types.ListObjectParentPathsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListObjectParentPathsInputShapeAWSJSON(v *types.ListObjectParentPathsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListObjectParentsInputShapeAWSREST(v *types.ListObjectParentsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListObjectParentsInputShapeAWSJSON(v *types.ListObjectParentsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListObjectPoliciesInputShapeAWSREST(v *types.ListObjectPoliciesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListObjectPoliciesInputShapeAWSJSON(v *types.ListObjectPoliciesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListOutgoingTypedLinksInputShapeAWSREST(v *types.ListOutgoingTypedLinksInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListOutgoingTypedLinksInputShapeAWSJSON(v *types.ListOutgoingTypedLinksInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListPolicyAttachmentsInputShapeAWSREST(v *types.ListPolicyAttachmentsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListPolicyAttachmentsInputShapeAWSJSON(v *types.ListPolicyAttachmentsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListPublishedSchemaArnsInputShapeAWSREST(v *types.ListPublishedSchemaArnsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListPublishedSchemaArnsInputShapeAWSJSON(v *types.ListPublishedSchemaArnsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListTagsForResourceInputShapeAWSREST(v *types.ListTagsForResourceInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListTagsForResourceInputShapeAWSJSON(v *types.ListTagsForResourceInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListTypedLinkFacetAttributesInputShapeAWSREST(v *types.ListTypedLinkFacetAttributesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListTypedLinkFacetAttributesInputShapeAWSJSON(v *types.ListTypedLinkFacetAttributesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListTypedLinkFacetNamesInputShapeAWSREST(v *types.ListTypedLinkFacetNamesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListTypedLinkFacetNamesInputShapeAWSJSON(v *types.ListTypedLinkFacetNamesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalLookupPolicyInputShapeAWSREST(v *types.LookupPolicyInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalLookupPolicyInputShapeAWSJSON(v *types.LookupPolicyInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalPublishSchemaInputShapeAWSREST(v *types.PublishSchemaInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalPublishSchemaInputShapeAWSJSON(v *types.PublishSchemaInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalPutSchemaFromJsonInputShapeAWSREST(v *types.PutSchemaFromJsonInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalPutSchemaFromJsonInputShapeAWSJSON(v *types.PutSchemaFromJsonInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalRemoveFacetFromObjectInputShapeAWSREST(v *types.RemoveFacetFromObjectInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalRemoveFacetFromObjectInputShapeAWSJSON(v *types.RemoveFacetFromObjectInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalTagResourceInputShapeAWSREST(v *types.TagResourceInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalTagResourceInputShapeAWSJSON(v *types.TagResourceInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalUntagResourceInputShapeAWSREST(v *types.UntagResourceInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUntagResourceInputShapeAWSJSON(v *types.UntagResourceInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalUpdateFacetInputShapeAWSREST(v *types.UpdateFacetInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUpdateFacetInputShapeAWSJSON(v *types.UpdateFacetInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalUpdateLinkAttributesInputShapeAWSREST(v *types.UpdateLinkAttributesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUpdateLinkAttributesInputShapeAWSJSON(v *types.UpdateLinkAttributesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalUpdateObjectAttributesInputShapeAWSREST(v *types.UpdateObjectAttributesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUpdateObjectAttributesInputShapeAWSJSON(v *types.UpdateObjectAttributesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalUpdateSchemaInputShapeAWSREST(v *types.UpdateSchemaInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUpdateSchemaInputShapeAWSJSON(v *types.UpdateSchemaInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalUpdateTypedLinkFacetInputShapeAWSREST(v *types.UpdateTypedLinkFacetInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUpdateTypedLinkFacetInputShapeAWSJSON(v *types.UpdateTypedLinkFacetInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalUpgradeAppliedSchemaInputShapeAWSREST(v *types.UpgradeAppliedSchemaInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUpgradeAppliedSchemaInputShapeAWSJSON(v *types.UpgradeAppliedSchemaInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalUpgradePublishedSchemaInputShapeAWSREST(v *types.UpgradePublishedSchemaInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUpgradePublishedSchemaInputShapeAWSJSON(v *types.UpgradePublishedSchemaInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}
func (m AddFacetToObjectMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalAddFacetToObjectInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalAddFacetToObjectInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m AddFacetToObjectMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "AddFacetToObject.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ApplySchemaMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalApplySchemaInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalApplySchemaInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ApplySchemaMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ApplySchema.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m AttachObjectMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalAttachObjectInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalAttachObjectInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m AttachObjectMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "AttachObject.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m AttachPolicyMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalAttachPolicyInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalAttachPolicyInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m AttachPolicyMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "AttachPolicy.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m AttachToIndexMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalAttachToIndexInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalAttachToIndexInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m AttachToIndexMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "AttachToIndex.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m AttachTypedLinkMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalAttachTypedLinkInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalAttachTypedLinkInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m AttachTypedLinkMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "AttachTypedLink.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m BatchReadMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalBatchReadInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalBatchReadInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m BatchReadMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "BatchRead.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m BatchWriteMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalBatchWriteInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalBatchWriteInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m BatchWriteMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "BatchWrite.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m CreateDirectoryMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCreateDirectoryInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCreateDirectoryInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CreateDirectoryMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CreateDirectory.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m CreateFacetMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCreateFacetInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCreateFacetInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CreateFacetMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CreateFacet.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m CreateIndexMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCreateIndexInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCreateIndexInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CreateIndexMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CreateIndex.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m CreateObjectMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCreateObjectInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCreateObjectInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CreateObjectMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CreateObject.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m CreateSchemaMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCreateSchemaInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCreateSchemaInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CreateSchemaMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CreateSchema.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m CreateTypedLinkFacetMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCreateTypedLinkFacetInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCreateTypedLinkFacetInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CreateTypedLinkFacetMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CreateTypedLinkFacet.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteDirectoryMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteDirectoryInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeleteDirectoryInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteDirectoryMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteDirectory.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteFacetMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteFacetInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeleteFacetInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteFacetMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteFacet.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteObjectMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteObjectInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeleteObjectInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteObjectMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteObject.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteSchemaMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteSchemaInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeleteSchemaInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteSchemaMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteSchema.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteTypedLinkFacetMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteTypedLinkFacetInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeleteTypedLinkFacetInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteTypedLinkFacetMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteTypedLinkFacet.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DetachFromIndexMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDetachFromIndexInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDetachFromIndexInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DetachFromIndexMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DetachFromIndex.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DetachObjectMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDetachObjectInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDetachObjectInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DetachObjectMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DetachObject.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DetachPolicyMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDetachPolicyInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDetachPolicyInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DetachPolicyMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DetachPolicy.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DetachTypedLinkMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDetachTypedLinkInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDetachTypedLinkInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DetachTypedLinkMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DetachTypedLink.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DisableDirectoryMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDisableDirectoryInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDisableDirectoryInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DisableDirectoryMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DisableDirectory.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m EnableDirectoryMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalEnableDirectoryInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalEnableDirectoryInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m EnableDirectoryMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "EnableDirectory.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetAppliedSchemaVersionMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetAppliedSchemaVersionInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetAppliedSchemaVersionInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetAppliedSchemaVersionMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetAppliedSchemaVersion.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetDirectoryMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetDirectoryInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetDirectoryInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetDirectoryMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetDirectory.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetFacetMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetFacetInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetFacetInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetFacetMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetFacet.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetLinkAttributesMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetLinkAttributesInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetLinkAttributesInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetLinkAttributesMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetLinkAttributes.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetObjectAttributesMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetObjectAttributesInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetObjectAttributesInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetObjectAttributesMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetObjectAttributes.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetObjectInformationMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetObjectInformationInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetObjectInformationInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetObjectInformationMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetObjectInformation.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetSchemaAsJsonMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetSchemaAsJsonInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetSchemaAsJsonInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetSchemaAsJsonMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetSchemaAsJson.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetTypedLinkFacetInformationMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetTypedLinkFacetInformationInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetTypedLinkFacetInformationInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetTypedLinkFacetInformationMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetTypedLinkFacetInformation.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListAppliedSchemaArnsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListAppliedSchemaArnsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListAppliedSchemaArnsInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListAppliedSchemaArnsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListAppliedSchemaArns.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListAttachedIndicesMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListAttachedIndicesInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListAttachedIndicesInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListAttachedIndicesMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListAttachedIndices.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListDevelopmentSchemaArnsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListDevelopmentSchemaArnsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListDevelopmentSchemaArnsInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListDevelopmentSchemaArnsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListDevelopmentSchemaArns.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListDirectoriesMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListDirectoriesInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListDirectoriesInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListDirectoriesMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListDirectories.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListFacetAttributesMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListFacetAttributesInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListFacetAttributesInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListFacetAttributesMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListFacetAttributes.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListFacetNamesMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListFacetNamesInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListFacetNamesInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListFacetNamesMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListFacetNames.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListIncomingTypedLinksMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListIncomingTypedLinksInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListIncomingTypedLinksInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListIncomingTypedLinksMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListIncomingTypedLinks.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListIndexMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListIndexInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListIndexInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListIndexMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListIndex.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListManagedSchemaArnsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListManagedSchemaArnsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListManagedSchemaArnsInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListManagedSchemaArnsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListManagedSchemaArns.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListObjectAttributesMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListObjectAttributesInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListObjectAttributesInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListObjectAttributesMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListObjectAttributes.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListObjectChildrenMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListObjectChildrenInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListObjectChildrenInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListObjectChildrenMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListObjectChildren.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListObjectParentPathsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListObjectParentPathsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListObjectParentPathsInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListObjectParentPathsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListObjectParentPaths.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListObjectParentsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListObjectParentsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListObjectParentsInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListObjectParentsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListObjectParents.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListObjectPoliciesMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListObjectPoliciesInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListObjectPoliciesInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListObjectPoliciesMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListObjectPolicies.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListOutgoingTypedLinksMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListOutgoingTypedLinksInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListOutgoingTypedLinksInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListOutgoingTypedLinksMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListOutgoingTypedLinks.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListPolicyAttachmentsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListPolicyAttachmentsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListPolicyAttachmentsInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListPolicyAttachmentsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListPolicyAttachments.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListPublishedSchemaArnsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListPublishedSchemaArnsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListPublishedSchemaArnsInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListPublishedSchemaArnsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListPublishedSchemaArns.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListTagsForResourceMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListTagsForResourceInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListTagsForResourceInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListTagsForResourceMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListTagsForResource.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListTypedLinkFacetAttributesMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListTypedLinkFacetAttributesInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListTypedLinkFacetAttributesInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListTypedLinkFacetAttributesMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListTypedLinkFacetAttributes.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListTypedLinkFacetNamesMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListTypedLinkFacetNamesInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListTypedLinkFacetNamesInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListTypedLinkFacetNamesMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListTypedLinkFacetNames.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m LookupPolicyMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalLookupPolicyInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalLookupPolicyInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m LookupPolicyMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "LookupPolicy.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m PublishSchemaMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalPublishSchemaInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalPublishSchemaInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m PublishSchemaMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "PublishSchema.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m PutSchemaFromJsonMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalPutSchemaFromJsonInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalPutSchemaFromJsonInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m PutSchemaFromJsonMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "PutSchemaFromJson.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m RemoveFacetFromObjectMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalRemoveFacetFromObjectInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalRemoveFacetFromObjectInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m RemoveFacetFromObjectMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "RemoveFacetFromObject.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m TagResourceMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalTagResourceInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalTagResourceInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m TagResourceMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "TagResource.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UntagResourceMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUntagResourceInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUntagResourceInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UntagResourceMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UntagResource.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UpdateFacetMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUpdateFacetInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUpdateFacetInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UpdateFacetMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UpdateFacet.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UpdateLinkAttributesMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUpdateLinkAttributesInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUpdateLinkAttributesInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UpdateLinkAttributesMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UpdateLinkAttributes.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UpdateObjectAttributesMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUpdateObjectAttributesInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUpdateObjectAttributesInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UpdateObjectAttributesMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UpdateObjectAttributes.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UpdateSchemaMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUpdateSchemaInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUpdateSchemaInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UpdateSchemaMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UpdateSchema.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UpdateTypedLinkFacetMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUpdateTypedLinkFacetInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUpdateTypedLinkFacetInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UpdateTypedLinkFacetMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UpdateTypedLinkFacet.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UpgradeAppliedSchemaMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUpgradeAppliedSchemaInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUpgradeAppliedSchemaInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UpgradeAppliedSchemaMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UpgradeAppliedSchema.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UpgradePublishedSchemaMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUpgradePublishedSchemaInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUpgradePublishedSchemaInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UpgradePublishedSchemaMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UpgradePublishedSchema.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}
