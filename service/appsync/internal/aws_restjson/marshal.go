// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

// Package aws_restjson service, marshal.go contains the generated operation marshalers and methods on it.

package aws_restjson

import (
	"bytes"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/awserr"
	"github.com/aws/aws-sdk-go-v2/private/protocol/jsonrpc"
	"github.com/aws/aws-sdk-go-v2/private/protocol/rest"
	"github.com/aws/aws-sdk-go-v2/service/appsync/types"
)

var _ bytes.Buffer
var _ awserr.Error

// CreateApiKeyMarshaler defines marshaler for CreateApiKey operation
type CreateApiKeyMarshaler struct {
	Input *types.CreateApiKeyInput
}

// CreateDataSourceMarshaler defines marshaler for CreateDataSource operation
type CreateDataSourceMarshaler struct {
	Input *types.CreateDataSourceInput
}

// CreateFunctionMarshaler defines marshaler for CreateFunction operation
type CreateFunctionMarshaler struct {
	Input *types.CreateFunctionInput
}

// CreateGraphqlApiMarshaler defines marshaler for CreateGraphqlApi operation
type CreateGraphqlApiMarshaler struct {
	Input *types.CreateGraphqlApiInput
}

// CreateResolverMarshaler defines marshaler for CreateResolver operation
type CreateResolverMarshaler struct {
	Input *types.CreateResolverInput
}

// CreateTypeMarshaler defines marshaler for CreateType operation
type CreateTypeMarshaler struct {
	Input *types.CreateTypeInput
}

// DeleteApiKeyMarshaler defines marshaler for DeleteApiKey operation
type DeleteApiKeyMarshaler struct {
	Input *types.DeleteApiKeyInput
}

// DeleteDataSourceMarshaler defines marshaler for DeleteDataSource operation
type DeleteDataSourceMarshaler struct {
	Input *types.DeleteDataSourceInput
}

// DeleteFunctionMarshaler defines marshaler for DeleteFunction operation
type DeleteFunctionMarshaler struct {
	Input *types.DeleteFunctionInput
}

// DeleteGraphqlApiMarshaler defines marshaler for DeleteGraphqlApi operation
type DeleteGraphqlApiMarshaler struct {
	Input *types.DeleteGraphqlApiInput
}

// DeleteResolverMarshaler defines marshaler for DeleteResolver operation
type DeleteResolverMarshaler struct {
	Input *types.DeleteResolverInput
}

// DeleteTypeMarshaler defines marshaler for DeleteType operation
type DeleteTypeMarshaler struct {
	Input *types.DeleteTypeInput
}

// GetDataSourceMarshaler defines marshaler for GetDataSource operation
type GetDataSourceMarshaler struct {
	Input *types.GetDataSourceInput
}

// GetFunctionMarshaler defines marshaler for GetFunction operation
type GetFunctionMarshaler struct {
	Input *types.GetFunctionInput
}

// GetGraphqlApiMarshaler defines marshaler for GetGraphqlApi operation
type GetGraphqlApiMarshaler struct {
	Input *types.GetGraphqlApiInput
}

// GetIntrospectionSchemaMarshaler defines marshaler for GetIntrospectionSchema operation
type GetIntrospectionSchemaMarshaler struct {
	Input *types.GetIntrospectionSchemaInput
}

// GetResolverMarshaler defines marshaler for GetResolver operation
type GetResolverMarshaler struct {
	Input *types.GetResolverInput
}

// GetSchemaCreationStatusMarshaler defines marshaler for GetSchemaCreationStatus operation
type GetSchemaCreationStatusMarshaler struct {
	Input *types.GetSchemaCreationStatusInput
}

// GetTypeMarshaler defines marshaler for GetType operation
type GetTypeMarshaler struct {
	Input *types.GetTypeInput
}

// ListApiKeysMarshaler defines marshaler for ListApiKeys operation
type ListApiKeysMarshaler struct {
	Input *types.ListApiKeysInput
}

// ListDataSourcesMarshaler defines marshaler for ListDataSources operation
type ListDataSourcesMarshaler struct {
	Input *types.ListDataSourcesInput
}

// ListFunctionsMarshaler defines marshaler for ListFunctions operation
type ListFunctionsMarshaler struct {
	Input *types.ListFunctionsInput
}

// ListGraphqlApisMarshaler defines marshaler for ListGraphqlApis operation
type ListGraphqlApisMarshaler struct {
	Input *types.ListGraphqlApisInput
}

// ListResolversMarshaler defines marshaler for ListResolvers operation
type ListResolversMarshaler struct {
	Input *types.ListResolversInput
}

// ListResolversByFunctionMarshaler defines marshaler for ListResolversByFunction operation
type ListResolversByFunctionMarshaler struct {
	Input *types.ListResolversByFunctionInput
}

// ListTagsForResourceMarshaler defines marshaler for ListTagsForResource operation
type ListTagsForResourceMarshaler struct {
	Input *types.ListTagsForResourceInput
}

// ListTypesMarshaler defines marshaler for ListTypes operation
type ListTypesMarshaler struct {
	Input *types.ListTypesInput
}

// StartSchemaCreationMarshaler defines marshaler for StartSchemaCreation operation
type StartSchemaCreationMarshaler struct {
	Input *types.StartSchemaCreationInput
}

// TagResourceMarshaler defines marshaler for TagResource operation
type TagResourceMarshaler struct {
	Input *types.TagResourceInput
}

// UntagResourceMarshaler defines marshaler for UntagResource operation
type UntagResourceMarshaler struct {
	Input *types.UntagResourceInput
}

// UpdateApiKeyMarshaler defines marshaler for UpdateApiKey operation
type UpdateApiKeyMarshaler struct {
	Input *types.UpdateApiKeyInput
}

// UpdateDataSourceMarshaler defines marshaler for UpdateDataSource operation
type UpdateDataSourceMarshaler struct {
	Input *types.UpdateDataSourceInput
}

// UpdateFunctionMarshaler defines marshaler for UpdateFunction operation
type UpdateFunctionMarshaler struct {
	Input *types.UpdateFunctionInput
}

// UpdateGraphqlApiMarshaler defines marshaler for UpdateGraphqlApi operation
type UpdateGraphqlApiMarshaler struct {
	Input *types.UpdateGraphqlApiInput
}

// UpdateResolverMarshaler defines marshaler for UpdateResolver operation
type UpdateResolverMarshaler struct {
	Input *types.UpdateResolverInput
}

// UpdateTypeMarshaler defines marshaler for UpdateType operation
type UpdateTypeMarshaler struct {
	Input *types.UpdateTypeInput
}

func MarshalCreateApiKeyInputShapeAWSREST(v *types.CreateApiKeyInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCreateApiKeyInputShapeAWSJSON(v *types.CreateApiKeyInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalCreateDataSourceInputShapeAWSREST(v *types.CreateDataSourceInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCreateDataSourceInputShapeAWSJSON(v *types.CreateDataSourceInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalCreateFunctionInputShapeAWSREST(v *types.CreateFunctionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCreateFunctionInputShapeAWSJSON(v *types.CreateFunctionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalCreateGraphqlApiInputShapeAWSREST(v *types.CreateGraphqlApiInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCreateGraphqlApiInputShapeAWSJSON(v *types.CreateGraphqlApiInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalCreateResolverInputShapeAWSREST(v *types.CreateResolverInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCreateResolverInputShapeAWSJSON(v *types.CreateResolverInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalCreateTypeInputShapeAWSREST(v *types.CreateTypeInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCreateTypeInputShapeAWSJSON(v *types.CreateTypeInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDeleteApiKeyInputShapeAWSREST(v *types.DeleteApiKeyInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeleteApiKeyInputShapeAWSJSON(v *types.DeleteApiKeyInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDeleteDataSourceInputShapeAWSREST(v *types.DeleteDataSourceInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeleteDataSourceInputShapeAWSJSON(v *types.DeleteDataSourceInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDeleteFunctionInputShapeAWSREST(v *types.DeleteFunctionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeleteFunctionInputShapeAWSJSON(v *types.DeleteFunctionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDeleteGraphqlApiInputShapeAWSREST(v *types.DeleteGraphqlApiInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeleteGraphqlApiInputShapeAWSJSON(v *types.DeleteGraphqlApiInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDeleteResolverInputShapeAWSREST(v *types.DeleteResolverInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeleteResolverInputShapeAWSJSON(v *types.DeleteResolverInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDeleteTypeInputShapeAWSREST(v *types.DeleteTypeInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeleteTypeInputShapeAWSJSON(v *types.DeleteTypeInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalGetDataSourceInputShapeAWSREST(v *types.GetDataSourceInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetDataSourceInputShapeAWSJSON(v *types.GetDataSourceInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalGetFunctionInputShapeAWSREST(v *types.GetFunctionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetFunctionInputShapeAWSJSON(v *types.GetFunctionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalGetGraphqlApiInputShapeAWSREST(v *types.GetGraphqlApiInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetGraphqlApiInputShapeAWSJSON(v *types.GetGraphqlApiInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalGetIntrospectionSchemaInputShapeAWSREST(v *types.GetIntrospectionSchemaInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetIntrospectionSchemaInputShapeAWSJSON(v *types.GetIntrospectionSchemaInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalGetResolverInputShapeAWSREST(v *types.GetResolverInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetResolverInputShapeAWSJSON(v *types.GetResolverInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalGetSchemaCreationStatusInputShapeAWSREST(v *types.GetSchemaCreationStatusInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetSchemaCreationStatusInputShapeAWSJSON(v *types.GetSchemaCreationStatusInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalGetTypeInputShapeAWSREST(v *types.GetTypeInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetTypeInputShapeAWSJSON(v *types.GetTypeInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListApiKeysInputShapeAWSREST(v *types.ListApiKeysInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListApiKeysInputShapeAWSJSON(v *types.ListApiKeysInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListDataSourcesInputShapeAWSREST(v *types.ListDataSourcesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListDataSourcesInputShapeAWSJSON(v *types.ListDataSourcesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListFunctionsInputShapeAWSREST(v *types.ListFunctionsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListFunctionsInputShapeAWSJSON(v *types.ListFunctionsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListGraphqlApisInputShapeAWSREST(v *types.ListGraphqlApisInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListGraphqlApisInputShapeAWSJSON(v *types.ListGraphqlApisInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListResolversInputShapeAWSREST(v *types.ListResolversInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListResolversInputShapeAWSJSON(v *types.ListResolversInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListResolversByFunctionInputShapeAWSREST(v *types.ListResolversByFunctionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListResolversByFunctionInputShapeAWSJSON(v *types.ListResolversByFunctionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListTagsForResourceInputShapeAWSREST(v *types.ListTagsForResourceInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListTagsForResourceInputShapeAWSJSON(v *types.ListTagsForResourceInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListTypesInputShapeAWSREST(v *types.ListTypesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListTypesInputShapeAWSJSON(v *types.ListTypesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalStartSchemaCreationInputShapeAWSREST(v *types.StartSchemaCreationInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalStartSchemaCreationInputShapeAWSJSON(v *types.StartSchemaCreationInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalTagResourceInputShapeAWSREST(v *types.TagResourceInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalTagResourceInputShapeAWSJSON(v *types.TagResourceInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalUntagResourceInputShapeAWSREST(v *types.UntagResourceInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUntagResourceInputShapeAWSJSON(v *types.UntagResourceInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalUpdateApiKeyInputShapeAWSREST(v *types.UpdateApiKeyInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUpdateApiKeyInputShapeAWSJSON(v *types.UpdateApiKeyInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalUpdateDataSourceInputShapeAWSREST(v *types.UpdateDataSourceInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUpdateDataSourceInputShapeAWSJSON(v *types.UpdateDataSourceInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalUpdateFunctionInputShapeAWSREST(v *types.UpdateFunctionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUpdateFunctionInputShapeAWSJSON(v *types.UpdateFunctionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalUpdateGraphqlApiInputShapeAWSREST(v *types.UpdateGraphqlApiInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUpdateGraphqlApiInputShapeAWSJSON(v *types.UpdateGraphqlApiInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalUpdateResolverInputShapeAWSREST(v *types.UpdateResolverInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUpdateResolverInputShapeAWSJSON(v *types.UpdateResolverInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalUpdateTypeInputShapeAWSREST(v *types.UpdateTypeInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUpdateTypeInputShapeAWSJSON(v *types.UpdateTypeInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}
func (m CreateApiKeyMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCreateApiKeyInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCreateApiKeyInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CreateApiKeyMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CreateApiKey.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m CreateDataSourceMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCreateDataSourceInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCreateDataSourceInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CreateDataSourceMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CreateDataSource.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m CreateFunctionMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCreateFunctionInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCreateFunctionInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CreateFunctionMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CreateFunction.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m CreateGraphqlApiMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCreateGraphqlApiInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCreateGraphqlApiInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CreateGraphqlApiMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CreateGraphqlApi.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m CreateResolverMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCreateResolverInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCreateResolverInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CreateResolverMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CreateResolver.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m CreateTypeMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCreateTypeInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCreateTypeInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CreateTypeMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CreateType.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteApiKeyMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteApiKeyInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeleteApiKeyInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteApiKeyMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteApiKey.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteDataSourceMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteDataSourceInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeleteDataSourceInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteDataSourceMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteDataSource.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteFunctionMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteFunctionInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeleteFunctionInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteFunctionMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteFunction.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteGraphqlApiMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteGraphqlApiInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeleteGraphqlApiInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteGraphqlApiMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteGraphqlApi.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteResolverMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteResolverInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeleteResolverInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteResolverMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteResolver.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteTypeMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteTypeInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeleteTypeInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteTypeMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteType.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetDataSourceMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetDataSourceInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetDataSourceInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetDataSourceMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetDataSource.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetFunctionMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetFunctionInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetFunctionInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetFunctionMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetFunction.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetGraphqlApiMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetGraphqlApiInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetGraphqlApiInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetGraphqlApiMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetGraphqlApi.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetIntrospectionSchemaMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetIntrospectionSchemaInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetIntrospectionSchemaInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetIntrospectionSchemaMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetIntrospectionSchema.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetResolverMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetResolverInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetResolverInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetResolverMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetResolver.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetSchemaCreationStatusMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetSchemaCreationStatusInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetSchemaCreationStatusInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetSchemaCreationStatusMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetSchemaCreationStatus.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetTypeMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetTypeInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetTypeInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetTypeMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetType.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListApiKeysMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListApiKeysInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListApiKeysInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListApiKeysMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListApiKeys.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListDataSourcesMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListDataSourcesInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListDataSourcesInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListDataSourcesMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListDataSources.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListFunctionsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListFunctionsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListFunctionsInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListFunctionsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListFunctions.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListGraphqlApisMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListGraphqlApisInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListGraphqlApisInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListGraphqlApisMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListGraphqlApis.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListResolversMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListResolversInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListResolversInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListResolversMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListResolvers.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListResolversByFunctionMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListResolversByFunctionInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListResolversByFunctionInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListResolversByFunctionMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListResolversByFunction.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListTagsForResourceMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListTagsForResourceInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListTagsForResourceInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListTagsForResourceMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListTagsForResource.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListTypesMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListTypesInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListTypesInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListTypesMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListTypes.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m StartSchemaCreationMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalStartSchemaCreationInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalStartSchemaCreationInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m StartSchemaCreationMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "StartSchemaCreation.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m TagResourceMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalTagResourceInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalTagResourceInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m TagResourceMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "TagResource.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UntagResourceMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUntagResourceInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUntagResourceInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UntagResourceMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UntagResource.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UpdateApiKeyMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUpdateApiKeyInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUpdateApiKeyInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UpdateApiKeyMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UpdateApiKey.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UpdateDataSourceMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUpdateDataSourceInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUpdateDataSourceInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UpdateDataSourceMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UpdateDataSource.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UpdateFunctionMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUpdateFunctionInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUpdateFunctionInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UpdateFunctionMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UpdateFunction.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UpdateGraphqlApiMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUpdateGraphqlApiInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUpdateGraphqlApiInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UpdateGraphqlApiMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UpdateGraphqlApi.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UpdateResolverMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUpdateResolverInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUpdateResolverInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UpdateResolverMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UpdateResolver.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UpdateTypeMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUpdateTypeInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUpdateTypeInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UpdateTypeMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UpdateType.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}
