// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

// Package aws_restxml service, marshal.go contains the generated operation marshalers and methods on it.

package aws_restxml

import (
	"bytes"
	"encoding/xml"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/awserr"
	"github.com/aws/aws-sdk-go-v2/private/protocol/rest"
	"github.com/aws/aws-sdk-go-v2/private/protocol/xml/xmlutil"
	"github.com/aws/aws-sdk-go-v2/service/cloudfront/types"
)

var _ bytes.Buffer
var _ awserr.Error

// CreateCloudFrontOriginAccessIdentityMarshaler defines marshaler for CreateCloudFrontOriginAccessIdentity operation
type CreateCloudFrontOriginAccessIdentityMarshaler struct {
	Input *types.CreateCloudFrontOriginAccessIdentityInput
}

// CreateDistributionMarshaler defines marshaler for CreateDistribution operation
type CreateDistributionMarshaler struct {
	Input *types.CreateDistributionInput
}

// CreateDistributionWithTagsMarshaler defines marshaler for CreateDistributionWithTags operation
type CreateDistributionWithTagsMarshaler struct {
	Input *types.CreateDistributionWithTagsInput
}

// CreateFieldLevelEncryptionConfigMarshaler defines marshaler for CreateFieldLevelEncryptionConfig operation
type CreateFieldLevelEncryptionConfigMarshaler struct {
	Input *types.CreateFieldLevelEncryptionConfigInput
}

// CreateFieldLevelEncryptionProfileMarshaler defines marshaler for CreateFieldLevelEncryptionProfile operation
type CreateFieldLevelEncryptionProfileMarshaler struct {
	Input *types.CreateFieldLevelEncryptionProfileInput
}

// CreateInvalidationMarshaler defines marshaler for CreateInvalidation operation
type CreateInvalidationMarshaler struct {
	Input *types.CreateInvalidationInput
}

// CreatePublicKeyMarshaler defines marshaler for CreatePublicKey operation
type CreatePublicKeyMarshaler struct {
	Input *types.CreatePublicKeyInput
}

// CreateStreamingDistributionMarshaler defines marshaler for CreateStreamingDistribution operation
type CreateStreamingDistributionMarshaler struct {
	Input *types.CreateStreamingDistributionInput
}

// CreateStreamingDistributionWithTagsMarshaler defines marshaler for CreateStreamingDistributionWithTags operation
type CreateStreamingDistributionWithTagsMarshaler struct {
	Input *types.CreateStreamingDistributionWithTagsInput
}

// DeleteCloudFrontOriginAccessIdentityMarshaler defines marshaler for DeleteCloudFrontOriginAccessIdentity operation
type DeleteCloudFrontOriginAccessIdentityMarshaler struct {
	Input *types.DeleteCloudFrontOriginAccessIdentityInput
}

// DeleteDistributionMarshaler defines marshaler for DeleteDistribution operation
type DeleteDistributionMarshaler struct {
	Input *types.DeleteDistributionInput
}

// DeleteFieldLevelEncryptionConfigMarshaler defines marshaler for DeleteFieldLevelEncryptionConfig operation
type DeleteFieldLevelEncryptionConfigMarshaler struct {
	Input *types.DeleteFieldLevelEncryptionConfigInput
}

// DeleteFieldLevelEncryptionProfileMarshaler defines marshaler for DeleteFieldLevelEncryptionProfile operation
type DeleteFieldLevelEncryptionProfileMarshaler struct {
	Input *types.DeleteFieldLevelEncryptionProfileInput
}

// DeletePublicKeyMarshaler defines marshaler for DeletePublicKey operation
type DeletePublicKeyMarshaler struct {
	Input *types.DeletePublicKeyInput
}

// DeleteStreamingDistributionMarshaler defines marshaler for DeleteStreamingDistribution operation
type DeleteStreamingDistributionMarshaler struct {
	Input *types.DeleteStreamingDistributionInput
}

// GetCloudFrontOriginAccessIdentityMarshaler defines marshaler for GetCloudFrontOriginAccessIdentity operation
type GetCloudFrontOriginAccessIdentityMarshaler struct {
	Input *types.GetCloudFrontOriginAccessIdentityInput
}

// GetCloudFrontOriginAccessIdentityConfigMarshaler defines marshaler for GetCloudFrontOriginAccessIdentityConfig operation
type GetCloudFrontOriginAccessIdentityConfigMarshaler struct {
	Input *types.GetCloudFrontOriginAccessIdentityConfigInput
}

// GetDistributionMarshaler defines marshaler for GetDistribution operation
type GetDistributionMarshaler struct {
	Input *types.GetDistributionInput
}

// GetDistributionConfigMarshaler defines marshaler for GetDistributionConfig operation
type GetDistributionConfigMarshaler struct {
	Input *types.GetDistributionConfigInput
}

// GetFieldLevelEncryptionMarshaler defines marshaler for GetFieldLevelEncryption operation
type GetFieldLevelEncryptionMarshaler struct {
	Input *types.GetFieldLevelEncryptionInput
}

// GetFieldLevelEncryptionConfigMarshaler defines marshaler for GetFieldLevelEncryptionConfig operation
type GetFieldLevelEncryptionConfigMarshaler struct {
	Input *types.GetFieldLevelEncryptionConfigInput
}

// GetFieldLevelEncryptionProfileMarshaler defines marshaler for GetFieldLevelEncryptionProfile operation
type GetFieldLevelEncryptionProfileMarshaler struct {
	Input *types.GetFieldLevelEncryptionProfileInput
}

// GetFieldLevelEncryptionProfileConfigMarshaler defines marshaler for GetFieldLevelEncryptionProfileConfig operation
type GetFieldLevelEncryptionProfileConfigMarshaler struct {
	Input *types.GetFieldLevelEncryptionProfileConfigInput
}

// GetInvalidationMarshaler defines marshaler for GetInvalidation operation
type GetInvalidationMarshaler struct {
	Input *types.GetInvalidationInput
}

// GetPublicKeyMarshaler defines marshaler for GetPublicKey operation
type GetPublicKeyMarshaler struct {
	Input *types.GetPublicKeyInput
}

// GetPublicKeyConfigMarshaler defines marshaler for GetPublicKeyConfig operation
type GetPublicKeyConfigMarshaler struct {
	Input *types.GetPublicKeyConfigInput
}

// GetStreamingDistributionMarshaler defines marshaler for GetStreamingDistribution operation
type GetStreamingDistributionMarshaler struct {
	Input *types.GetStreamingDistributionInput
}

// GetStreamingDistributionConfigMarshaler defines marshaler for GetStreamingDistributionConfig operation
type GetStreamingDistributionConfigMarshaler struct {
	Input *types.GetStreamingDistributionConfigInput
}

// ListCloudFrontOriginAccessIdentitiesMarshaler defines marshaler for ListCloudFrontOriginAccessIdentities operation
type ListCloudFrontOriginAccessIdentitiesMarshaler struct {
	Input *types.ListCloudFrontOriginAccessIdentitiesInput
}

// ListDistributionsMarshaler defines marshaler for ListDistributions operation
type ListDistributionsMarshaler struct {
	Input *types.ListDistributionsInput
}

// ListDistributionsByWebACLIdMarshaler defines marshaler for ListDistributionsByWebACLId operation
type ListDistributionsByWebACLIdMarshaler struct {
	Input *types.ListDistributionsByWebACLIdInput
}

// ListFieldLevelEncryptionConfigsMarshaler defines marshaler for ListFieldLevelEncryptionConfigs operation
type ListFieldLevelEncryptionConfigsMarshaler struct {
	Input *types.ListFieldLevelEncryptionConfigsInput
}

// ListFieldLevelEncryptionProfilesMarshaler defines marshaler for ListFieldLevelEncryptionProfiles operation
type ListFieldLevelEncryptionProfilesMarshaler struct {
	Input *types.ListFieldLevelEncryptionProfilesInput
}

// ListInvalidationsMarshaler defines marshaler for ListInvalidations operation
type ListInvalidationsMarshaler struct {
	Input *types.ListInvalidationsInput
}

// ListPublicKeysMarshaler defines marshaler for ListPublicKeys operation
type ListPublicKeysMarshaler struct {
	Input *types.ListPublicKeysInput
}

// ListStreamingDistributionsMarshaler defines marshaler for ListStreamingDistributions operation
type ListStreamingDistributionsMarshaler struct {
	Input *types.ListStreamingDistributionsInput
}

// ListTagsForResourceMarshaler defines marshaler for ListTagsForResource operation
type ListTagsForResourceMarshaler struct {
	Input *types.ListTagsForResourceInput
}

// TagResourceMarshaler defines marshaler for TagResource operation
type TagResourceMarshaler struct {
	Input *types.TagResourceInput
}

// UntagResourceMarshaler defines marshaler for UntagResource operation
type UntagResourceMarshaler struct {
	Input *types.UntagResourceInput
}

// UpdateCloudFrontOriginAccessIdentityMarshaler defines marshaler for UpdateCloudFrontOriginAccessIdentity operation
type UpdateCloudFrontOriginAccessIdentityMarshaler struct {
	Input *types.UpdateCloudFrontOriginAccessIdentityInput
}

// UpdateDistributionMarshaler defines marshaler for UpdateDistribution operation
type UpdateDistributionMarshaler struct {
	Input *types.UpdateDistributionInput
}

// UpdateFieldLevelEncryptionConfigMarshaler defines marshaler for UpdateFieldLevelEncryptionConfig operation
type UpdateFieldLevelEncryptionConfigMarshaler struct {
	Input *types.UpdateFieldLevelEncryptionConfigInput
}

// UpdateFieldLevelEncryptionProfileMarshaler defines marshaler for UpdateFieldLevelEncryptionProfile operation
type UpdateFieldLevelEncryptionProfileMarshaler struct {
	Input *types.UpdateFieldLevelEncryptionProfileInput
}

// UpdatePublicKeyMarshaler defines marshaler for UpdatePublicKey operation
type UpdatePublicKeyMarshaler struct {
	Input *types.UpdatePublicKeyInput
}

// UpdateStreamingDistributionMarshaler defines marshaler for UpdateStreamingDistribution operation
type UpdateStreamingDistributionMarshaler struct {
	Input *types.UpdateStreamingDistributionInput
}

func MarshalCreateCloudFrontOriginAccessIdentityInputShapeAWSREST(v *types.CreateCloudFrontOriginAccessIdentityInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCreateCloudFrontOriginAccessIdentityInputShapeAWSXML(v *types.CreateCloudFrontOriginAccessIdentityInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalCreateDistributionInputShapeAWSREST(v *types.CreateDistributionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCreateDistributionInputShapeAWSXML(v *types.CreateDistributionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalCreateDistributionWithTagsInputShapeAWSREST(v *types.CreateDistributionWithTagsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCreateDistributionWithTagsInputShapeAWSXML(v *types.CreateDistributionWithTagsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalCreateFieldLevelEncryptionConfigInputShapeAWSREST(v *types.CreateFieldLevelEncryptionConfigInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCreateFieldLevelEncryptionConfigInputShapeAWSXML(v *types.CreateFieldLevelEncryptionConfigInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalCreateFieldLevelEncryptionProfileInputShapeAWSREST(v *types.CreateFieldLevelEncryptionProfileInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCreateFieldLevelEncryptionProfileInputShapeAWSXML(v *types.CreateFieldLevelEncryptionProfileInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalCreateInvalidationInputShapeAWSREST(v *types.CreateInvalidationInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCreateInvalidationInputShapeAWSXML(v *types.CreateInvalidationInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalCreatePublicKeyInputShapeAWSREST(v *types.CreatePublicKeyInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCreatePublicKeyInputShapeAWSXML(v *types.CreatePublicKeyInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalCreateStreamingDistributionInputShapeAWSREST(v *types.CreateStreamingDistributionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCreateStreamingDistributionInputShapeAWSXML(v *types.CreateStreamingDistributionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalCreateStreamingDistributionWithTagsInputShapeAWSREST(v *types.CreateStreamingDistributionWithTagsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCreateStreamingDistributionWithTagsInputShapeAWSXML(v *types.CreateStreamingDistributionWithTagsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalDeleteCloudFrontOriginAccessIdentityInputShapeAWSREST(v *types.DeleteCloudFrontOriginAccessIdentityInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeleteCloudFrontOriginAccessIdentityInputShapeAWSXML(v *types.DeleteCloudFrontOriginAccessIdentityInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalDeleteDistributionInputShapeAWSREST(v *types.DeleteDistributionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeleteDistributionInputShapeAWSXML(v *types.DeleteDistributionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalDeleteFieldLevelEncryptionConfigInputShapeAWSREST(v *types.DeleteFieldLevelEncryptionConfigInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeleteFieldLevelEncryptionConfigInputShapeAWSXML(v *types.DeleteFieldLevelEncryptionConfigInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalDeleteFieldLevelEncryptionProfileInputShapeAWSREST(v *types.DeleteFieldLevelEncryptionProfileInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeleteFieldLevelEncryptionProfileInputShapeAWSXML(v *types.DeleteFieldLevelEncryptionProfileInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalDeletePublicKeyInputShapeAWSREST(v *types.DeletePublicKeyInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeletePublicKeyInputShapeAWSXML(v *types.DeletePublicKeyInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalDeleteStreamingDistributionInputShapeAWSREST(v *types.DeleteStreamingDistributionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeleteStreamingDistributionInputShapeAWSXML(v *types.DeleteStreamingDistributionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalGetCloudFrontOriginAccessIdentityInputShapeAWSREST(v *types.GetCloudFrontOriginAccessIdentityInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetCloudFrontOriginAccessIdentityInputShapeAWSXML(v *types.GetCloudFrontOriginAccessIdentityInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalGetCloudFrontOriginAccessIdentityConfigInputShapeAWSREST(v *types.GetCloudFrontOriginAccessIdentityConfigInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetCloudFrontOriginAccessIdentityConfigInputShapeAWSXML(v *types.GetCloudFrontOriginAccessIdentityConfigInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalGetDistributionInputShapeAWSREST(v *types.GetDistributionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetDistributionInputShapeAWSXML(v *types.GetDistributionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalGetDistributionConfigInputShapeAWSREST(v *types.GetDistributionConfigInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetDistributionConfigInputShapeAWSXML(v *types.GetDistributionConfigInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalGetFieldLevelEncryptionInputShapeAWSREST(v *types.GetFieldLevelEncryptionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetFieldLevelEncryptionInputShapeAWSXML(v *types.GetFieldLevelEncryptionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalGetFieldLevelEncryptionConfigInputShapeAWSREST(v *types.GetFieldLevelEncryptionConfigInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetFieldLevelEncryptionConfigInputShapeAWSXML(v *types.GetFieldLevelEncryptionConfigInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalGetFieldLevelEncryptionProfileInputShapeAWSREST(v *types.GetFieldLevelEncryptionProfileInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetFieldLevelEncryptionProfileInputShapeAWSXML(v *types.GetFieldLevelEncryptionProfileInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalGetFieldLevelEncryptionProfileConfigInputShapeAWSREST(v *types.GetFieldLevelEncryptionProfileConfigInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetFieldLevelEncryptionProfileConfigInputShapeAWSXML(v *types.GetFieldLevelEncryptionProfileConfigInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalGetInvalidationInputShapeAWSREST(v *types.GetInvalidationInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetInvalidationInputShapeAWSXML(v *types.GetInvalidationInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalGetPublicKeyInputShapeAWSREST(v *types.GetPublicKeyInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetPublicKeyInputShapeAWSXML(v *types.GetPublicKeyInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalGetPublicKeyConfigInputShapeAWSREST(v *types.GetPublicKeyConfigInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetPublicKeyConfigInputShapeAWSXML(v *types.GetPublicKeyConfigInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalGetStreamingDistributionInputShapeAWSREST(v *types.GetStreamingDistributionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetStreamingDistributionInputShapeAWSXML(v *types.GetStreamingDistributionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalGetStreamingDistributionConfigInputShapeAWSREST(v *types.GetStreamingDistributionConfigInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetStreamingDistributionConfigInputShapeAWSXML(v *types.GetStreamingDistributionConfigInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalListCloudFrontOriginAccessIdentitiesInputShapeAWSREST(v *types.ListCloudFrontOriginAccessIdentitiesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListCloudFrontOriginAccessIdentitiesInputShapeAWSXML(v *types.ListCloudFrontOriginAccessIdentitiesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalListDistributionsInputShapeAWSREST(v *types.ListDistributionsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListDistributionsInputShapeAWSXML(v *types.ListDistributionsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalListDistributionsByWebACLIdInputShapeAWSREST(v *types.ListDistributionsByWebACLIdInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListDistributionsByWebACLIdInputShapeAWSXML(v *types.ListDistributionsByWebACLIdInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalListFieldLevelEncryptionConfigsInputShapeAWSREST(v *types.ListFieldLevelEncryptionConfigsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListFieldLevelEncryptionConfigsInputShapeAWSXML(v *types.ListFieldLevelEncryptionConfigsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalListFieldLevelEncryptionProfilesInputShapeAWSREST(v *types.ListFieldLevelEncryptionProfilesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListFieldLevelEncryptionProfilesInputShapeAWSXML(v *types.ListFieldLevelEncryptionProfilesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalListInvalidationsInputShapeAWSREST(v *types.ListInvalidationsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListInvalidationsInputShapeAWSXML(v *types.ListInvalidationsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalListPublicKeysInputShapeAWSREST(v *types.ListPublicKeysInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListPublicKeysInputShapeAWSXML(v *types.ListPublicKeysInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalListStreamingDistributionsInputShapeAWSREST(v *types.ListStreamingDistributionsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListStreamingDistributionsInputShapeAWSXML(v *types.ListStreamingDistributionsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalListTagsForResourceInputShapeAWSREST(v *types.ListTagsForResourceInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListTagsForResourceInputShapeAWSXML(v *types.ListTagsForResourceInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalTagResourceInputShapeAWSREST(v *types.TagResourceInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalTagResourceInputShapeAWSXML(v *types.TagResourceInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalUntagResourceInputShapeAWSREST(v *types.UntagResourceInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUntagResourceInputShapeAWSXML(v *types.UntagResourceInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalUpdateCloudFrontOriginAccessIdentityInputShapeAWSREST(v *types.UpdateCloudFrontOriginAccessIdentityInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUpdateCloudFrontOriginAccessIdentityInputShapeAWSXML(v *types.UpdateCloudFrontOriginAccessIdentityInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalUpdateDistributionInputShapeAWSREST(v *types.UpdateDistributionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUpdateDistributionInputShapeAWSXML(v *types.UpdateDistributionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalUpdateFieldLevelEncryptionConfigInputShapeAWSREST(v *types.UpdateFieldLevelEncryptionConfigInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUpdateFieldLevelEncryptionConfigInputShapeAWSXML(v *types.UpdateFieldLevelEncryptionConfigInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalUpdateFieldLevelEncryptionProfileInputShapeAWSREST(v *types.UpdateFieldLevelEncryptionProfileInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUpdateFieldLevelEncryptionProfileInputShapeAWSXML(v *types.UpdateFieldLevelEncryptionProfileInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalUpdatePublicKeyInputShapeAWSREST(v *types.UpdatePublicKeyInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUpdatePublicKeyInputShapeAWSXML(v *types.UpdatePublicKeyInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalUpdateStreamingDistributionInputShapeAWSREST(v *types.UpdateStreamingDistributionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUpdateStreamingDistributionInputShapeAWSXML(v *types.UpdateStreamingDistributionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}
func (m CreateCloudFrontOriginAccessIdentityMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCreateCloudFrontOriginAccessIdentityInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCreateCloudFrontOriginAccessIdentityInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CreateCloudFrontOriginAccessIdentityMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CreateCloudFrontOriginAccessIdentity.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m CreateDistributionMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCreateDistributionInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCreateDistributionInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CreateDistributionMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CreateDistribution.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m CreateDistributionWithTagsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCreateDistributionWithTagsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCreateDistributionWithTagsInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CreateDistributionWithTagsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CreateDistributionWithTags.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m CreateFieldLevelEncryptionConfigMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCreateFieldLevelEncryptionConfigInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCreateFieldLevelEncryptionConfigInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CreateFieldLevelEncryptionConfigMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CreateFieldLevelEncryptionConfig.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m CreateFieldLevelEncryptionProfileMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCreateFieldLevelEncryptionProfileInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCreateFieldLevelEncryptionProfileInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CreateFieldLevelEncryptionProfileMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CreateFieldLevelEncryptionProfile.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m CreateInvalidationMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCreateInvalidationInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCreateInvalidationInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CreateInvalidationMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CreateInvalidation.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m CreatePublicKeyMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCreatePublicKeyInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCreatePublicKeyInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CreatePublicKeyMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CreatePublicKey.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m CreateStreamingDistributionMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCreateStreamingDistributionInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCreateStreamingDistributionInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CreateStreamingDistributionMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CreateStreamingDistribution.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m CreateStreamingDistributionWithTagsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCreateStreamingDistributionWithTagsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCreateStreamingDistributionWithTagsInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CreateStreamingDistributionWithTagsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CreateStreamingDistributionWithTags.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteCloudFrontOriginAccessIdentityMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteCloudFrontOriginAccessIdentityInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeleteCloudFrontOriginAccessIdentityInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteCloudFrontOriginAccessIdentityMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteCloudFrontOriginAccessIdentity.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteDistributionMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteDistributionInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeleteDistributionInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteDistributionMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteDistribution.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteFieldLevelEncryptionConfigMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteFieldLevelEncryptionConfigInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeleteFieldLevelEncryptionConfigInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteFieldLevelEncryptionConfigMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteFieldLevelEncryptionConfig.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteFieldLevelEncryptionProfileMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteFieldLevelEncryptionProfileInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeleteFieldLevelEncryptionProfileInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteFieldLevelEncryptionProfileMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteFieldLevelEncryptionProfile.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeletePublicKeyMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeletePublicKeyInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeletePublicKeyInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeletePublicKeyMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeletePublicKey.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteStreamingDistributionMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteStreamingDistributionInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeleteStreamingDistributionInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteStreamingDistributionMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteStreamingDistribution.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetCloudFrontOriginAccessIdentityMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetCloudFrontOriginAccessIdentityInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetCloudFrontOriginAccessIdentityInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetCloudFrontOriginAccessIdentityMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetCloudFrontOriginAccessIdentity.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetCloudFrontOriginAccessIdentityConfigMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetCloudFrontOriginAccessIdentityConfigInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetCloudFrontOriginAccessIdentityConfigInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetCloudFrontOriginAccessIdentityConfigMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetCloudFrontOriginAccessIdentityConfig.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetDistributionMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetDistributionInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetDistributionInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetDistributionMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetDistribution.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetDistributionConfigMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetDistributionConfigInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetDistributionConfigInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetDistributionConfigMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetDistributionConfig.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetFieldLevelEncryptionMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetFieldLevelEncryptionInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetFieldLevelEncryptionInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetFieldLevelEncryptionMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetFieldLevelEncryption.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetFieldLevelEncryptionConfigMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetFieldLevelEncryptionConfigInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetFieldLevelEncryptionConfigInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetFieldLevelEncryptionConfigMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetFieldLevelEncryptionConfig.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetFieldLevelEncryptionProfileMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetFieldLevelEncryptionProfileInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetFieldLevelEncryptionProfileInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetFieldLevelEncryptionProfileMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetFieldLevelEncryptionProfile.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetFieldLevelEncryptionProfileConfigMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetFieldLevelEncryptionProfileConfigInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetFieldLevelEncryptionProfileConfigInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetFieldLevelEncryptionProfileConfigMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetFieldLevelEncryptionProfileConfig.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetInvalidationMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetInvalidationInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetInvalidationInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetInvalidationMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetInvalidation.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetPublicKeyMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetPublicKeyInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetPublicKeyInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetPublicKeyMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetPublicKey.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetPublicKeyConfigMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetPublicKeyConfigInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetPublicKeyConfigInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetPublicKeyConfigMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetPublicKeyConfig.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetStreamingDistributionMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetStreamingDistributionInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetStreamingDistributionInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetStreamingDistributionMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetStreamingDistribution.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetStreamingDistributionConfigMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetStreamingDistributionConfigInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetStreamingDistributionConfigInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetStreamingDistributionConfigMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetStreamingDistributionConfig.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListCloudFrontOriginAccessIdentitiesMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListCloudFrontOriginAccessIdentitiesInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListCloudFrontOriginAccessIdentitiesInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListCloudFrontOriginAccessIdentitiesMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListCloudFrontOriginAccessIdentities.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListDistributionsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListDistributionsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListDistributionsInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListDistributionsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListDistributions.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListDistributionsByWebACLIdMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListDistributionsByWebACLIdInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListDistributionsByWebACLIdInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListDistributionsByWebACLIdMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListDistributionsByWebACLId.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListFieldLevelEncryptionConfigsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListFieldLevelEncryptionConfigsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListFieldLevelEncryptionConfigsInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListFieldLevelEncryptionConfigsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListFieldLevelEncryptionConfigs.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListFieldLevelEncryptionProfilesMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListFieldLevelEncryptionProfilesInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListFieldLevelEncryptionProfilesInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListFieldLevelEncryptionProfilesMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListFieldLevelEncryptionProfiles.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListInvalidationsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListInvalidationsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListInvalidationsInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListInvalidationsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListInvalidations.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListPublicKeysMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListPublicKeysInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListPublicKeysInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListPublicKeysMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListPublicKeys.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListStreamingDistributionsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListStreamingDistributionsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListStreamingDistributionsInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListStreamingDistributionsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListStreamingDistributions.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListTagsForResourceMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListTagsForResourceInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListTagsForResourceInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListTagsForResourceMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListTagsForResource.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m TagResourceMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalTagResourceInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalTagResourceInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m TagResourceMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "TagResource.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UntagResourceMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUntagResourceInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUntagResourceInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UntagResourceMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UntagResource.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UpdateCloudFrontOriginAccessIdentityMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUpdateCloudFrontOriginAccessIdentityInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUpdateCloudFrontOriginAccessIdentityInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UpdateCloudFrontOriginAccessIdentityMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UpdateCloudFrontOriginAccessIdentity.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UpdateDistributionMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUpdateDistributionInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUpdateDistributionInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UpdateDistributionMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UpdateDistribution.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UpdateFieldLevelEncryptionConfigMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUpdateFieldLevelEncryptionConfigInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUpdateFieldLevelEncryptionConfigInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UpdateFieldLevelEncryptionConfigMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UpdateFieldLevelEncryptionConfig.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UpdateFieldLevelEncryptionProfileMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUpdateFieldLevelEncryptionProfileInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUpdateFieldLevelEncryptionProfileInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UpdateFieldLevelEncryptionProfileMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UpdateFieldLevelEncryptionProfile.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UpdatePublicKeyMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUpdatePublicKeyInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUpdatePublicKeyInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UpdatePublicKeyMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UpdatePublicKey.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UpdateStreamingDistributionMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUpdateStreamingDistributionInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUpdateStreamingDistributionInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UpdateStreamingDistributionMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UpdateStreamingDistribution.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}
