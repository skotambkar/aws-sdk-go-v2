// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

// Package aws_restjson service, marshal.go contains the generated operation marshalers and methods on it.

package aws_restjson

import (
	"bytes"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/awserr"
	"github.com/aws/aws-sdk-go-v2/private/protocol/jsonrpc"
	"github.com/aws/aws-sdk-go-v2/private/protocol/rest"
	"github.com/aws/aws-sdk-go-v2/service/kinesisvideo/types"
)

var _ bytes.Buffer
var _ awserr.Error

// CreateStreamMarshaler defines marshaler for CreateStream operation
type CreateStreamMarshaler struct {
	Input *types.CreateStreamInput
}

// DeleteStreamMarshaler defines marshaler for DeleteStream operation
type DeleteStreamMarshaler struct {
	Input *types.DeleteStreamInput
}

// DescribeStreamMarshaler defines marshaler for DescribeStream operation
type DescribeStreamMarshaler struct {
	Input *types.DescribeStreamInput
}

// GetDataEndpointMarshaler defines marshaler for GetDataEndpoint operation
type GetDataEndpointMarshaler struct {
	Input *types.GetDataEndpointInput
}

// ListStreamsMarshaler defines marshaler for ListStreams operation
type ListStreamsMarshaler struct {
	Input *types.ListStreamsInput
}

// ListTagsForStreamMarshaler defines marshaler for ListTagsForStream operation
type ListTagsForStreamMarshaler struct {
	Input *types.ListTagsForStreamInput
}

// TagStreamMarshaler defines marshaler for TagStream operation
type TagStreamMarshaler struct {
	Input *types.TagStreamInput
}

// UntagStreamMarshaler defines marshaler for UntagStream operation
type UntagStreamMarshaler struct {
	Input *types.UntagStreamInput
}

// UpdateDataRetentionMarshaler defines marshaler for UpdateDataRetention operation
type UpdateDataRetentionMarshaler struct {
	Input *types.UpdateDataRetentionInput
}

// UpdateStreamMarshaler defines marshaler for UpdateStream operation
type UpdateStreamMarshaler struct {
	Input *types.UpdateStreamInput
}

func MarshalCreateStreamInputShapeAWSREST(v *types.CreateStreamInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCreateStreamInputShapeAWSJSON(v *types.CreateStreamInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDeleteStreamInputShapeAWSREST(v *types.DeleteStreamInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeleteStreamInputShapeAWSJSON(v *types.DeleteStreamInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDescribeStreamInputShapeAWSREST(v *types.DescribeStreamInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDescribeStreamInputShapeAWSJSON(v *types.DescribeStreamInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalGetDataEndpointInputShapeAWSREST(v *types.GetDataEndpointInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetDataEndpointInputShapeAWSJSON(v *types.GetDataEndpointInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListStreamsInputShapeAWSREST(v *types.ListStreamsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListStreamsInputShapeAWSJSON(v *types.ListStreamsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListTagsForStreamInputShapeAWSREST(v *types.ListTagsForStreamInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListTagsForStreamInputShapeAWSJSON(v *types.ListTagsForStreamInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalTagStreamInputShapeAWSREST(v *types.TagStreamInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalTagStreamInputShapeAWSJSON(v *types.TagStreamInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalUntagStreamInputShapeAWSREST(v *types.UntagStreamInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUntagStreamInputShapeAWSJSON(v *types.UntagStreamInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalUpdateDataRetentionInputShapeAWSREST(v *types.UpdateDataRetentionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUpdateDataRetentionInputShapeAWSJSON(v *types.UpdateDataRetentionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalUpdateStreamInputShapeAWSREST(v *types.UpdateStreamInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUpdateStreamInputShapeAWSJSON(v *types.UpdateStreamInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}
func (m CreateStreamMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCreateStreamInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCreateStreamInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CreateStreamMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CreateStream.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteStreamMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteStreamInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeleteStreamInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteStreamMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteStream.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DescribeStreamMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDescribeStreamInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDescribeStreamInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DescribeStreamMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DescribeStream.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetDataEndpointMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetDataEndpointInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetDataEndpointInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetDataEndpointMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetDataEndpoint.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListStreamsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListStreamsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListStreamsInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListStreamsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListStreams.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListTagsForStreamMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListTagsForStreamInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListTagsForStreamInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListTagsForStreamMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListTagsForStream.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m TagStreamMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalTagStreamInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalTagStreamInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m TagStreamMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "TagStream.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UntagStreamMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUntagStreamInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUntagStreamInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UntagStreamMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UntagStream.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UpdateDataRetentionMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUpdateDataRetentionInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUpdateDataRetentionInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UpdateDataRetentionMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UpdateDataRetention.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UpdateStreamMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUpdateStreamInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUpdateStreamInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UpdateStreamMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UpdateStream.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}
