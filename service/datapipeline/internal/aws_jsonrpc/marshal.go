// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

// Package aws_jsonrpc service, marshal.go contains the generated operation marshalers and methods on it.

package aws_jsonrpc

import (
	"bytes"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/awserr"
	"github.com/aws/aws-sdk-go-v2/private/protocol/jsonrpc"
	"github.com/aws/aws-sdk-go-v2/service/datapipeline/types"
)

var _ bytes.Buffer
var _ awserr.Error

// ActivatePipelineMarshaler defines marshaler for ActivatePipeline operation
type ActivatePipelineMarshaler struct {
	Input *types.ActivatePipelineInput
}

// AddTagsMarshaler defines marshaler for AddTags operation
type AddTagsMarshaler struct {
	Input *types.AddTagsInput
}

// CreatePipelineMarshaler defines marshaler for CreatePipeline operation
type CreatePipelineMarshaler struct {
	Input *types.CreatePipelineInput
}

// DeactivatePipelineMarshaler defines marshaler for DeactivatePipeline operation
type DeactivatePipelineMarshaler struct {
	Input *types.DeactivatePipelineInput
}

// DeletePipelineMarshaler defines marshaler for DeletePipeline operation
type DeletePipelineMarshaler struct {
	Input *types.DeletePipelineInput
}

// DescribeObjectsMarshaler defines marshaler for DescribeObjects operation
type DescribeObjectsMarshaler struct {
	Input *types.DescribeObjectsInput
}

// DescribePipelinesMarshaler defines marshaler for DescribePipelines operation
type DescribePipelinesMarshaler struct {
	Input *types.DescribePipelinesInput
}

// EvaluateExpressionMarshaler defines marshaler for EvaluateExpression operation
type EvaluateExpressionMarshaler struct {
	Input *types.EvaluateExpressionInput
}

// GetPipelineDefinitionMarshaler defines marshaler for GetPipelineDefinition operation
type GetPipelineDefinitionMarshaler struct {
	Input *types.GetPipelineDefinitionInput
}

// ListPipelinesMarshaler defines marshaler for ListPipelines operation
type ListPipelinesMarshaler struct {
	Input *types.ListPipelinesInput
}

// PollForTaskMarshaler defines marshaler for PollForTask operation
type PollForTaskMarshaler struct {
	Input *types.PollForTaskInput
}

// PutPipelineDefinitionMarshaler defines marshaler for PutPipelineDefinition operation
type PutPipelineDefinitionMarshaler struct {
	Input *types.PutPipelineDefinitionInput
}

// QueryObjectsMarshaler defines marshaler for QueryObjects operation
type QueryObjectsMarshaler struct {
	Input *types.QueryObjectsInput
}

// RemoveTagsMarshaler defines marshaler for RemoveTags operation
type RemoveTagsMarshaler struct {
	Input *types.RemoveTagsInput
}

// ReportTaskProgressMarshaler defines marshaler for ReportTaskProgress operation
type ReportTaskProgressMarshaler struct {
	Input *types.ReportTaskProgressInput
}

// ReportTaskRunnerHeartbeatMarshaler defines marshaler for ReportTaskRunnerHeartbeat operation
type ReportTaskRunnerHeartbeatMarshaler struct {
	Input *types.ReportTaskRunnerHeartbeatInput
}

// SetStatusMarshaler defines marshaler for SetStatus operation
type SetStatusMarshaler struct {
	Input *types.SetStatusInput
}

// SetTaskStatusMarshaler defines marshaler for SetTaskStatus operation
type SetTaskStatusMarshaler struct {
	Input *types.SetTaskStatusInput
}

// ValidatePipelineDefinitionMarshaler defines marshaler for ValidatePipelineDefinition operation
type ValidatePipelineDefinitionMarshaler struct {
	Input *types.ValidatePipelineDefinitionInput
}

func MarshalActivatePipelineInputShapeAWSJSON(v *types.ActivatePipelineInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	jsonrpc.Build(r)
	return nil
}

func MarshalAddTagsInputShapeAWSJSON(v *types.AddTagsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	jsonrpc.Build(r)
	return nil
}

func MarshalCreatePipelineInputShapeAWSJSON(v *types.CreatePipelineInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	jsonrpc.Build(r)
	return nil
}

func MarshalDeactivatePipelineInputShapeAWSJSON(v *types.DeactivatePipelineInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	jsonrpc.Build(r)
	return nil
}

func MarshalDeletePipelineInputShapeAWSJSON(v *types.DeletePipelineInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	jsonrpc.Build(r)
	return nil
}

func MarshalDescribeObjectsInputShapeAWSJSON(v *types.DescribeObjectsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	jsonrpc.Build(r)
	return nil
}

func MarshalDescribePipelinesInputShapeAWSJSON(v *types.DescribePipelinesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	jsonrpc.Build(r)
	return nil
}

func MarshalEvaluateExpressionInputShapeAWSJSON(v *types.EvaluateExpressionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	jsonrpc.Build(r)
	return nil
}

func MarshalGetPipelineDefinitionInputShapeAWSJSON(v *types.GetPipelineDefinitionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	jsonrpc.Build(r)
	return nil
}

func MarshalListPipelinesInputShapeAWSJSON(v *types.ListPipelinesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	jsonrpc.Build(r)
	return nil
}

func MarshalPollForTaskInputShapeAWSJSON(v *types.PollForTaskInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	jsonrpc.Build(r)
	return nil
}

func MarshalPutPipelineDefinitionInputShapeAWSJSON(v *types.PutPipelineDefinitionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	jsonrpc.Build(r)
	return nil
}

func MarshalQueryObjectsInputShapeAWSJSON(v *types.QueryObjectsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	jsonrpc.Build(r)
	return nil
}

func MarshalRemoveTagsInputShapeAWSJSON(v *types.RemoveTagsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	jsonrpc.Build(r)
	return nil
}

func MarshalReportTaskProgressInputShapeAWSJSON(v *types.ReportTaskProgressInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	jsonrpc.Build(r)
	return nil
}

func MarshalReportTaskRunnerHeartbeatInputShapeAWSJSON(v *types.ReportTaskRunnerHeartbeatInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	jsonrpc.Build(r)
	return nil
}

func MarshalSetStatusInputShapeAWSJSON(v *types.SetStatusInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	jsonrpc.Build(r)
	return nil
}

func MarshalSetTaskStatusInputShapeAWSJSON(v *types.SetTaskStatusInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	jsonrpc.Build(r)
	return nil
}

func MarshalValidatePipelineDefinitionInputShapeAWSJSON(v *types.ValidatePipelineDefinitionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	jsonrpc.Build(r)
	return nil
}
func (m ActivatePipelineMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalActivatePipelineInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ActivatePipelineMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ActivatePipeline.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m AddTagsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalAddTagsInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m AddTagsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "AddTags.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m CreatePipelineMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCreatePipelineInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CreatePipelineMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CreatePipeline.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeactivatePipelineMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeactivatePipelineInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeactivatePipelineMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeactivatePipeline.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeletePipelineMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeletePipelineInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeletePipelineMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeletePipeline.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DescribeObjectsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDescribeObjectsInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DescribeObjectsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DescribeObjects.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DescribePipelinesMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDescribePipelinesInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DescribePipelinesMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DescribePipelines.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m EvaluateExpressionMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalEvaluateExpressionInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m EvaluateExpressionMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "EvaluateExpression.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetPipelineDefinitionMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetPipelineDefinitionInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetPipelineDefinitionMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetPipelineDefinition.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListPipelinesMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListPipelinesInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListPipelinesMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListPipelines.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m PollForTaskMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalPollForTaskInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m PollForTaskMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "PollForTask.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m PutPipelineDefinitionMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalPutPipelineDefinitionInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m PutPipelineDefinitionMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "PutPipelineDefinition.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m QueryObjectsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalQueryObjectsInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m QueryObjectsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "QueryObjects.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m RemoveTagsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalRemoveTagsInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m RemoveTagsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "RemoveTags.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ReportTaskProgressMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalReportTaskProgressInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ReportTaskProgressMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ReportTaskProgress.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ReportTaskRunnerHeartbeatMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalReportTaskRunnerHeartbeatInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ReportTaskRunnerHeartbeatMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ReportTaskRunnerHeartbeat.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m SetStatusMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalSetStatusInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m SetStatusMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "SetStatus.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m SetTaskStatusMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalSetTaskStatusInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m SetTaskStatusMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "SetTaskStatus.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ValidatePipelineDefinitionMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalValidatePipelineDefinitionInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ValidatePipelineDefinitionMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ValidatePipelineDefinition.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}
