// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

// Package aws_jsonrpc service, marshal.go contains the generated operation marshalers and methods on it.

package aws_jsonrpc

import (
	"bytes"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/awserr"
	"github.com/aws/aws-sdk-go-v2/private/protocol/jsonrpc"
	"github.com/aws/aws-sdk-go-v2/service/budgets/types"
)

var _ bytes.Buffer
var _ awserr.Error

// CreateBudgetMarshaler defines marshaler for CreateBudget operation
type CreateBudgetMarshaler struct {
	Input *types.CreateBudgetInput
}

// CreateNotificationMarshaler defines marshaler for CreateNotification operation
type CreateNotificationMarshaler struct {
	Input *types.CreateNotificationInput
}

// CreateSubscriberMarshaler defines marshaler for CreateSubscriber operation
type CreateSubscriberMarshaler struct {
	Input *types.CreateSubscriberInput
}

// DeleteBudgetMarshaler defines marshaler for DeleteBudget operation
type DeleteBudgetMarshaler struct {
	Input *types.DeleteBudgetInput
}

// DeleteNotificationMarshaler defines marshaler for DeleteNotification operation
type DeleteNotificationMarshaler struct {
	Input *types.DeleteNotificationInput
}

// DeleteSubscriberMarshaler defines marshaler for DeleteSubscriber operation
type DeleteSubscriberMarshaler struct {
	Input *types.DeleteSubscriberInput
}

// DescribeBudgetMarshaler defines marshaler for DescribeBudget operation
type DescribeBudgetMarshaler struct {
	Input *types.DescribeBudgetInput
}

// DescribeBudgetPerformanceHistoryMarshaler defines marshaler for DescribeBudgetPerformanceHistory operation
type DescribeBudgetPerformanceHistoryMarshaler struct {
	Input *types.DescribeBudgetPerformanceHistoryInput
}

// DescribeBudgetsMarshaler defines marshaler for DescribeBudgets operation
type DescribeBudgetsMarshaler struct {
	Input *types.DescribeBudgetsInput
}

// DescribeNotificationsForBudgetMarshaler defines marshaler for DescribeNotificationsForBudget operation
type DescribeNotificationsForBudgetMarshaler struct {
	Input *types.DescribeNotificationsForBudgetInput
}

// DescribeSubscribersForNotificationMarshaler defines marshaler for DescribeSubscribersForNotification operation
type DescribeSubscribersForNotificationMarshaler struct {
	Input *types.DescribeSubscribersForNotificationInput
}

// UpdateBudgetMarshaler defines marshaler for UpdateBudget operation
type UpdateBudgetMarshaler struct {
	Input *types.UpdateBudgetInput
}

// UpdateNotificationMarshaler defines marshaler for UpdateNotification operation
type UpdateNotificationMarshaler struct {
	Input *types.UpdateNotificationInput
}

// UpdateSubscriberMarshaler defines marshaler for UpdateSubscriber operation
type UpdateSubscriberMarshaler struct {
	Input *types.UpdateSubscriberInput
}

func MarshalCreateBudgetInputShapeAWSJSON(v *types.CreateBudgetInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	jsonrpc.Build(r)
	return nil
}

func MarshalCreateNotificationInputShapeAWSJSON(v *types.CreateNotificationInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	jsonrpc.Build(r)
	return nil
}

func MarshalCreateSubscriberInputShapeAWSJSON(v *types.CreateSubscriberInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	jsonrpc.Build(r)
	return nil
}

func MarshalDeleteBudgetInputShapeAWSJSON(v *types.DeleteBudgetInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	jsonrpc.Build(r)
	return nil
}

func MarshalDeleteNotificationInputShapeAWSJSON(v *types.DeleteNotificationInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	jsonrpc.Build(r)
	return nil
}

func MarshalDeleteSubscriberInputShapeAWSJSON(v *types.DeleteSubscriberInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	jsonrpc.Build(r)
	return nil
}

func MarshalDescribeBudgetInputShapeAWSJSON(v *types.DescribeBudgetInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	jsonrpc.Build(r)
	return nil
}

func MarshalDescribeBudgetPerformanceHistoryInputShapeAWSJSON(v *types.DescribeBudgetPerformanceHistoryInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	jsonrpc.Build(r)
	return nil
}

func MarshalDescribeBudgetsInputShapeAWSJSON(v *types.DescribeBudgetsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	jsonrpc.Build(r)
	return nil
}

func MarshalDescribeNotificationsForBudgetInputShapeAWSJSON(v *types.DescribeNotificationsForBudgetInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	jsonrpc.Build(r)
	return nil
}

func MarshalDescribeSubscribersForNotificationInputShapeAWSJSON(v *types.DescribeSubscribersForNotificationInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	jsonrpc.Build(r)
	return nil
}

func MarshalUpdateBudgetInputShapeAWSJSON(v *types.UpdateBudgetInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	jsonrpc.Build(r)
	return nil
}

func MarshalUpdateNotificationInputShapeAWSJSON(v *types.UpdateNotificationInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	jsonrpc.Build(r)
	return nil
}

func MarshalUpdateSubscriberInputShapeAWSJSON(v *types.UpdateSubscriberInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	jsonrpc.Build(r)
	return nil
}
func (m CreateBudgetMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCreateBudgetInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CreateBudgetMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CreateBudget.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m CreateNotificationMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCreateNotificationInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CreateNotificationMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CreateNotification.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m CreateSubscriberMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCreateSubscriberInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CreateSubscriberMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CreateSubscriber.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteBudgetMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteBudgetInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteBudgetMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteBudget.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteNotificationMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteNotificationInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteNotificationMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteNotification.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteSubscriberMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteSubscriberInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteSubscriberMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteSubscriber.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DescribeBudgetMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDescribeBudgetInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DescribeBudgetMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DescribeBudget.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DescribeBudgetPerformanceHistoryMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDescribeBudgetPerformanceHistoryInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DescribeBudgetPerformanceHistoryMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DescribeBudgetPerformanceHistory.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DescribeBudgetsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDescribeBudgetsInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DescribeBudgetsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DescribeBudgets.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DescribeNotificationsForBudgetMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDescribeNotificationsForBudgetInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DescribeNotificationsForBudgetMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DescribeNotificationsForBudget.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DescribeSubscribersForNotificationMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDescribeSubscribersForNotificationInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DescribeSubscribersForNotificationMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DescribeSubscribersForNotification.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UpdateBudgetMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUpdateBudgetInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UpdateBudgetMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UpdateBudget.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UpdateNotificationMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUpdateNotificationInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UpdateNotificationMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UpdateNotification.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UpdateSubscriberMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUpdateSubscriberInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UpdateSubscriberMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UpdateSubscriber.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}
