// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package s3

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/s3/types"
)

const opListObjectsV2 = "ListObjectsV2"

// ListObjectsV2Request returns a request value for making API operation for
// Amazon Simple Storage Service.
//
// Returns some or all (up to 1000) of the objects in a bucket. You can use
// the request parameters as selection criteria to return a subset of the objects
// in a bucket. Note: ListObjectsV2 is the revised List Objects API and we recommend
// you use this revised API for new application development.
//
//    // Example sending a request using ListObjectsV2Request.
//    req := client.ListObjectsV2Request(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/ListObjectsV2
func (c *Client) ListObjectsV2Request(input *types.ListObjectsV2Input) ListObjectsV2Request {
	op := &aws.Operation{
		Name:       opListObjectsV2,
		HTTPMethod: "GET",
		HTTPPath:   "/{Bucket}?list-type=2",
		Paginator: &aws.Paginator{
			InputTokens:     []string{"ContinuationToken"},
			OutputTokens:    []string{"NextContinuationToken"},
			LimitToken:      "MaxKeys",
			TruncationToken: "",
		},
	}

	if input == nil {
		input = &types.ListObjectsV2Input{}
	}

	req := c.newRequest(op, input, &types.ListObjectsV2Output{})
	return ListObjectsV2Request{Request: req, Input: input, Copy: c.ListObjectsV2Request}
}

// ListObjectsV2Request is the request type for the
// ListObjectsV2 API operation.
type ListObjectsV2Request struct {
	*aws.Request
	Input *types.ListObjectsV2Input
	Copy  func(*types.ListObjectsV2Input) ListObjectsV2Request
}

// Send marshals and sends the ListObjectsV2 API request.
func (r ListObjectsV2Request) Send(ctx context.Context) (*ListObjectsV2Response, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &ListObjectsV2Response{
		ListObjectsV2Output: r.Request.Data.(*types.ListObjectsV2Output),
		response:            &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// NewListObjectsV2RequestPaginator returns a paginator for ListObjectsV2.
// Use Next method to get the next page, and CurrentPage to get the current
// response page from the paginator. Next will return false, if there are
// no more pages, or an error was encountered.
//
// Note: This operation can generate multiple requests to a service.
//
//   // Example iterating over pages.
//   req := client.ListObjectsV2Request(input)
//   p := s3.NewListObjectsV2RequestPaginator(req)
//
//   for p.Next(context.TODO()) {
//       page := p.CurrentPage()
//   }
//
//   if err := p.Err(); err != nil {
//       return err
//   }
//
func NewListObjectsV2Paginator(req ListObjectsV2Request) ListObjectsV2Paginator {
	return ListObjectsV2Paginator{
		Pager: aws.Pager{
			NewRequest: func(ctx context.Context) (*aws.Request, error) {
				var inCpy *types.ListObjectsV2Input
				if req.Input != nil {
					tmp := *req.Input
					inCpy = &tmp
				}

				newReq := req.Copy(inCpy)
				newReq.SetContext(ctx)
				return newReq.Request, nil
			},
		},
	}
}

// ListObjectsV2Paginator is used to paginate the request. This can be done by
// calling Next and CurrentPage.
type ListObjectsV2Paginator struct {
	aws.Pager
}

func (p *ListObjectsV2Paginator) CurrentPage() *types.ListObjectsV2Output {
	return p.Pager.CurrentPage().(*types.ListObjectsV2Output)
}

// ListObjectsV2Response is the response type for the
// ListObjectsV2 API operation.
type ListObjectsV2Response struct {
	*types.ListObjectsV2Output

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// ListObjectsV2 request.
func (r *ListObjectsV2Response) SDKResponseMetdata() *aws.Response {
	return r.response
}
