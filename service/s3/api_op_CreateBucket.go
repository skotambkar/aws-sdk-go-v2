// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package s3

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/s3/types"
)

const opCreateBucket = "CreateBucket"

// CreateBucketRequest returns a request value for making API operation for
// Amazon Simple Storage Service.
//
// Creates a new bucket.
//
//    // Example sending a request using CreateBucketRequest.
//    req := client.CreateBucketRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/CreateBucket
func (c *Client) CreateBucketRequest(input *types.CreateBucketInput) CreateBucketRequest {
	op := &aws.Operation{
		Name:       opCreateBucket,
		HTTPMethod: "PUT",
		HTTPPath:   "/{Bucket}",
	}

	if input == nil {
		input = &types.CreateBucketInput{}
	}

	req := c.newRequest(op, input, &types.CreateBucketOutput{})
	return CreateBucketRequest{Request: req, Input: input, Copy: c.CreateBucketRequest}
}

// CreateBucketRequest is the request type for the
// CreateBucket API operation.
type CreateBucketRequest struct {
	*aws.Request
	Input *types.CreateBucketInput
	Copy  func(*types.CreateBucketInput) CreateBucketRequest
}

// Send marshals and sends the CreateBucket API request.
func (r CreateBucketRequest) Send(ctx context.Context) (*CreateBucketResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &CreateBucketResponse{
		CreateBucketOutput: r.Request.Data.(*types.CreateBucketOutput),
		response:           &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// CreateBucketResponse is the response type for the
// CreateBucket API operation.
type CreateBucketResponse struct {
	*types.CreateBucketOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// CreateBucket request.
func (r *CreateBucketResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
