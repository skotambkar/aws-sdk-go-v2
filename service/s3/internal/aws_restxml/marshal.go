// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

// Package aws_restxml service, marshal.go contains the generated operation marshalers and methods on it.

package aws_restxml

import (
	"bytes"
	"encoding/xml"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/awserr"
	"github.com/aws/aws-sdk-go-v2/private/protocol/rest"
	"github.com/aws/aws-sdk-go-v2/private/protocol/xml/xmlutil"
	"github.com/aws/aws-sdk-go-v2/service/s3/types"
)

var _ bytes.Buffer
var _ awserr.Error

// AbortMultipartUploadMarshaler defines marshaler for AbortMultipartUpload operation
type AbortMultipartUploadMarshaler struct {
	Input *types.AbortMultipartUploadInput
}

// CompleteMultipartUploadMarshaler defines marshaler for CompleteMultipartUpload operation
type CompleteMultipartUploadMarshaler struct {
	Input *types.CompleteMultipartUploadInput
}

// CopyObjectMarshaler defines marshaler for CopyObject operation
type CopyObjectMarshaler struct {
	Input *types.CopyObjectInput
}

// CreateBucketMarshaler defines marshaler for CreateBucket operation
type CreateBucketMarshaler struct {
	Input *types.CreateBucketInput
}

// CreateMultipartUploadMarshaler defines marshaler for CreateMultipartUpload operation
type CreateMultipartUploadMarshaler struct {
	Input *types.CreateMultipartUploadInput
}

// DeleteBucketMarshaler defines marshaler for DeleteBucket operation
type DeleteBucketMarshaler struct {
	Input *types.DeleteBucketInput
}

// DeleteBucketAnalyticsConfigurationMarshaler defines marshaler for DeleteBucketAnalyticsConfiguration operation
type DeleteBucketAnalyticsConfigurationMarshaler struct {
	Input *types.DeleteBucketAnalyticsConfigurationInput
}

// DeleteBucketCorsMarshaler defines marshaler for DeleteBucketCors operation
type DeleteBucketCorsMarshaler struct {
	Input *types.DeleteBucketCorsInput
}

// DeleteBucketEncryptionMarshaler defines marshaler for DeleteBucketEncryption operation
type DeleteBucketEncryptionMarshaler struct {
	Input *types.DeleteBucketEncryptionInput
}

// DeleteBucketInventoryConfigurationMarshaler defines marshaler for DeleteBucketInventoryConfiguration operation
type DeleteBucketInventoryConfigurationMarshaler struct {
	Input *types.DeleteBucketInventoryConfigurationInput
}

// DeleteBucketLifecycleMarshaler defines marshaler for DeleteBucketLifecycle operation
type DeleteBucketLifecycleMarshaler struct {
	Input *types.DeleteBucketLifecycleInput
}

// DeleteBucketMetricsConfigurationMarshaler defines marshaler for DeleteBucketMetricsConfiguration operation
type DeleteBucketMetricsConfigurationMarshaler struct {
	Input *types.DeleteBucketMetricsConfigurationInput
}

// DeleteBucketPolicyMarshaler defines marshaler for DeleteBucketPolicy operation
type DeleteBucketPolicyMarshaler struct {
	Input *types.DeleteBucketPolicyInput
}

// DeleteBucketReplicationMarshaler defines marshaler for DeleteBucketReplication operation
type DeleteBucketReplicationMarshaler struct {
	Input *types.DeleteBucketReplicationInput
}

// DeleteBucketTaggingMarshaler defines marshaler for DeleteBucketTagging operation
type DeleteBucketTaggingMarshaler struct {
	Input *types.DeleteBucketTaggingInput
}

// DeleteBucketWebsiteMarshaler defines marshaler for DeleteBucketWebsite operation
type DeleteBucketWebsiteMarshaler struct {
	Input *types.DeleteBucketWebsiteInput
}

// DeleteObjectMarshaler defines marshaler for DeleteObject operation
type DeleteObjectMarshaler struct {
	Input *types.DeleteObjectInput
}

// DeleteObjectTaggingMarshaler defines marshaler for DeleteObjectTagging operation
type DeleteObjectTaggingMarshaler struct {
	Input *types.DeleteObjectTaggingInput
}

// DeleteObjectsMarshaler defines marshaler for DeleteObjects operation
type DeleteObjectsMarshaler struct {
	Input *types.DeleteObjectsInput
}

// DeletePublicAccessBlockMarshaler defines marshaler for DeletePublicAccessBlock operation
type DeletePublicAccessBlockMarshaler struct {
	Input *types.DeletePublicAccessBlockInput
}

// GetBucketAccelerateConfigurationMarshaler defines marshaler for GetBucketAccelerateConfiguration operation
type GetBucketAccelerateConfigurationMarshaler struct {
	Input *types.GetBucketAccelerateConfigurationInput
}

// GetBucketAclMarshaler defines marshaler for GetBucketAcl operation
type GetBucketAclMarshaler struct {
	Input *types.GetBucketAclInput
}

// GetBucketAnalyticsConfigurationMarshaler defines marshaler for GetBucketAnalyticsConfiguration operation
type GetBucketAnalyticsConfigurationMarshaler struct {
	Input *types.GetBucketAnalyticsConfigurationInput
}

// GetBucketCorsMarshaler defines marshaler for GetBucketCors operation
type GetBucketCorsMarshaler struct {
	Input *types.GetBucketCorsInput
}

// GetBucketEncryptionMarshaler defines marshaler for GetBucketEncryption operation
type GetBucketEncryptionMarshaler struct {
	Input *types.GetBucketEncryptionInput
}

// GetBucketInventoryConfigurationMarshaler defines marshaler for GetBucketInventoryConfiguration operation
type GetBucketInventoryConfigurationMarshaler struct {
	Input *types.GetBucketInventoryConfigurationInput
}

// GetBucketLifecycleMarshaler defines marshaler for GetBucketLifecycle operation
type GetBucketLifecycleMarshaler struct {
	Input *types.GetBucketLifecycleInput
}

// GetBucketLifecycleConfigurationMarshaler defines marshaler for GetBucketLifecycleConfiguration operation
type GetBucketLifecycleConfigurationMarshaler struct {
	Input *types.GetBucketLifecycleConfigurationInput
}

// GetBucketLocationMarshaler defines marshaler for GetBucketLocation operation
type GetBucketLocationMarshaler struct {
	Input *types.GetBucketLocationInput
}

// GetBucketLoggingMarshaler defines marshaler for GetBucketLogging operation
type GetBucketLoggingMarshaler struct {
	Input *types.GetBucketLoggingInput
}

// GetBucketMetricsConfigurationMarshaler defines marshaler for GetBucketMetricsConfiguration operation
type GetBucketMetricsConfigurationMarshaler struct {
	Input *types.GetBucketMetricsConfigurationInput
}

// GetBucketNotificationMarshaler defines marshaler for GetBucketNotification operation
type GetBucketNotificationMarshaler struct {
	Input *types.GetBucketNotificationInput
}

// GetBucketNotificationConfigurationMarshaler defines marshaler for GetBucketNotificationConfiguration operation
type GetBucketNotificationConfigurationMarshaler struct {
	Input *types.GetBucketNotificationConfigurationInput
}

// GetBucketPolicyMarshaler defines marshaler for GetBucketPolicy operation
type GetBucketPolicyMarshaler struct {
	Input *types.GetBucketPolicyInput
}

// GetBucketPolicyStatusMarshaler defines marshaler for GetBucketPolicyStatus operation
type GetBucketPolicyStatusMarshaler struct {
	Input *types.GetBucketPolicyStatusInput
}

// GetBucketReplicationMarshaler defines marshaler for GetBucketReplication operation
type GetBucketReplicationMarshaler struct {
	Input *types.GetBucketReplicationInput
}

// GetBucketRequestPaymentMarshaler defines marshaler for GetBucketRequestPayment operation
type GetBucketRequestPaymentMarshaler struct {
	Input *types.GetBucketRequestPaymentInput
}

// GetBucketTaggingMarshaler defines marshaler for GetBucketTagging operation
type GetBucketTaggingMarshaler struct {
	Input *types.GetBucketTaggingInput
}

// GetBucketVersioningMarshaler defines marshaler for GetBucketVersioning operation
type GetBucketVersioningMarshaler struct {
	Input *types.GetBucketVersioningInput
}

// GetBucketWebsiteMarshaler defines marshaler for GetBucketWebsite operation
type GetBucketWebsiteMarshaler struct {
	Input *types.GetBucketWebsiteInput
}

// GetObjectMarshaler defines marshaler for GetObject operation
type GetObjectMarshaler struct {
	Input *types.GetObjectInput
}

// GetObjectAclMarshaler defines marshaler for GetObjectAcl operation
type GetObjectAclMarshaler struct {
	Input *types.GetObjectAclInput
}

// GetObjectLegalHoldMarshaler defines marshaler for GetObjectLegalHold operation
type GetObjectLegalHoldMarshaler struct {
	Input *types.GetObjectLegalHoldInput
}

// GetObjectLockConfigurationMarshaler defines marshaler for GetObjectLockConfiguration operation
type GetObjectLockConfigurationMarshaler struct {
	Input *types.GetObjectLockConfigurationInput
}

// GetObjectRetentionMarshaler defines marshaler for GetObjectRetention operation
type GetObjectRetentionMarshaler struct {
	Input *types.GetObjectRetentionInput
}

// GetObjectTaggingMarshaler defines marshaler for GetObjectTagging operation
type GetObjectTaggingMarshaler struct {
	Input *types.GetObjectTaggingInput
}

// GetObjectTorrentMarshaler defines marshaler for GetObjectTorrent operation
type GetObjectTorrentMarshaler struct {
	Input *types.GetObjectTorrentInput
}

// GetPublicAccessBlockMarshaler defines marshaler for GetPublicAccessBlock operation
type GetPublicAccessBlockMarshaler struct {
	Input *types.GetPublicAccessBlockInput
}

// HeadBucketMarshaler defines marshaler for HeadBucket operation
type HeadBucketMarshaler struct {
	Input *types.HeadBucketInput
}

// HeadObjectMarshaler defines marshaler for HeadObject operation
type HeadObjectMarshaler struct {
	Input *types.HeadObjectInput
}

// ListBucketAnalyticsConfigurationsMarshaler defines marshaler for ListBucketAnalyticsConfigurations operation
type ListBucketAnalyticsConfigurationsMarshaler struct {
	Input *types.ListBucketAnalyticsConfigurationsInput
}

// ListBucketInventoryConfigurationsMarshaler defines marshaler for ListBucketInventoryConfigurations operation
type ListBucketInventoryConfigurationsMarshaler struct {
	Input *types.ListBucketInventoryConfigurationsInput
}

// ListBucketMetricsConfigurationsMarshaler defines marshaler for ListBucketMetricsConfigurations operation
type ListBucketMetricsConfigurationsMarshaler struct {
	Input *types.ListBucketMetricsConfigurationsInput
}

// ListBucketsMarshaler defines marshaler for ListBuckets operation
type ListBucketsMarshaler struct {
	Input *types.ListBucketsInput
}

// ListMultipartUploadsMarshaler defines marshaler for ListMultipartUploads operation
type ListMultipartUploadsMarshaler struct {
	Input *types.ListMultipartUploadsInput
}

// ListObjectVersionsMarshaler defines marshaler for ListObjectVersions operation
type ListObjectVersionsMarshaler struct {
	Input *types.ListObjectVersionsInput
}

// ListObjectsMarshaler defines marshaler for ListObjects operation
type ListObjectsMarshaler struct {
	Input *types.ListObjectsInput
}

// ListObjectsV2Marshaler defines marshaler for ListObjectsV2 operation
type ListObjectsV2Marshaler struct {
	Input *types.ListObjectsV2Input
}

// ListPartsMarshaler defines marshaler for ListParts operation
type ListPartsMarshaler struct {
	Input *types.ListPartsInput
}

// PutBucketAccelerateConfigurationMarshaler defines marshaler for PutBucketAccelerateConfiguration operation
type PutBucketAccelerateConfigurationMarshaler struct {
	Input *types.PutBucketAccelerateConfigurationInput
}

// PutBucketAclMarshaler defines marshaler for PutBucketAcl operation
type PutBucketAclMarshaler struct {
	Input *types.PutBucketAclInput
}

// PutBucketAnalyticsConfigurationMarshaler defines marshaler for PutBucketAnalyticsConfiguration operation
type PutBucketAnalyticsConfigurationMarshaler struct {
	Input *types.PutBucketAnalyticsConfigurationInput
}

// PutBucketCorsMarshaler defines marshaler for PutBucketCors operation
type PutBucketCorsMarshaler struct {
	Input *types.PutBucketCorsInput
}

// PutBucketEncryptionMarshaler defines marshaler for PutBucketEncryption operation
type PutBucketEncryptionMarshaler struct {
	Input *types.PutBucketEncryptionInput
}

// PutBucketInventoryConfigurationMarshaler defines marshaler for PutBucketInventoryConfiguration operation
type PutBucketInventoryConfigurationMarshaler struct {
	Input *types.PutBucketInventoryConfigurationInput
}

// PutBucketLifecycleMarshaler defines marshaler for PutBucketLifecycle operation
type PutBucketLifecycleMarshaler struct {
	Input *types.PutBucketLifecycleInput
}

// PutBucketLifecycleConfigurationMarshaler defines marshaler for PutBucketLifecycleConfiguration operation
type PutBucketLifecycleConfigurationMarshaler struct {
	Input *types.PutBucketLifecycleConfigurationInput
}

// PutBucketLoggingMarshaler defines marshaler for PutBucketLogging operation
type PutBucketLoggingMarshaler struct {
	Input *types.PutBucketLoggingInput
}

// PutBucketMetricsConfigurationMarshaler defines marshaler for PutBucketMetricsConfiguration operation
type PutBucketMetricsConfigurationMarshaler struct {
	Input *types.PutBucketMetricsConfigurationInput
}

// PutBucketNotificationMarshaler defines marshaler for PutBucketNotification operation
type PutBucketNotificationMarshaler struct {
	Input *types.PutBucketNotificationInput
}

// PutBucketNotificationConfigurationMarshaler defines marshaler for PutBucketNotificationConfiguration operation
type PutBucketNotificationConfigurationMarshaler struct {
	Input *types.PutBucketNotificationConfigurationInput
}

// PutBucketPolicyMarshaler defines marshaler for PutBucketPolicy operation
type PutBucketPolicyMarshaler struct {
	Input *types.PutBucketPolicyInput
}

// PutBucketReplicationMarshaler defines marshaler for PutBucketReplication operation
type PutBucketReplicationMarshaler struct {
	Input *types.PutBucketReplicationInput
}

// PutBucketRequestPaymentMarshaler defines marshaler for PutBucketRequestPayment operation
type PutBucketRequestPaymentMarshaler struct {
	Input *types.PutBucketRequestPaymentInput
}

// PutBucketTaggingMarshaler defines marshaler for PutBucketTagging operation
type PutBucketTaggingMarshaler struct {
	Input *types.PutBucketTaggingInput
}

// PutBucketVersioningMarshaler defines marshaler for PutBucketVersioning operation
type PutBucketVersioningMarshaler struct {
	Input *types.PutBucketVersioningInput
}

// PutBucketWebsiteMarshaler defines marshaler for PutBucketWebsite operation
type PutBucketWebsiteMarshaler struct {
	Input *types.PutBucketWebsiteInput
}

// PutObjectMarshaler defines marshaler for PutObject operation
type PutObjectMarshaler struct {
	Input *types.PutObjectInput
}

// PutObjectAclMarshaler defines marshaler for PutObjectAcl operation
type PutObjectAclMarshaler struct {
	Input *types.PutObjectAclInput
}

// PutObjectLegalHoldMarshaler defines marshaler for PutObjectLegalHold operation
type PutObjectLegalHoldMarshaler struct {
	Input *types.PutObjectLegalHoldInput
}

// PutObjectLockConfigurationMarshaler defines marshaler for PutObjectLockConfiguration operation
type PutObjectLockConfigurationMarshaler struct {
	Input *types.PutObjectLockConfigurationInput
}

// PutObjectRetentionMarshaler defines marshaler for PutObjectRetention operation
type PutObjectRetentionMarshaler struct {
	Input *types.PutObjectRetentionInput
}

// PutObjectTaggingMarshaler defines marshaler for PutObjectTagging operation
type PutObjectTaggingMarshaler struct {
	Input *types.PutObjectTaggingInput
}

// PutPublicAccessBlockMarshaler defines marshaler for PutPublicAccessBlock operation
type PutPublicAccessBlockMarshaler struct {
	Input *types.PutPublicAccessBlockInput
}

// RestoreObjectMarshaler defines marshaler for RestoreObject operation
type RestoreObjectMarshaler struct {
	Input *types.RestoreObjectInput
}

// UploadPartMarshaler defines marshaler for UploadPart operation
type UploadPartMarshaler struct {
	Input *types.UploadPartInput
}

// UploadPartCopyMarshaler defines marshaler for UploadPartCopy operation
type UploadPartCopyMarshaler struct {
	Input *types.UploadPartCopyInput
}

func MarshalAbortMultipartUploadInputShapeAWSREST(v *types.AbortMultipartUploadInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalAbortMultipartUploadInputShapeAWSXML(v *types.AbortMultipartUploadInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalCompleteMultipartUploadInputShapeAWSREST(v *types.CompleteMultipartUploadInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCompleteMultipartUploadInputShapeAWSXML(v *types.CompleteMultipartUploadInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalCopyObjectInputShapeAWSREST(v *types.CopyObjectInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCopyObjectInputShapeAWSXML(v *types.CopyObjectInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalCreateBucketInputShapeAWSREST(v *types.CreateBucketInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCreateBucketInputShapeAWSXML(v *types.CreateBucketInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalCreateMultipartUploadInputShapeAWSREST(v *types.CreateMultipartUploadInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCreateMultipartUploadInputShapeAWSXML(v *types.CreateMultipartUploadInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalDeleteBucketInputShapeAWSREST(v *types.DeleteBucketInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeleteBucketInputShapeAWSXML(v *types.DeleteBucketInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalDeleteBucketAnalyticsConfigurationInputShapeAWSREST(v *types.DeleteBucketAnalyticsConfigurationInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeleteBucketAnalyticsConfigurationInputShapeAWSXML(v *types.DeleteBucketAnalyticsConfigurationInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalDeleteBucketCorsInputShapeAWSREST(v *types.DeleteBucketCorsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeleteBucketCorsInputShapeAWSXML(v *types.DeleteBucketCorsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalDeleteBucketEncryptionInputShapeAWSREST(v *types.DeleteBucketEncryptionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeleteBucketEncryptionInputShapeAWSXML(v *types.DeleteBucketEncryptionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalDeleteBucketInventoryConfigurationInputShapeAWSREST(v *types.DeleteBucketInventoryConfigurationInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeleteBucketInventoryConfigurationInputShapeAWSXML(v *types.DeleteBucketInventoryConfigurationInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalDeleteBucketLifecycleInputShapeAWSREST(v *types.DeleteBucketLifecycleInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeleteBucketLifecycleInputShapeAWSXML(v *types.DeleteBucketLifecycleInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalDeleteBucketMetricsConfigurationInputShapeAWSREST(v *types.DeleteBucketMetricsConfigurationInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeleteBucketMetricsConfigurationInputShapeAWSXML(v *types.DeleteBucketMetricsConfigurationInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalDeleteBucketPolicyInputShapeAWSREST(v *types.DeleteBucketPolicyInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeleteBucketPolicyInputShapeAWSXML(v *types.DeleteBucketPolicyInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalDeleteBucketReplicationInputShapeAWSREST(v *types.DeleteBucketReplicationInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeleteBucketReplicationInputShapeAWSXML(v *types.DeleteBucketReplicationInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalDeleteBucketTaggingInputShapeAWSREST(v *types.DeleteBucketTaggingInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeleteBucketTaggingInputShapeAWSXML(v *types.DeleteBucketTaggingInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalDeleteBucketWebsiteInputShapeAWSREST(v *types.DeleteBucketWebsiteInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeleteBucketWebsiteInputShapeAWSXML(v *types.DeleteBucketWebsiteInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalDeleteObjectInputShapeAWSREST(v *types.DeleteObjectInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeleteObjectInputShapeAWSXML(v *types.DeleteObjectInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalDeleteObjectTaggingInputShapeAWSREST(v *types.DeleteObjectTaggingInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeleteObjectTaggingInputShapeAWSXML(v *types.DeleteObjectTaggingInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalDeleteObjectsInputShapeAWSREST(v *types.DeleteObjectsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeleteObjectsInputShapeAWSXML(v *types.DeleteObjectsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalDeletePublicAccessBlockInputShapeAWSREST(v *types.DeletePublicAccessBlockInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeletePublicAccessBlockInputShapeAWSXML(v *types.DeletePublicAccessBlockInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalGetBucketAccelerateConfigurationInputShapeAWSREST(v *types.GetBucketAccelerateConfigurationInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetBucketAccelerateConfigurationInputShapeAWSXML(v *types.GetBucketAccelerateConfigurationInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalGetBucketAclInputShapeAWSREST(v *types.GetBucketAclInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetBucketAclInputShapeAWSXML(v *types.GetBucketAclInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalGetBucketAnalyticsConfigurationInputShapeAWSREST(v *types.GetBucketAnalyticsConfigurationInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetBucketAnalyticsConfigurationInputShapeAWSXML(v *types.GetBucketAnalyticsConfigurationInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalGetBucketCorsInputShapeAWSREST(v *types.GetBucketCorsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetBucketCorsInputShapeAWSXML(v *types.GetBucketCorsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalGetBucketEncryptionInputShapeAWSREST(v *types.GetBucketEncryptionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetBucketEncryptionInputShapeAWSXML(v *types.GetBucketEncryptionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalGetBucketInventoryConfigurationInputShapeAWSREST(v *types.GetBucketInventoryConfigurationInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetBucketInventoryConfigurationInputShapeAWSXML(v *types.GetBucketInventoryConfigurationInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalGetBucketLifecycleInputShapeAWSREST(v *types.GetBucketLifecycleInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetBucketLifecycleInputShapeAWSXML(v *types.GetBucketLifecycleInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalGetBucketLifecycleConfigurationInputShapeAWSREST(v *types.GetBucketLifecycleConfigurationInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetBucketLifecycleConfigurationInputShapeAWSXML(v *types.GetBucketLifecycleConfigurationInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalGetBucketLocationInputShapeAWSREST(v *types.GetBucketLocationInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetBucketLocationInputShapeAWSXML(v *types.GetBucketLocationInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalGetBucketLoggingInputShapeAWSREST(v *types.GetBucketLoggingInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetBucketLoggingInputShapeAWSXML(v *types.GetBucketLoggingInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalGetBucketMetricsConfigurationInputShapeAWSREST(v *types.GetBucketMetricsConfigurationInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetBucketMetricsConfigurationInputShapeAWSXML(v *types.GetBucketMetricsConfigurationInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalGetBucketNotificationInputShapeAWSREST(v *types.GetBucketNotificationInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetBucketNotificationInputShapeAWSXML(v *types.GetBucketNotificationInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalGetBucketNotificationConfigurationInputShapeAWSREST(v *types.GetBucketNotificationConfigurationInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetBucketNotificationConfigurationInputShapeAWSXML(v *types.GetBucketNotificationConfigurationInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalGetBucketPolicyInputShapeAWSREST(v *types.GetBucketPolicyInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetBucketPolicyInputShapeAWSXML(v *types.GetBucketPolicyInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalGetBucketPolicyStatusInputShapeAWSREST(v *types.GetBucketPolicyStatusInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetBucketPolicyStatusInputShapeAWSXML(v *types.GetBucketPolicyStatusInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalGetBucketReplicationInputShapeAWSREST(v *types.GetBucketReplicationInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetBucketReplicationInputShapeAWSXML(v *types.GetBucketReplicationInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalGetBucketRequestPaymentInputShapeAWSREST(v *types.GetBucketRequestPaymentInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetBucketRequestPaymentInputShapeAWSXML(v *types.GetBucketRequestPaymentInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalGetBucketTaggingInputShapeAWSREST(v *types.GetBucketTaggingInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetBucketTaggingInputShapeAWSXML(v *types.GetBucketTaggingInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalGetBucketVersioningInputShapeAWSREST(v *types.GetBucketVersioningInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetBucketVersioningInputShapeAWSXML(v *types.GetBucketVersioningInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalGetBucketWebsiteInputShapeAWSREST(v *types.GetBucketWebsiteInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetBucketWebsiteInputShapeAWSXML(v *types.GetBucketWebsiteInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalGetObjectInputShapeAWSREST(v *types.GetObjectInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetObjectInputShapeAWSXML(v *types.GetObjectInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalGetObjectAclInputShapeAWSREST(v *types.GetObjectAclInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetObjectAclInputShapeAWSXML(v *types.GetObjectAclInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalGetObjectLegalHoldInputShapeAWSREST(v *types.GetObjectLegalHoldInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetObjectLegalHoldInputShapeAWSXML(v *types.GetObjectLegalHoldInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalGetObjectLockConfigurationInputShapeAWSREST(v *types.GetObjectLockConfigurationInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetObjectLockConfigurationInputShapeAWSXML(v *types.GetObjectLockConfigurationInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalGetObjectRetentionInputShapeAWSREST(v *types.GetObjectRetentionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetObjectRetentionInputShapeAWSXML(v *types.GetObjectRetentionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalGetObjectTaggingInputShapeAWSREST(v *types.GetObjectTaggingInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetObjectTaggingInputShapeAWSXML(v *types.GetObjectTaggingInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalGetObjectTorrentInputShapeAWSREST(v *types.GetObjectTorrentInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetObjectTorrentInputShapeAWSXML(v *types.GetObjectTorrentInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalGetPublicAccessBlockInputShapeAWSREST(v *types.GetPublicAccessBlockInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetPublicAccessBlockInputShapeAWSXML(v *types.GetPublicAccessBlockInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalHeadBucketInputShapeAWSREST(v *types.HeadBucketInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalHeadBucketInputShapeAWSXML(v *types.HeadBucketInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalHeadObjectInputShapeAWSREST(v *types.HeadObjectInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalHeadObjectInputShapeAWSXML(v *types.HeadObjectInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalListBucketAnalyticsConfigurationsInputShapeAWSREST(v *types.ListBucketAnalyticsConfigurationsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListBucketAnalyticsConfigurationsInputShapeAWSXML(v *types.ListBucketAnalyticsConfigurationsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalListBucketInventoryConfigurationsInputShapeAWSREST(v *types.ListBucketInventoryConfigurationsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListBucketInventoryConfigurationsInputShapeAWSXML(v *types.ListBucketInventoryConfigurationsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalListBucketMetricsConfigurationsInputShapeAWSREST(v *types.ListBucketMetricsConfigurationsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListBucketMetricsConfigurationsInputShapeAWSXML(v *types.ListBucketMetricsConfigurationsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalListBucketsInputShapeAWSREST(v *types.ListBucketsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListBucketsInputShapeAWSXML(v *types.ListBucketsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalListMultipartUploadsInputShapeAWSREST(v *types.ListMultipartUploadsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListMultipartUploadsInputShapeAWSXML(v *types.ListMultipartUploadsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalListObjectVersionsInputShapeAWSREST(v *types.ListObjectVersionsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListObjectVersionsInputShapeAWSXML(v *types.ListObjectVersionsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalListObjectsInputShapeAWSREST(v *types.ListObjectsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListObjectsInputShapeAWSXML(v *types.ListObjectsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalListObjectsV2InputShapeAWSREST(v *types.ListObjectsV2Input, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListObjectsV2InputShapeAWSXML(v *types.ListObjectsV2Input, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalListPartsInputShapeAWSREST(v *types.ListPartsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListPartsInputShapeAWSXML(v *types.ListPartsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalPutBucketAccelerateConfigurationInputShapeAWSREST(v *types.PutBucketAccelerateConfigurationInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalPutBucketAccelerateConfigurationInputShapeAWSXML(v *types.PutBucketAccelerateConfigurationInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalPutBucketAclInputShapeAWSREST(v *types.PutBucketAclInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalPutBucketAclInputShapeAWSXML(v *types.PutBucketAclInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalPutBucketAnalyticsConfigurationInputShapeAWSREST(v *types.PutBucketAnalyticsConfigurationInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalPutBucketAnalyticsConfigurationInputShapeAWSXML(v *types.PutBucketAnalyticsConfigurationInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalPutBucketCorsInputShapeAWSREST(v *types.PutBucketCorsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalPutBucketCorsInputShapeAWSXML(v *types.PutBucketCorsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalPutBucketEncryptionInputShapeAWSREST(v *types.PutBucketEncryptionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalPutBucketEncryptionInputShapeAWSXML(v *types.PutBucketEncryptionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalPutBucketInventoryConfigurationInputShapeAWSREST(v *types.PutBucketInventoryConfigurationInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalPutBucketInventoryConfigurationInputShapeAWSXML(v *types.PutBucketInventoryConfigurationInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalPutBucketLifecycleInputShapeAWSREST(v *types.PutBucketLifecycleInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalPutBucketLifecycleInputShapeAWSXML(v *types.PutBucketLifecycleInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalPutBucketLifecycleConfigurationInputShapeAWSREST(v *types.PutBucketLifecycleConfigurationInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalPutBucketLifecycleConfigurationInputShapeAWSXML(v *types.PutBucketLifecycleConfigurationInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalPutBucketLoggingInputShapeAWSREST(v *types.PutBucketLoggingInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalPutBucketLoggingInputShapeAWSXML(v *types.PutBucketLoggingInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalPutBucketMetricsConfigurationInputShapeAWSREST(v *types.PutBucketMetricsConfigurationInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalPutBucketMetricsConfigurationInputShapeAWSXML(v *types.PutBucketMetricsConfigurationInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalPutBucketNotificationInputShapeAWSREST(v *types.PutBucketNotificationInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalPutBucketNotificationInputShapeAWSXML(v *types.PutBucketNotificationInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalPutBucketNotificationConfigurationInputShapeAWSREST(v *types.PutBucketNotificationConfigurationInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalPutBucketNotificationConfigurationInputShapeAWSXML(v *types.PutBucketNotificationConfigurationInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalPutBucketPolicyInputShapeAWSREST(v *types.PutBucketPolicyInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalPutBucketPolicyInputShapeAWSXML(v *types.PutBucketPolicyInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalPutBucketReplicationInputShapeAWSREST(v *types.PutBucketReplicationInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalPutBucketReplicationInputShapeAWSXML(v *types.PutBucketReplicationInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalPutBucketRequestPaymentInputShapeAWSREST(v *types.PutBucketRequestPaymentInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalPutBucketRequestPaymentInputShapeAWSXML(v *types.PutBucketRequestPaymentInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalPutBucketTaggingInputShapeAWSREST(v *types.PutBucketTaggingInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalPutBucketTaggingInputShapeAWSXML(v *types.PutBucketTaggingInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalPutBucketVersioningInputShapeAWSREST(v *types.PutBucketVersioningInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalPutBucketVersioningInputShapeAWSXML(v *types.PutBucketVersioningInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalPutBucketWebsiteInputShapeAWSREST(v *types.PutBucketWebsiteInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalPutBucketWebsiteInputShapeAWSXML(v *types.PutBucketWebsiteInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalPutObjectInputShapeAWSREST(v *types.PutObjectInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalPutObjectInputShapeAWSXML(v *types.PutObjectInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalPutObjectAclInputShapeAWSREST(v *types.PutObjectAclInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalPutObjectAclInputShapeAWSXML(v *types.PutObjectAclInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalPutObjectLegalHoldInputShapeAWSREST(v *types.PutObjectLegalHoldInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalPutObjectLegalHoldInputShapeAWSXML(v *types.PutObjectLegalHoldInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalPutObjectLockConfigurationInputShapeAWSREST(v *types.PutObjectLockConfigurationInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalPutObjectLockConfigurationInputShapeAWSXML(v *types.PutObjectLockConfigurationInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalPutObjectRetentionInputShapeAWSREST(v *types.PutObjectRetentionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalPutObjectRetentionInputShapeAWSXML(v *types.PutObjectRetentionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalPutObjectTaggingInputShapeAWSREST(v *types.PutObjectTaggingInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalPutObjectTaggingInputShapeAWSXML(v *types.PutObjectTaggingInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalPutPublicAccessBlockInputShapeAWSREST(v *types.PutPublicAccessBlockInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalPutPublicAccessBlockInputShapeAWSXML(v *types.PutPublicAccessBlockInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalRestoreObjectInputShapeAWSREST(v *types.RestoreObjectInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalRestoreObjectInputShapeAWSXML(v *types.RestoreObjectInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalUploadPartInputShapeAWSREST(v *types.UploadPartInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUploadPartInputShapeAWSXML(v *types.UploadPartInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}

func MarshalUploadPartCopyInputShapeAWSREST(v *types.UploadPartCopyInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUploadPartCopyInputShapeAWSXML(v *types.UploadPartCopyInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		var buf bytes.Buffer
		err := xmlutil.BuildXML(r.Params, xml.NewEncoder(&buf))
		if err != nil {
			r.Error = awserr.New("SerializationError", "failed to encode rest XML request", err)
			return err
		}
		r.SetBufferBody(buf.Bytes())
	}
	return nil
}
func (m AbortMultipartUploadMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalAbortMultipartUploadInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalAbortMultipartUploadInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m AbortMultipartUploadMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "AbortMultipartUpload.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m CompleteMultipartUploadMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCompleteMultipartUploadInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCompleteMultipartUploadInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CompleteMultipartUploadMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CompleteMultipartUpload.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m CopyObjectMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCopyObjectInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCopyObjectInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CopyObjectMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CopyObject.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m CreateBucketMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCreateBucketInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCreateBucketInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CreateBucketMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CreateBucket.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m CreateMultipartUploadMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCreateMultipartUploadInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCreateMultipartUploadInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CreateMultipartUploadMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CreateMultipartUpload.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteBucketMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteBucketInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeleteBucketInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteBucketMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteBucket.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteBucketAnalyticsConfigurationMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteBucketAnalyticsConfigurationInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeleteBucketAnalyticsConfigurationInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteBucketAnalyticsConfigurationMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteBucketAnalyticsConfiguration.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteBucketCorsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteBucketCorsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeleteBucketCorsInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteBucketCorsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteBucketCors.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteBucketEncryptionMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteBucketEncryptionInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeleteBucketEncryptionInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteBucketEncryptionMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteBucketEncryption.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteBucketInventoryConfigurationMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteBucketInventoryConfigurationInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeleteBucketInventoryConfigurationInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteBucketInventoryConfigurationMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteBucketInventoryConfiguration.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteBucketLifecycleMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteBucketLifecycleInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeleteBucketLifecycleInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteBucketLifecycleMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteBucketLifecycle.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteBucketMetricsConfigurationMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteBucketMetricsConfigurationInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeleteBucketMetricsConfigurationInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteBucketMetricsConfigurationMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteBucketMetricsConfiguration.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteBucketPolicyMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteBucketPolicyInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeleteBucketPolicyInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteBucketPolicyMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteBucketPolicy.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteBucketReplicationMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteBucketReplicationInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeleteBucketReplicationInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteBucketReplicationMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteBucketReplication.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteBucketTaggingMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteBucketTaggingInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeleteBucketTaggingInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteBucketTaggingMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteBucketTagging.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteBucketWebsiteMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteBucketWebsiteInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeleteBucketWebsiteInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteBucketWebsiteMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteBucketWebsite.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteObjectMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteObjectInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeleteObjectInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteObjectMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteObject.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteObjectTaggingMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteObjectTaggingInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeleteObjectTaggingInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteObjectTaggingMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteObjectTagging.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteObjectsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteObjectsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeleteObjectsInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteObjectsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteObjects.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeletePublicAccessBlockMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeletePublicAccessBlockInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeletePublicAccessBlockInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeletePublicAccessBlockMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeletePublicAccessBlock.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetBucketAccelerateConfigurationMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetBucketAccelerateConfigurationInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetBucketAccelerateConfigurationInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetBucketAccelerateConfigurationMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetBucketAccelerateConfiguration.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetBucketAclMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetBucketAclInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetBucketAclInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetBucketAclMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetBucketAcl.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetBucketAnalyticsConfigurationMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetBucketAnalyticsConfigurationInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetBucketAnalyticsConfigurationInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetBucketAnalyticsConfigurationMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetBucketAnalyticsConfiguration.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetBucketCorsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetBucketCorsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetBucketCorsInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetBucketCorsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetBucketCors.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetBucketEncryptionMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetBucketEncryptionInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetBucketEncryptionInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetBucketEncryptionMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetBucketEncryption.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetBucketInventoryConfigurationMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetBucketInventoryConfigurationInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetBucketInventoryConfigurationInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetBucketInventoryConfigurationMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetBucketInventoryConfiguration.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetBucketLifecycleMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetBucketLifecycleInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetBucketLifecycleInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetBucketLifecycleMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetBucketLifecycle.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetBucketLifecycleConfigurationMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetBucketLifecycleConfigurationInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetBucketLifecycleConfigurationInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetBucketLifecycleConfigurationMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetBucketLifecycleConfiguration.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetBucketLocationMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetBucketLocationInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetBucketLocationInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetBucketLocationMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetBucketLocation.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetBucketLoggingMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetBucketLoggingInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetBucketLoggingInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetBucketLoggingMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetBucketLogging.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetBucketMetricsConfigurationMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetBucketMetricsConfigurationInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetBucketMetricsConfigurationInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetBucketMetricsConfigurationMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetBucketMetricsConfiguration.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetBucketNotificationMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetBucketNotificationInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetBucketNotificationInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetBucketNotificationMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetBucketNotification.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetBucketNotificationConfigurationMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetBucketNotificationConfigurationInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetBucketNotificationConfigurationInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetBucketNotificationConfigurationMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetBucketNotificationConfiguration.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetBucketPolicyMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetBucketPolicyInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetBucketPolicyInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetBucketPolicyMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetBucketPolicy.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetBucketPolicyStatusMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetBucketPolicyStatusInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetBucketPolicyStatusInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetBucketPolicyStatusMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetBucketPolicyStatus.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetBucketReplicationMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetBucketReplicationInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetBucketReplicationInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetBucketReplicationMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetBucketReplication.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetBucketRequestPaymentMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetBucketRequestPaymentInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetBucketRequestPaymentInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetBucketRequestPaymentMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetBucketRequestPayment.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetBucketTaggingMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetBucketTaggingInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetBucketTaggingInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetBucketTaggingMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetBucketTagging.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetBucketVersioningMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetBucketVersioningInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetBucketVersioningInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetBucketVersioningMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetBucketVersioning.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetBucketWebsiteMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetBucketWebsiteInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetBucketWebsiteInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetBucketWebsiteMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetBucketWebsite.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetObjectMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetObjectInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetObjectInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetObjectMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetObject.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetObjectAclMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetObjectAclInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetObjectAclInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetObjectAclMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetObjectAcl.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetObjectLegalHoldMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetObjectLegalHoldInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetObjectLegalHoldInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetObjectLegalHoldMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetObjectLegalHold.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetObjectLockConfigurationMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetObjectLockConfigurationInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetObjectLockConfigurationInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetObjectLockConfigurationMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetObjectLockConfiguration.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetObjectRetentionMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetObjectRetentionInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetObjectRetentionInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetObjectRetentionMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetObjectRetention.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetObjectTaggingMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetObjectTaggingInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetObjectTaggingInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetObjectTaggingMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetObjectTagging.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetObjectTorrentMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetObjectTorrentInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetObjectTorrentInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetObjectTorrentMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetObjectTorrent.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetPublicAccessBlockMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetPublicAccessBlockInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetPublicAccessBlockInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetPublicAccessBlockMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetPublicAccessBlock.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m HeadBucketMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalHeadBucketInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalHeadBucketInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m HeadBucketMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "HeadBucket.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m HeadObjectMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalHeadObjectInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalHeadObjectInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m HeadObjectMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "HeadObject.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListBucketAnalyticsConfigurationsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListBucketAnalyticsConfigurationsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListBucketAnalyticsConfigurationsInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListBucketAnalyticsConfigurationsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListBucketAnalyticsConfigurations.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListBucketInventoryConfigurationsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListBucketInventoryConfigurationsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListBucketInventoryConfigurationsInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListBucketInventoryConfigurationsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListBucketInventoryConfigurations.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListBucketMetricsConfigurationsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListBucketMetricsConfigurationsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListBucketMetricsConfigurationsInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListBucketMetricsConfigurationsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListBucketMetricsConfigurations.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListBucketsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListBucketsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListBucketsInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListBucketsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListBuckets.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListMultipartUploadsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListMultipartUploadsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListMultipartUploadsInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListMultipartUploadsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListMultipartUploads.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListObjectVersionsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListObjectVersionsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListObjectVersionsInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListObjectVersionsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListObjectVersions.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListObjectsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListObjectsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListObjectsInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListObjectsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListObjects.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListObjectsV2Marshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListObjectsV2InputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListObjectsV2InputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListObjectsV2Marshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListObjectsV2.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListPartsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListPartsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListPartsInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListPartsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListParts.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m PutBucketAccelerateConfigurationMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalPutBucketAccelerateConfigurationInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalPutBucketAccelerateConfigurationInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m PutBucketAccelerateConfigurationMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "PutBucketAccelerateConfiguration.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m PutBucketAclMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalPutBucketAclInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalPutBucketAclInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m PutBucketAclMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "PutBucketAcl.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m PutBucketAnalyticsConfigurationMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalPutBucketAnalyticsConfigurationInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalPutBucketAnalyticsConfigurationInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m PutBucketAnalyticsConfigurationMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "PutBucketAnalyticsConfiguration.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m PutBucketCorsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalPutBucketCorsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalPutBucketCorsInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m PutBucketCorsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "PutBucketCors.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m PutBucketEncryptionMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalPutBucketEncryptionInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalPutBucketEncryptionInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m PutBucketEncryptionMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "PutBucketEncryption.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m PutBucketInventoryConfigurationMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalPutBucketInventoryConfigurationInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalPutBucketInventoryConfigurationInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m PutBucketInventoryConfigurationMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "PutBucketInventoryConfiguration.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m PutBucketLifecycleMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalPutBucketLifecycleInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalPutBucketLifecycleInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m PutBucketLifecycleMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "PutBucketLifecycle.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m PutBucketLifecycleConfigurationMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalPutBucketLifecycleConfigurationInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalPutBucketLifecycleConfigurationInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m PutBucketLifecycleConfigurationMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "PutBucketLifecycleConfiguration.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m PutBucketLoggingMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalPutBucketLoggingInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalPutBucketLoggingInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m PutBucketLoggingMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "PutBucketLogging.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m PutBucketMetricsConfigurationMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalPutBucketMetricsConfigurationInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalPutBucketMetricsConfigurationInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m PutBucketMetricsConfigurationMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "PutBucketMetricsConfiguration.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m PutBucketNotificationMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalPutBucketNotificationInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalPutBucketNotificationInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m PutBucketNotificationMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "PutBucketNotification.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m PutBucketNotificationConfigurationMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalPutBucketNotificationConfigurationInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalPutBucketNotificationConfigurationInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m PutBucketNotificationConfigurationMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "PutBucketNotificationConfiguration.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m PutBucketPolicyMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalPutBucketPolicyInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalPutBucketPolicyInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m PutBucketPolicyMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "PutBucketPolicy.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m PutBucketReplicationMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalPutBucketReplicationInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalPutBucketReplicationInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m PutBucketReplicationMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "PutBucketReplication.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m PutBucketRequestPaymentMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalPutBucketRequestPaymentInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalPutBucketRequestPaymentInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m PutBucketRequestPaymentMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "PutBucketRequestPayment.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m PutBucketTaggingMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalPutBucketTaggingInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalPutBucketTaggingInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m PutBucketTaggingMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "PutBucketTagging.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m PutBucketVersioningMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalPutBucketVersioningInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalPutBucketVersioningInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m PutBucketVersioningMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "PutBucketVersioning.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m PutBucketWebsiteMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalPutBucketWebsiteInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalPutBucketWebsiteInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m PutBucketWebsiteMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "PutBucketWebsite.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m PutObjectMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalPutObjectInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalPutObjectInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m PutObjectMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "PutObject.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m PutObjectAclMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalPutObjectAclInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalPutObjectAclInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m PutObjectAclMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "PutObjectAcl.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m PutObjectLegalHoldMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalPutObjectLegalHoldInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalPutObjectLegalHoldInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m PutObjectLegalHoldMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "PutObjectLegalHold.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m PutObjectLockConfigurationMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalPutObjectLockConfigurationInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalPutObjectLockConfigurationInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m PutObjectLockConfigurationMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "PutObjectLockConfiguration.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m PutObjectRetentionMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalPutObjectRetentionInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalPutObjectRetentionInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m PutObjectRetentionMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "PutObjectRetention.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m PutObjectTaggingMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalPutObjectTaggingInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalPutObjectTaggingInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m PutObjectTaggingMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "PutObjectTagging.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m PutPublicAccessBlockMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalPutPublicAccessBlockInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalPutPublicAccessBlockInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m PutPublicAccessBlockMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "PutPublicAccessBlock.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m RestoreObjectMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalRestoreObjectInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalRestoreObjectInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m RestoreObjectMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "RestoreObject.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UploadPartMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUploadPartInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUploadPartInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UploadPartMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UploadPart.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UploadPartCopyMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUploadPartCopyInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUploadPartCopyInputShapeAWSXML(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UploadPartCopyMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UploadPartCopy.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}
