// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package s3

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/s3/types"
)

const opCreateMultipartUpload = "CreateMultipartUpload"

// CreateMultipartUploadRequest returns a request value for making API operation for
// Amazon Simple Storage Service.
//
// Initiates a multipart upload and returns an upload ID.
//
// Note: After you initiate multipart upload and upload one or more parts, you
// must either complete or abort multipart upload in order to stop getting charged
// for storage of the uploaded parts. Only after you either complete or abort
// multipart upload, Amazon S3 frees up the parts storage and stops charging
// you for the parts storage.
//
//    // Example sending a request using CreateMultipartUploadRequest.
//    req := client.CreateMultipartUploadRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/CreateMultipartUpload
func (c *Client) CreateMultipartUploadRequest(input *types.CreateMultipartUploadInput) CreateMultipartUploadRequest {
	op := &aws.Operation{
		Name:       opCreateMultipartUpload,
		HTTPMethod: "POST",
		HTTPPath:   "/{Bucket}/{Key+}?uploads",
	}

	if input == nil {
		input = &types.CreateMultipartUploadInput{}
	}

	req := c.newRequest(op, input, &types.CreateMultipartUploadOutput{})
	return CreateMultipartUploadRequest{Request: req, Input: input, Copy: c.CreateMultipartUploadRequest}
}

// CreateMultipartUploadRequest is the request type for the
// CreateMultipartUpload API operation.
type CreateMultipartUploadRequest struct {
	*aws.Request
	Input *types.CreateMultipartUploadInput
	Copy  func(*types.CreateMultipartUploadInput) CreateMultipartUploadRequest
}

// Send marshals and sends the CreateMultipartUpload API request.
func (r CreateMultipartUploadRequest) Send(ctx context.Context) (*CreateMultipartUploadResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &CreateMultipartUploadResponse{
		CreateMultipartUploadOutput: r.Request.Data.(*types.CreateMultipartUploadOutput),
		response:                    &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// CreateMultipartUploadResponse is the response type for the
// CreateMultipartUpload API operation.
type CreateMultipartUploadResponse struct {
	*types.CreateMultipartUploadOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// CreateMultipartUpload request.
func (r *CreateMultipartUploadResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
