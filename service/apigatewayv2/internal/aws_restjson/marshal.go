// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

// Package aws_restjson service, marshal.go contains the generated operation marshalers and methods on it.

package aws_restjson

import (
	"bytes"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/awserr"
	"github.com/aws/aws-sdk-go-v2/private/protocol/jsonrpc"
	"github.com/aws/aws-sdk-go-v2/private/protocol/rest"
	"github.com/aws/aws-sdk-go-v2/service/apigatewayv2/types"
)

var _ bytes.Buffer
var _ awserr.Error

// CreateApiMarshaler defines marshaler for CreateApi operation
type CreateApiMarshaler struct {
	Input *types.CreateApiInput
}

// CreateApiMappingMarshaler defines marshaler for CreateApiMapping operation
type CreateApiMappingMarshaler struct {
	Input *types.CreateApiMappingInput
}

// CreateAuthorizerMarshaler defines marshaler for CreateAuthorizer operation
type CreateAuthorizerMarshaler struct {
	Input *types.CreateAuthorizerInput
}

// CreateDeploymentMarshaler defines marshaler for CreateDeployment operation
type CreateDeploymentMarshaler struct {
	Input *types.CreateDeploymentInput
}

// CreateDomainNameMarshaler defines marshaler for CreateDomainName operation
type CreateDomainNameMarshaler struct {
	Input *types.CreateDomainNameInput
}

// CreateIntegrationMarshaler defines marshaler for CreateIntegration operation
type CreateIntegrationMarshaler struct {
	Input *types.CreateIntegrationInput
}

// CreateIntegrationResponseMarshaler defines marshaler for CreateIntegrationResponse operation
type CreateIntegrationResponseMarshaler struct {
	Input *types.CreateIntegrationResponseInput
}

// CreateModelMarshaler defines marshaler for CreateModel operation
type CreateModelMarshaler struct {
	Input *types.CreateModelInput
}

// CreateRouteMarshaler defines marshaler for CreateRoute operation
type CreateRouteMarshaler struct {
	Input *types.CreateRouteInput
}

// CreateRouteResponseMarshaler defines marshaler for CreateRouteResponse operation
type CreateRouteResponseMarshaler struct {
	Input *types.CreateRouteResponseInput
}

// CreateStageMarshaler defines marshaler for CreateStage operation
type CreateStageMarshaler struct {
	Input *types.CreateStageInput
}

// DeleteApiMarshaler defines marshaler for DeleteApi operation
type DeleteApiMarshaler struct {
	Input *types.DeleteApiInput
}

// DeleteApiMappingMarshaler defines marshaler for DeleteApiMapping operation
type DeleteApiMappingMarshaler struct {
	Input *types.DeleteApiMappingInput
}

// DeleteAuthorizerMarshaler defines marshaler for DeleteAuthorizer operation
type DeleteAuthorizerMarshaler struct {
	Input *types.DeleteAuthorizerInput
}

// DeleteDeploymentMarshaler defines marshaler for DeleteDeployment operation
type DeleteDeploymentMarshaler struct {
	Input *types.DeleteDeploymentInput
}

// DeleteDomainNameMarshaler defines marshaler for DeleteDomainName operation
type DeleteDomainNameMarshaler struct {
	Input *types.DeleteDomainNameInput
}

// DeleteIntegrationMarshaler defines marshaler for DeleteIntegration operation
type DeleteIntegrationMarshaler struct {
	Input *types.DeleteIntegrationInput
}

// DeleteIntegrationResponseMarshaler defines marshaler for DeleteIntegrationResponse operation
type DeleteIntegrationResponseMarshaler struct {
	Input *types.DeleteIntegrationResponseInput
}

// DeleteModelMarshaler defines marshaler for DeleteModel operation
type DeleteModelMarshaler struct {
	Input *types.DeleteModelInput
}

// DeleteRouteMarshaler defines marshaler for DeleteRoute operation
type DeleteRouteMarshaler struct {
	Input *types.DeleteRouteInput
}

// DeleteRouteResponseMarshaler defines marshaler for DeleteRouteResponse operation
type DeleteRouteResponseMarshaler struct {
	Input *types.DeleteRouteResponseInput
}

// DeleteStageMarshaler defines marshaler for DeleteStage operation
type DeleteStageMarshaler struct {
	Input *types.DeleteStageInput
}

// GetApiMarshaler defines marshaler for GetApi operation
type GetApiMarshaler struct {
	Input *types.GetApiInput
}

// GetApiMappingMarshaler defines marshaler for GetApiMapping operation
type GetApiMappingMarshaler struct {
	Input *types.GetApiMappingInput
}

// GetApiMappingsMarshaler defines marshaler for GetApiMappings operation
type GetApiMappingsMarshaler struct {
	Input *types.GetApiMappingsInput
}

// GetApisMarshaler defines marshaler for GetApis operation
type GetApisMarshaler struct {
	Input *types.GetApisInput
}

// GetAuthorizerMarshaler defines marshaler for GetAuthorizer operation
type GetAuthorizerMarshaler struct {
	Input *types.GetAuthorizerInput
}

// GetAuthorizersMarshaler defines marshaler for GetAuthorizers operation
type GetAuthorizersMarshaler struct {
	Input *types.GetAuthorizersInput
}

// GetDeploymentMarshaler defines marshaler for GetDeployment operation
type GetDeploymentMarshaler struct {
	Input *types.GetDeploymentInput
}

// GetDeploymentsMarshaler defines marshaler for GetDeployments operation
type GetDeploymentsMarshaler struct {
	Input *types.GetDeploymentsInput
}

// GetDomainNameMarshaler defines marshaler for GetDomainName operation
type GetDomainNameMarshaler struct {
	Input *types.GetDomainNameInput
}

// GetDomainNamesMarshaler defines marshaler for GetDomainNames operation
type GetDomainNamesMarshaler struct {
	Input *types.GetDomainNamesInput
}

// GetIntegrationMarshaler defines marshaler for GetIntegration operation
type GetIntegrationMarshaler struct {
	Input *types.GetIntegrationInput
}

// GetIntegrationResponseMarshaler defines marshaler for GetIntegrationResponse operation
type GetIntegrationResponseMarshaler struct {
	Input *types.GetIntegrationResponseInput
}

// GetIntegrationResponsesMarshaler defines marshaler for GetIntegrationResponses operation
type GetIntegrationResponsesMarshaler struct {
	Input *types.GetIntegrationResponsesInput
}

// GetIntegrationsMarshaler defines marshaler for GetIntegrations operation
type GetIntegrationsMarshaler struct {
	Input *types.GetIntegrationsInput
}

// GetModelMarshaler defines marshaler for GetModel operation
type GetModelMarshaler struct {
	Input *types.GetModelInput
}

// GetModelTemplateMarshaler defines marshaler for GetModelTemplate operation
type GetModelTemplateMarshaler struct {
	Input *types.GetModelTemplateInput
}

// GetModelsMarshaler defines marshaler for GetModels operation
type GetModelsMarshaler struct {
	Input *types.GetModelsInput
}

// GetRouteMarshaler defines marshaler for GetRoute operation
type GetRouteMarshaler struct {
	Input *types.GetRouteInput
}

// GetRouteResponseMarshaler defines marshaler for GetRouteResponse operation
type GetRouteResponseMarshaler struct {
	Input *types.GetRouteResponseInput
}

// GetRouteResponsesMarshaler defines marshaler for GetRouteResponses operation
type GetRouteResponsesMarshaler struct {
	Input *types.GetRouteResponsesInput
}

// GetRoutesMarshaler defines marshaler for GetRoutes operation
type GetRoutesMarshaler struct {
	Input *types.GetRoutesInput
}

// GetStageMarshaler defines marshaler for GetStage operation
type GetStageMarshaler struct {
	Input *types.GetStageInput
}

// GetStagesMarshaler defines marshaler for GetStages operation
type GetStagesMarshaler struct {
	Input *types.GetStagesInput
}

// GetTagsMarshaler defines marshaler for GetTags operation
type GetTagsMarshaler struct {
	Input *types.GetTagsInput
}

// TagResourceMarshaler defines marshaler for TagResource operation
type TagResourceMarshaler struct {
	Input *types.TagResourceInput
}

// UntagResourceMarshaler defines marshaler for UntagResource operation
type UntagResourceMarshaler struct {
	Input *types.UntagResourceInput
}

// UpdateApiMarshaler defines marshaler for UpdateApi operation
type UpdateApiMarshaler struct {
	Input *types.UpdateApiInput
}

// UpdateApiMappingMarshaler defines marshaler for UpdateApiMapping operation
type UpdateApiMappingMarshaler struct {
	Input *types.UpdateApiMappingInput
}

// UpdateAuthorizerMarshaler defines marshaler for UpdateAuthorizer operation
type UpdateAuthorizerMarshaler struct {
	Input *types.UpdateAuthorizerInput
}

// UpdateDeploymentMarshaler defines marshaler for UpdateDeployment operation
type UpdateDeploymentMarshaler struct {
	Input *types.UpdateDeploymentInput
}

// UpdateDomainNameMarshaler defines marshaler for UpdateDomainName operation
type UpdateDomainNameMarshaler struct {
	Input *types.UpdateDomainNameInput
}

// UpdateIntegrationMarshaler defines marshaler for UpdateIntegration operation
type UpdateIntegrationMarshaler struct {
	Input *types.UpdateIntegrationInput
}

// UpdateIntegrationResponseMarshaler defines marshaler for UpdateIntegrationResponse operation
type UpdateIntegrationResponseMarshaler struct {
	Input *types.UpdateIntegrationResponseInput
}

// UpdateModelMarshaler defines marshaler for UpdateModel operation
type UpdateModelMarshaler struct {
	Input *types.UpdateModelInput
}

// UpdateRouteMarshaler defines marshaler for UpdateRoute operation
type UpdateRouteMarshaler struct {
	Input *types.UpdateRouteInput
}

// UpdateRouteResponseMarshaler defines marshaler for UpdateRouteResponse operation
type UpdateRouteResponseMarshaler struct {
	Input *types.UpdateRouteResponseInput
}

// UpdateStageMarshaler defines marshaler for UpdateStage operation
type UpdateStageMarshaler struct {
	Input *types.UpdateStageInput
}

func MarshalCreateApiInputShapeAWSREST(v *types.CreateApiInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCreateApiInputShapeAWSJSON(v *types.CreateApiInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalCreateApiMappingInputShapeAWSREST(v *types.CreateApiMappingInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCreateApiMappingInputShapeAWSJSON(v *types.CreateApiMappingInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalCreateAuthorizerInputShapeAWSREST(v *types.CreateAuthorizerInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCreateAuthorizerInputShapeAWSJSON(v *types.CreateAuthorizerInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalCreateDeploymentInputShapeAWSREST(v *types.CreateDeploymentInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCreateDeploymentInputShapeAWSJSON(v *types.CreateDeploymentInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalCreateDomainNameInputShapeAWSREST(v *types.CreateDomainNameInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCreateDomainNameInputShapeAWSJSON(v *types.CreateDomainNameInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalCreateIntegrationInputShapeAWSREST(v *types.CreateIntegrationInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCreateIntegrationInputShapeAWSJSON(v *types.CreateIntegrationInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalCreateIntegrationResponseInputShapeAWSREST(v *types.CreateIntegrationResponseInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCreateIntegrationResponseInputShapeAWSJSON(v *types.CreateIntegrationResponseInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalCreateModelInputShapeAWSREST(v *types.CreateModelInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCreateModelInputShapeAWSJSON(v *types.CreateModelInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalCreateRouteInputShapeAWSREST(v *types.CreateRouteInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCreateRouteInputShapeAWSJSON(v *types.CreateRouteInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalCreateRouteResponseInputShapeAWSREST(v *types.CreateRouteResponseInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCreateRouteResponseInputShapeAWSJSON(v *types.CreateRouteResponseInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalCreateStageInputShapeAWSREST(v *types.CreateStageInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCreateStageInputShapeAWSJSON(v *types.CreateStageInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDeleteApiInputShapeAWSREST(v *types.DeleteApiInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeleteApiInputShapeAWSJSON(v *types.DeleteApiInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDeleteApiMappingInputShapeAWSREST(v *types.DeleteApiMappingInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeleteApiMappingInputShapeAWSJSON(v *types.DeleteApiMappingInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDeleteAuthorizerInputShapeAWSREST(v *types.DeleteAuthorizerInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeleteAuthorizerInputShapeAWSJSON(v *types.DeleteAuthorizerInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDeleteDeploymentInputShapeAWSREST(v *types.DeleteDeploymentInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeleteDeploymentInputShapeAWSJSON(v *types.DeleteDeploymentInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDeleteDomainNameInputShapeAWSREST(v *types.DeleteDomainNameInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeleteDomainNameInputShapeAWSJSON(v *types.DeleteDomainNameInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDeleteIntegrationInputShapeAWSREST(v *types.DeleteIntegrationInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeleteIntegrationInputShapeAWSJSON(v *types.DeleteIntegrationInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDeleteIntegrationResponseInputShapeAWSREST(v *types.DeleteIntegrationResponseInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeleteIntegrationResponseInputShapeAWSJSON(v *types.DeleteIntegrationResponseInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDeleteModelInputShapeAWSREST(v *types.DeleteModelInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeleteModelInputShapeAWSJSON(v *types.DeleteModelInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDeleteRouteInputShapeAWSREST(v *types.DeleteRouteInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeleteRouteInputShapeAWSJSON(v *types.DeleteRouteInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDeleteRouteResponseInputShapeAWSREST(v *types.DeleteRouteResponseInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeleteRouteResponseInputShapeAWSJSON(v *types.DeleteRouteResponseInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDeleteStageInputShapeAWSREST(v *types.DeleteStageInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeleteStageInputShapeAWSJSON(v *types.DeleteStageInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalGetApiInputShapeAWSREST(v *types.GetApiInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetApiInputShapeAWSJSON(v *types.GetApiInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalGetApiMappingInputShapeAWSREST(v *types.GetApiMappingInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetApiMappingInputShapeAWSJSON(v *types.GetApiMappingInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalGetApiMappingsInputShapeAWSREST(v *types.GetApiMappingsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetApiMappingsInputShapeAWSJSON(v *types.GetApiMappingsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalGetApisInputShapeAWSREST(v *types.GetApisInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetApisInputShapeAWSJSON(v *types.GetApisInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalGetAuthorizerInputShapeAWSREST(v *types.GetAuthorizerInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetAuthorizerInputShapeAWSJSON(v *types.GetAuthorizerInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalGetAuthorizersInputShapeAWSREST(v *types.GetAuthorizersInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetAuthorizersInputShapeAWSJSON(v *types.GetAuthorizersInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalGetDeploymentInputShapeAWSREST(v *types.GetDeploymentInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetDeploymentInputShapeAWSJSON(v *types.GetDeploymentInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalGetDeploymentsInputShapeAWSREST(v *types.GetDeploymentsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetDeploymentsInputShapeAWSJSON(v *types.GetDeploymentsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalGetDomainNameInputShapeAWSREST(v *types.GetDomainNameInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetDomainNameInputShapeAWSJSON(v *types.GetDomainNameInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalGetDomainNamesInputShapeAWSREST(v *types.GetDomainNamesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetDomainNamesInputShapeAWSJSON(v *types.GetDomainNamesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalGetIntegrationInputShapeAWSREST(v *types.GetIntegrationInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetIntegrationInputShapeAWSJSON(v *types.GetIntegrationInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalGetIntegrationResponseInputShapeAWSREST(v *types.GetIntegrationResponseInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetIntegrationResponseInputShapeAWSJSON(v *types.GetIntegrationResponseInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalGetIntegrationResponsesInputShapeAWSREST(v *types.GetIntegrationResponsesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetIntegrationResponsesInputShapeAWSJSON(v *types.GetIntegrationResponsesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalGetIntegrationsInputShapeAWSREST(v *types.GetIntegrationsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetIntegrationsInputShapeAWSJSON(v *types.GetIntegrationsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalGetModelInputShapeAWSREST(v *types.GetModelInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetModelInputShapeAWSJSON(v *types.GetModelInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalGetModelTemplateInputShapeAWSREST(v *types.GetModelTemplateInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetModelTemplateInputShapeAWSJSON(v *types.GetModelTemplateInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalGetModelsInputShapeAWSREST(v *types.GetModelsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetModelsInputShapeAWSJSON(v *types.GetModelsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalGetRouteInputShapeAWSREST(v *types.GetRouteInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetRouteInputShapeAWSJSON(v *types.GetRouteInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalGetRouteResponseInputShapeAWSREST(v *types.GetRouteResponseInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetRouteResponseInputShapeAWSJSON(v *types.GetRouteResponseInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalGetRouteResponsesInputShapeAWSREST(v *types.GetRouteResponsesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetRouteResponsesInputShapeAWSJSON(v *types.GetRouteResponsesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalGetRoutesInputShapeAWSREST(v *types.GetRoutesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetRoutesInputShapeAWSJSON(v *types.GetRoutesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalGetStageInputShapeAWSREST(v *types.GetStageInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetStageInputShapeAWSJSON(v *types.GetStageInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalGetStagesInputShapeAWSREST(v *types.GetStagesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetStagesInputShapeAWSJSON(v *types.GetStagesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalGetTagsInputShapeAWSREST(v *types.GetTagsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetTagsInputShapeAWSJSON(v *types.GetTagsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalTagResourceInputShapeAWSREST(v *types.TagResourceInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalTagResourceInputShapeAWSJSON(v *types.TagResourceInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalUntagResourceInputShapeAWSREST(v *types.UntagResourceInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUntagResourceInputShapeAWSJSON(v *types.UntagResourceInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalUpdateApiInputShapeAWSREST(v *types.UpdateApiInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUpdateApiInputShapeAWSJSON(v *types.UpdateApiInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalUpdateApiMappingInputShapeAWSREST(v *types.UpdateApiMappingInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUpdateApiMappingInputShapeAWSJSON(v *types.UpdateApiMappingInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalUpdateAuthorizerInputShapeAWSREST(v *types.UpdateAuthorizerInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUpdateAuthorizerInputShapeAWSJSON(v *types.UpdateAuthorizerInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalUpdateDeploymentInputShapeAWSREST(v *types.UpdateDeploymentInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUpdateDeploymentInputShapeAWSJSON(v *types.UpdateDeploymentInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalUpdateDomainNameInputShapeAWSREST(v *types.UpdateDomainNameInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUpdateDomainNameInputShapeAWSJSON(v *types.UpdateDomainNameInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalUpdateIntegrationInputShapeAWSREST(v *types.UpdateIntegrationInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUpdateIntegrationInputShapeAWSJSON(v *types.UpdateIntegrationInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalUpdateIntegrationResponseInputShapeAWSREST(v *types.UpdateIntegrationResponseInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUpdateIntegrationResponseInputShapeAWSJSON(v *types.UpdateIntegrationResponseInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalUpdateModelInputShapeAWSREST(v *types.UpdateModelInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUpdateModelInputShapeAWSJSON(v *types.UpdateModelInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalUpdateRouteInputShapeAWSREST(v *types.UpdateRouteInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUpdateRouteInputShapeAWSJSON(v *types.UpdateRouteInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalUpdateRouteResponseInputShapeAWSREST(v *types.UpdateRouteResponseInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUpdateRouteResponseInputShapeAWSJSON(v *types.UpdateRouteResponseInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalUpdateStageInputShapeAWSREST(v *types.UpdateStageInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUpdateStageInputShapeAWSJSON(v *types.UpdateStageInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}
func (m CreateApiMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCreateApiInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCreateApiInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CreateApiMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CreateApi.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m CreateApiMappingMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCreateApiMappingInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCreateApiMappingInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CreateApiMappingMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CreateApiMapping.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m CreateAuthorizerMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCreateAuthorizerInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCreateAuthorizerInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CreateAuthorizerMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CreateAuthorizer.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m CreateDeploymentMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCreateDeploymentInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCreateDeploymentInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CreateDeploymentMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CreateDeployment.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m CreateDomainNameMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCreateDomainNameInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCreateDomainNameInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CreateDomainNameMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CreateDomainName.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m CreateIntegrationMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCreateIntegrationInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCreateIntegrationInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CreateIntegrationMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CreateIntegration.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m CreateIntegrationResponseMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCreateIntegrationResponseInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCreateIntegrationResponseInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CreateIntegrationResponseMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CreateIntegrationResponse.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m CreateModelMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCreateModelInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCreateModelInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CreateModelMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CreateModel.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m CreateRouteMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCreateRouteInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCreateRouteInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CreateRouteMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CreateRoute.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m CreateRouteResponseMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCreateRouteResponseInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCreateRouteResponseInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CreateRouteResponseMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CreateRouteResponse.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m CreateStageMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCreateStageInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCreateStageInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CreateStageMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CreateStage.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteApiMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteApiInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeleteApiInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteApiMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteApi.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteApiMappingMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteApiMappingInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeleteApiMappingInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteApiMappingMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteApiMapping.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteAuthorizerMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteAuthorizerInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeleteAuthorizerInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteAuthorizerMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteAuthorizer.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteDeploymentMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteDeploymentInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeleteDeploymentInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteDeploymentMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteDeployment.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteDomainNameMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteDomainNameInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeleteDomainNameInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteDomainNameMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteDomainName.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteIntegrationMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteIntegrationInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeleteIntegrationInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteIntegrationMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteIntegration.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteIntegrationResponseMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteIntegrationResponseInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeleteIntegrationResponseInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteIntegrationResponseMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteIntegrationResponse.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteModelMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteModelInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeleteModelInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteModelMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteModel.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteRouteMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteRouteInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeleteRouteInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteRouteMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteRoute.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteRouteResponseMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteRouteResponseInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeleteRouteResponseInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteRouteResponseMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteRouteResponse.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteStageMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteStageInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeleteStageInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteStageMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteStage.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetApiMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetApiInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetApiInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetApiMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetApi.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetApiMappingMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetApiMappingInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetApiMappingInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetApiMappingMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetApiMapping.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetApiMappingsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetApiMappingsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetApiMappingsInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetApiMappingsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetApiMappings.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetApisMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetApisInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetApisInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetApisMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetApis.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetAuthorizerMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetAuthorizerInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetAuthorizerInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetAuthorizerMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetAuthorizer.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetAuthorizersMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetAuthorizersInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetAuthorizersInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetAuthorizersMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetAuthorizers.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetDeploymentMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetDeploymentInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetDeploymentInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetDeploymentMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetDeployment.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetDeploymentsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetDeploymentsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetDeploymentsInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetDeploymentsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetDeployments.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetDomainNameMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetDomainNameInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetDomainNameInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetDomainNameMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetDomainName.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetDomainNamesMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetDomainNamesInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetDomainNamesInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetDomainNamesMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetDomainNames.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetIntegrationMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetIntegrationInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetIntegrationInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetIntegrationMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetIntegration.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetIntegrationResponseMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetIntegrationResponseInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetIntegrationResponseInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetIntegrationResponseMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetIntegrationResponse.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetIntegrationResponsesMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetIntegrationResponsesInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetIntegrationResponsesInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetIntegrationResponsesMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetIntegrationResponses.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetIntegrationsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetIntegrationsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetIntegrationsInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetIntegrationsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetIntegrations.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetModelMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetModelInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetModelInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetModelMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetModel.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetModelTemplateMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetModelTemplateInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetModelTemplateInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetModelTemplateMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetModelTemplate.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetModelsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetModelsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetModelsInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetModelsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetModels.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetRouteMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetRouteInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetRouteInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetRouteMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetRoute.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetRouteResponseMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetRouteResponseInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetRouteResponseInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetRouteResponseMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetRouteResponse.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetRouteResponsesMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetRouteResponsesInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetRouteResponsesInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetRouteResponsesMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetRouteResponses.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetRoutesMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetRoutesInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetRoutesInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetRoutesMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetRoutes.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetStageMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetStageInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetStageInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetStageMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetStage.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetStagesMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetStagesInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetStagesInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetStagesMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetStages.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetTagsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetTagsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetTagsInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetTagsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetTags.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m TagResourceMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalTagResourceInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalTagResourceInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m TagResourceMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "TagResource.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UntagResourceMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUntagResourceInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUntagResourceInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UntagResourceMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UntagResource.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UpdateApiMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUpdateApiInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUpdateApiInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UpdateApiMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UpdateApi.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UpdateApiMappingMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUpdateApiMappingInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUpdateApiMappingInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UpdateApiMappingMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UpdateApiMapping.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UpdateAuthorizerMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUpdateAuthorizerInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUpdateAuthorizerInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UpdateAuthorizerMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UpdateAuthorizer.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UpdateDeploymentMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUpdateDeploymentInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUpdateDeploymentInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UpdateDeploymentMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UpdateDeployment.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UpdateDomainNameMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUpdateDomainNameInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUpdateDomainNameInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UpdateDomainNameMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UpdateDomainName.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UpdateIntegrationMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUpdateIntegrationInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUpdateIntegrationInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UpdateIntegrationMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UpdateIntegration.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UpdateIntegrationResponseMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUpdateIntegrationResponseInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUpdateIntegrationResponseInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UpdateIntegrationResponseMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UpdateIntegrationResponse.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UpdateModelMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUpdateModelInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUpdateModelInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UpdateModelMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UpdateModel.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UpdateRouteMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUpdateRouteInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUpdateRouteInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UpdateRouteMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UpdateRoute.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UpdateRouteResponseMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUpdateRouteResponseInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUpdateRouteResponseInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UpdateRouteResponseMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UpdateRouteResponse.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UpdateStageMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUpdateStageInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUpdateStageInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UpdateStageMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UpdateStage.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}
