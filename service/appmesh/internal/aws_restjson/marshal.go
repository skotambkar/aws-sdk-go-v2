// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

// Package aws_restjson service, marshal.go contains the generated operation marshalers and methods on it.

package aws_restjson

import (
	"bytes"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/awserr"
	"github.com/aws/aws-sdk-go-v2/private/protocol/jsonrpc"
	"github.com/aws/aws-sdk-go-v2/private/protocol/rest"
	"github.com/aws/aws-sdk-go-v2/service/appmesh/types"
)

var _ bytes.Buffer
var _ awserr.Error

// CreateMeshMarshaler defines marshaler for CreateMesh operation
type CreateMeshMarshaler struct {
	Input *types.CreateMeshInput
}

// CreateRouteMarshaler defines marshaler for CreateRoute operation
type CreateRouteMarshaler struct {
	Input *types.CreateRouteInput
}

// CreateVirtualNodeMarshaler defines marshaler for CreateVirtualNode operation
type CreateVirtualNodeMarshaler struct {
	Input *types.CreateVirtualNodeInput
}

// CreateVirtualRouterMarshaler defines marshaler for CreateVirtualRouter operation
type CreateVirtualRouterMarshaler struct {
	Input *types.CreateVirtualRouterInput
}

// CreateVirtualServiceMarshaler defines marshaler for CreateVirtualService operation
type CreateVirtualServiceMarshaler struct {
	Input *types.CreateVirtualServiceInput
}

// DeleteMeshMarshaler defines marshaler for DeleteMesh operation
type DeleteMeshMarshaler struct {
	Input *types.DeleteMeshInput
}

// DeleteRouteMarshaler defines marshaler for DeleteRoute operation
type DeleteRouteMarshaler struct {
	Input *types.DeleteRouteInput
}

// DeleteVirtualNodeMarshaler defines marshaler for DeleteVirtualNode operation
type DeleteVirtualNodeMarshaler struct {
	Input *types.DeleteVirtualNodeInput
}

// DeleteVirtualRouterMarshaler defines marshaler for DeleteVirtualRouter operation
type DeleteVirtualRouterMarshaler struct {
	Input *types.DeleteVirtualRouterInput
}

// DeleteVirtualServiceMarshaler defines marshaler for DeleteVirtualService operation
type DeleteVirtualServiceMarshaler struct {
	Input *types.DeleteVirtualServiceInput
}

// DescribeMeshMarshaler defines marshaler for DescribeMesh operation
type DescribeMeshMarshaler struct {
	Input *types.DescribeMeshInput
}

// DescribeRouteMarshaler defines marshaler for DescribeRoute operation
type DescribeRouteMarshaler struct {
	Input *types.DescribeRouteInput
}

// DescribeVirtualNodeMarshaler defines marshaler for DescribeVirtualNode operation
type DescribeVirtualNodeMarshaler struct {
	Input *types.DescribeVirtualNodeInput
}

// DescribeVirtualRouterMarshaler defines marshaler for DescribeVirtualRouter operation
type DescribeVirtualRouterMarshaler struct {
	Input *types.DescribeVirtualRouterInput
}

// DescribeVirtualServiceMarshaler defines marshaler for DescribeVirtualService operation
type DescribeVirtualServiceMarshaler struct {
	Input *types.DescribeVirtualServiceInput
}

// ListMeshesMarshaler defines marshaler for ListMeshes operation
type ListMeshesMarshaler struct {
	Input *types.ListMeshesInput
}

// ListRoutesMarshaler defines marshaler for ListRoutes operation
type ListRoutesMarshaler struct {
	Input *types.ListRoutesInput
}

// ListTagsForResourceMarshaler defines marshaler for ListTagsForResource operation
type ListTagsForResourceMarshaler struct {
	Input *types.ListTagsForResourceInput
}

// ListVirtualNodesMarshaler defines marshaler for ListVirtualNodes operation
type ListVirtualNodesMarshaler struct {
	Input *types.ListVirtualNodesInput
}

// ListVirtualRoutersMarshaler defines marshaler for ListVirtualRouters operation
type ListVirtualRoutersMarshaler struct {
	Input *types.ListVirtualRoutersInput
}

// ListVirtualServicesMarshaler defines marshaler for ListVirtualServices operation
type ListVirtualServicesMarshaler struct {
	Input *types.ListVirtualServicesInput
}

// TagResourceMarshaler defines marshaler for TagResource operation
type TagResourceMarshaler struct {
	Input *types.TagResourceInput
}

// UntagResourceMarshaler defines marshaler for UntagResource operation
type UntagResourceMarshaler struct {
	Input *types.UntagResourceInput
}

// UpdateMeshMarshaler defines marshaler for UpdateMesh operation
type UpdateMeshMarshaler struct {
	Input *types.UpdateMeshInput
}

// UpdateRouteMarshaler defines marshaler for UpdateRoute operation
type UpdateRouteMarshaler struct {
	Input *types.UpdateRouteInput
}

// UpdateVirtualNodeMarshaler defines marshaler for UpdateVirtualNode operation
type UpdateVirtualNodeMarshaler struct {
	Input *types.UpdateVirtualNodeInput
}

// UpdateVirtualRouterMarshaler defines marshaler for UpdateVirtualRouter operation
type UpdateVirtualRouterMarshaler struct {
	Input *types.UpdateVirtualRouterInput
}

// UpdateVirtualServiceMarshaler defines marshaler for UpdateVirtualService operation
type UpdateVirtualServiceMarshaler struct {
	Input *types.UpdateVirtualServiceInput
}

func MarshalCreateMeshInputShapeAWSREST(v *types.CreateMeshInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCreateMeshInputShapeAWSJSON(v *types.CreateMeshInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalCreateRouteInputShapeAWSREST(v *types.CreateRouteInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCreateRouteInputShapeAWSJSON(v *types.CreateRouteInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalCreateVirtualNodeInputShapeAWSREST(v *types.CreateVirtualNodeInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCreateVirtualNodeInputShapeAWSJSON(v *types.CreateVirtualNodeInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalCreateVirtualRouterInputShapeAWSREST(v *types.CreateVirtualRouterInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCreateVirtualRouterInputShapeAWSJSON(v *types.CreateVirtualRouterInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalCreateVirtualServiceInputShapeAWSREST(v *types.CreateVirtualServiceInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCreateVirtualServiceInputShapeAWSJSON(v *types.CreateVirtualServiceInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDeleteMeshInputShapeAWSREST(v *types.DeleteMeshInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeleteMeshInputShapeAWSJSON(v *types.DeleteMeshInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDeleteRouteInputShapeAWSREST(v *types.DeleteRouteInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeleteRouteInputShapeAWSJSON(v *types.DeleteRouteInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDeleteVirtualNodeInputShapeAWSREST(v *types.DeleteVirtualNodeInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeleteVirtualNodeInputShapeAWSJSON(v *types.DeleteVirtualNodeInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDeleteVirtualRouterInputShapeAWSREST(v *types.DeleteVirtualRouterInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeleteVirtualRouterInputShapeAWSJSON(v *types.DeleteVirtualRouterInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDeleteVirtualServiceInputShapeAWSREST(v *types.DeleteVirtualServiceInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeleteVirtualServiceInputShapeAWSJSON(v *types.DeleteVirtualServiceInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDescribeMeshInputShapeAWSREST(v *types.DescribeMeshInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDescribeMeshInputShapeAWSJSON(v *types.DescribeMeshInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDescribeRouteInputShapeAWSREST(v *types.DescribeRouteInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDescribeRouteInputShapeAWSJSON(v *types.DescribeRouteInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDescribeVirtualNodeInputShapeAWSREST(v *types.DescribeVirtualNodeInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDescribeVirtualNodeInputShapeAWSJSON(v *types.DescribeVirtualNodeInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDescribeVirtualRouterInputShapeAWSREST(v *types.DescribeVirtualRouterInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDescribeVirtualRouterInputShapeAWSJSON(v *types.DescribeVirtualRouterInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDescribeVirtualServiceInputShapeAWSREST(v *types.DescribeVirtualServiceInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDescribeVirtualServiceInputShapeAWSJSON(v *types.DescribeVirtualServiceInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListMeshesInputShapeAWSREST(v *types.ListMeshesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListMeshesInputShapeAWSJSON(v *types.ListMeshesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListRoutesInputShapeAWSREST(v *types.ListRoutesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListRoutesInputShapeAWSJSON(v *types.ListRoutesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListTagsForResourceInputShapeAWSREST(v *types.ListTagsForResourceInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListTagsForResourceInputShapeAWSJSON(v *types.ListTagsForResourceInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListVirtualNodesInputShapeAWSREST(v *types.ListVirtualNodesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListVirtualNodesInputShapeAWSJSON(v *types.ListVirtualNodesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListVirtualRoutersInputShapeAWSREST(v *types.ListVirtualRoutersInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListVirtualRoutersInputShapeAWSJSON(v *types.ListVirtualRoutersInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListVirtualServicesInputShapeAWSREST(v *types.ListVirtualServicesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListVirtualServicesInputShapeAWSJSON(v *types.ListVirtualServicesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalTagResourceInputShapeAWSREST(v *types.TagResourceInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalTagResourceInputShapeAWSJSON(v *types.TagResourceInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalUntagResourceInputShapeAWSREST(v *types.UntagResourceInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUntagResourceInputShapeAWSJSON(v *types.UntagResourceInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalUpdateMeshInputShapeAWSREST(v *types.UpdateMeshInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUpdateMeshInputShapeAWSJSON(v *types.UpdateMeshInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalUpdateRouteInputShapeAWSREST(v *types.UpdateRouteInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUpdateRouteInputShapeAWSJSON(v *types.UpdateRouteInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalUpdateVirtualNodeInputShapeAWSREST(v *types.UpdateVirtualNodeInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUpdateVirtualNodeInputShapeAWSJSON(v *types.UpdateVirtualNodeInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalUpdateVirtualRouterInputShapeAWSREST(v *types.UpdateVirtualRouterInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUpdateVirtualRouterInputShapeAWSJSON(v *types.UpdateVirtualRouterInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalUpdateVirtualServiceInputShapeAWSREST(v *types.UpdateVirtualServiceInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUpdateVirtualServiceInputShapeAWSJSON(v *types.UpdateVirtualServiceInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}
func (m CreateMeshMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCreateMeshInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCreateMeshInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CreateMeshMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CreateMesh.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m CreateRouteMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCreateRouteInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCreateRouteInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CreateRouteMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CreateRoute.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m CreateVirtualNodeMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCreateVirtualNodeInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCreateVirtualNodeInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CreateVirtualNodeMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CreateVirtualNode.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m CreateVirtualRouterMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCreateVirtualRouterInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCreateVirtualRouterInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CreateVirtualRouterMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CreateVirtualRouter.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m CreateVirtualServiceMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCreateVirtualServiceInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCreateVirtualServiceInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CreateVirtualServiceMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CreateVirtualService.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteMeshMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteMeshInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeleteMeshInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteMeshMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteMesh.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteRouteMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteRouteInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeleteRouteInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteRouteMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteRoute.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteVirtualNodeMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteVirtualNodeInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeleteVirtualNodeInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteVirtualNodeMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteVirtualNode.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteVirtualRouterMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteVirtualRouterInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeleteVirtualRouterInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteVirtualRouterMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteVirtualRouter.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteVirtualServiceMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteVirtualServiceInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeleteVirtualServiceInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteVirtualServiceMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteVirtualService.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DescribeMeshMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDescribeMeshInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDescribeMeshInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DescribeMeshMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DescribeMesh.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DescribeRouteMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDescribeRouteInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDescribeRouteInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DescribeRouteMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DescribeRoute.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DescribeVirtualNodeMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDescribeVirtualNodeInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDescribeVirtualNodeInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DescribeVirtualNodeMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DescribeVirtualNode.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DescribeVirtualRouterMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDescribeVirtualRouterInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDescribeVirtualRouterInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DescribeVirtualRouterMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DescribeVirtualRouter.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DescribeVirtualServiceMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDescribeVirtualServiceInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDescribeVirtualServiceInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DescribeVirtualServiceMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DescribeVirtualService.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListMeshesMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListMeshesInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListMeshesInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListMeshesMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListMeshes.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListRoutesMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListRoutesInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListRoutesInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListRoutesMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListRoutes.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListTagsForResourceMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListTagsForResourceInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListTagsForResourceInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListTagsForResourceMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListTagsForResource.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListVirtualNodesMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListVirtualNodesInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListVirtualNodesInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListVirtualNodesMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListVirtualNodes.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListVirtualRoutersMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListVirtualRoutersInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListVirtualRoutersInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListVirtualRoutersMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListVirtualRouters.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListVirtualServicesMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListVirtualServicesInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListVirtualServicesInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListVirtualServicesMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListVirtualServices.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m TagResourceMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalTagResourceInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalTagResourceInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m TagResourceMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "TagResource.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UntagResourceMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUntagResourceInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUntagResourceInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UntagResourceMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UntagResource.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UpdateMeshMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUpdateMeshInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUpdateMeshInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UpdateMeshMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UpdateMesh.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UpdateRouteMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUpdateRouteInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUpdateRouteInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UpdateRouteMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UpdateRoute.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UpdateVirtualNodeMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUpdateVirtualNodeInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUpdateVirtualNodeInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UpdateVirtualNodeMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UpdateVirtualNode.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UpdateVirtualRouterMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUpdateVirtualRouterInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUpdateVirtualRouterInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UpdateVirtualRouterMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UpdateVirtualRouter.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UpdateVirtualServiceMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUpdateVirtualServiceInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUpdateVirtualServiceInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UpdateVirtualServiceMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UpdateVirtualService.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}
