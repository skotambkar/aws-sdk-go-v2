// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

// Package aws_restjson service, marshal.go contains the generated operation marshalers and methods on it.

package aws_restjson

import (
	"bytes"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/awserr"
	"github.com/aws/aws-sdk-go-v2/private/protocol/jsonrpc"
	"github.com/aws/aws-sdk-go-v2/private/protocol/rest"
	"github.com/aws/aws-sdk-go-v2/service/iot/types"
)

var _ bytes.Buffer
var _ awserr.Error

// AcceptCertificateTransferMarshaler defines marshaler for AcceptCertificateTransfer operation
type AcceptCertificateTransferMarshaler struct {
	Input *types.AcceptCertificateTransferInput
}

// AddThingToBillingGroupMarshaler defines marshaler for AddThingToBillingGroup operation
type AddThingToBillingGroupMarshaler struct {
	Input *types.AddThingToBillingGroupInput
}

// AddThingToThingGroupMarshaler defines marshaler for AddThingToThingGroup operation
type AddThingToThingGroupMarshaler struct {
	Input *types.AddThingToThingGroupInput
}

// AssociateTargetsWithJobMarshaler defines marshaler for AssociateTargetsWithJob operation
type AssociateTargetsWithJobMarshaler struct {
	Input *types.AssociateTargetsWithJobInput
}

// AttachPolicyMarshaler defines marshaler for AttachPolicy operation
type AttachPolicyMarshaler struct {
	Input *types.AttachPolicyInput
}

// AttachPrincipalPolicyMarshaler defines marshaler for AttachPrincipalPolicy operation
type AttachPrincipalPolicyMarshaler struct {
	Input *types.AttachPrincipalPolicyInput
}

// AttachSecurityProfileMarshaler defines marshaler for AttachSecurityProfile operation
type AttachSecurityProfileMarshaler struct {
	Input *types.AttachSecurityProfileInput
}

// AttachThingPrincipalMarshaler defines marshaler for AttachThingPrincipal operation
type AttachThingPrincipalMarshaler struct {
	Input *types.AttachThingPrincipalInput
}

// CancelAuditMitigationActionsTaskMarshaler defines marshaler for CancelAuditMitigationActionsTask operation
type CancelAuditMitigationActionsTaskMarshaler struct {
	Input *types.CancelAuditMitigationActionsTaskInput
}

// CancelAuditTaskMarshaler defines marshaler for CancelAuditTask operation
type CancelAuditTaskMarshaler struct {
	Input *types.CancelAuditTaskInput
}

// CancelCertificateTransferMarshaler defines marshaler for CancelCertificateTransfer operation
type CancelCertificateTransferMarshaler struct {
	Input *types.CancelCertificateTransferInput
}

// CancelJobMarshaler defines marshaler for CancelJob operation
type CancelJobMarshaler struct {
	Input *types.CancelJobInput
}

// CancelJobExecutionMarshaler defines marshaler for CancelJobExecution operation
type CancelJobExecutionMarshaler struct {
	Input *types.CancelJobExecutionInput
}

// ClearDefaultAuthorizerMarshaler defines marshaler for ClearDefaultAuthorizer operation
type ClearDefaultAuthorizerMarshaler struct {
	Input *types.ClearDefaultAuthorizerInput
}

// ConfirmTopicRuleDestinationMarshaler defines marshaler for ConfirmTopicRuleDestination operation
type ConfirmTopicRuleDestinationMarshaler struct {
	Input *types.ConfirmTopicRuleDestinationInput
}

// CreateAuthorizerMarshaler defines marshaler for CreateAuthorizer operation
type CreateAuthorizerMarshaler struct {
	Input *types.CreateAuthorizerInput
}

// CreateBillingGroupMarshaler defines marshaler for CreateBillingGroup operation
type CreateBillingGroupMarshaler struct {
	Input *types.CreateBillingGroupInput
}

// CreateCertificateFromCsrMarshaler defines marshaler for CreateCertificateFromCsr operation
type CreateCertificateFromCsrMarshaler struct {
	Input *types.CreateCertificateFromCsrInput
}

// CreateDynamicThingGroupMarshaler defines marshaler for CreateDynamicThingGroup operation
type CreateDynamicThingGroupMarshaler struct {
	Input *types.CreateDynamicThingGroupInput
}

// CreateJobMarshaler defines marshaler for CreateJob operation
type CreateJobMarshaler struct {
	Input *types.CreateJobInput
}

// CreateKeysAndCertificateMarshaler defines marshaler for CreateKeysAndCertificate operation
type CreateKeysAndCertificateMarshaler struct {
	Input *types.CreateKeysAndCertificateInput
}

// CreateMitigationActionMarshaler defines marshaler for CreateMitigationAction operation
type CreateMitigationActionMarshaler struct {
	Input *types.CreateMitigationActionInput
}

// CreateOTAUpdateMarshaler defines marshaler for CreateOTAUpdate operation
type CreateOTAUpdateMarshaler struct {
	Input *types.CreateOTAUpdateInput
}

// CreatePolicyMarshaler defines marshaler for CreatePolicy operation
type CreatePolicyMarshaler struct {
	Input *types.CreatePolicyInput
}

// CreatePolicyVersionMarshaler defines marshaler for CreatePolicyVersion operation
type CreatePolicyVersionMarshaler struct {
	Input *types.CreatePolicyVersionInput
}

// CreateRoleAliasMarshaler defines marshaler for CreateRoleAlias operation
type CreateRoleAliasMarshaler struct {
	Input *types.CreateRoleAliasInput
}

// CreateScheduledAuditMarshaler defines marshaler for CreateScheduledAudit operation
type CreateScheduledAuditMarshaler struct {
	Input *types.CreateScheduledAuditInput
}

// CreateSecurityProfileMarshaler defines marshaler for CreateSecurityProfile operation
type CreateSecurityProfileMarshaler struct {
	Input *types.CreateSecurityProfileInput
}

// CreateStreamMarshaler defines marshaler for CreateStream operation
type CreateStreamMarshaler struct {
	Input *types.CreateStreamInput
}

// CreateThingMarshaler defines marshaler for CreateThing operation
type CreateThingMarshaler struct {
	Input *types.CreateThingInput
}

// CreateThingGroupMarshaler defines marshaler for CreateThingGroup operation
type CreateThingGroupMarshaler struct {
	Input *types.CreateThingGroupInput
}

// CreateThingTypeMarshaler defines marshaler for CreateThingType operation
type CreateThingTypeMarshaler struct {
	Input *types.CreateThingTypeInput
}

// CreateTopicRuleMarshaler defines marshaler for CreateTopicRule operation
type CreateTopicRuleMarshaler struct {
	Input *types.CreateTopicRuleInput
}

// CreateTopicRuleDestinationMarshaler defines marshaler for CreateTopicRuleDestination operation
type CreateTopicRuleDestinationMarshaler struct {
	Input *types.CreateTopicRuleDestinationInput
}

// DeleteAccountAuditConfigurationMarshaler defines marshaler for DeleteAccountAuditConfiguration operation
type DeleteAccountAuditConfigurationMarshaler struct {
	Input *types.DeleteAccountAuditConfigurationInput
}

// DeleteAuthorizerMarshaler defines marshaler for DeleteAuthorizer operation
type DeleteAuthorizerMarshaler struct {
	Input *types.DeleteAuthorizerInput
}

// DeleteBillingGroupMarshaler defines marshaler for DeleteBillingGroup operation
type DeleteBillingGroupMarshaler struct {
	Input *types.DeleteBillingGroupInput
}

// DeleteCACertificateMarshaler defines marshaler for DeleteCACertificate operation
type DeleteCACertificateMarshaler struct {
	Input *types.DeleteCACertificateInput
}

// DeleteCertificateMarshaler defines marshaler for DeleteCertificate operation
type DeleteCertificateMarshaler struct {
	Input *types.DeleteCertificateInput
}

// DeleteDynamicThingGroupMarshaler defines marshaler for DeleteDynamicThingGroup operation
type DeleteDynamicThingGroupMarshaler struct {
	Input *types.DeleteDynamicThingGroupInput
}

// DeleteJobMarshaler defines marshaler for DeleteJob operation
type DeleteJobMarshaler struct {
	Input *types.DeleteJobInput
}

// DeleteJobExecutionMarshaler defines marshaler for DeleteJobExecution operation
type DeleteJobExecutionMarshaler struct {
	Input *types.DeleteJobExecutionInput
}

// DeleteMitigationActionMarshaler defines marshaler for DeleteMitigationAction operation
type DeleteMitigationActionMarshaler struct {
	Input *types.DeleteMitigationActionInput
}

// DeleteOTAUpdateMarshaler defines marshaler for DeleteOTAUpdate operation
type DeleteOTAUpdateMarshaler struct {
	Input *types.DeleteOTAUpdateInput
}

// DeletePolicyMarshaler defines marshaler for DeletePolicy operation
type DeletePolicyMarshaler struct {
	Input *types.DeletePolicyInput
}

// DeletePolicyVersionMarshaler defines marshaler for DeletePolicyVersion operation
type DeletePolicyVersionMarshaler struct {
	Input *types.DeletePolicyVersionInput
}

// DeleteRegistrationCodeMarshaler defines marshaler for DeleteRegistrationCode operation
type DeleteRegistrationCodeMarshaler struct {
	Input *types.DeleteRegistrationCodeInput
}

// DeleteRoleAliasMarshaler defines marshaler for DeleteRoleAlias operation
type DeleteRoleAliasMarshaler struct {
	Input *types.DeleteRoleAliasInput
}

// DeleteScheduledAuditMarshaler defines marshaler for DeleteScheduledAudit operation
type DeleteScheduledAuditMarshaler struct {
	Input *types.DeleteScheduledAuditInput
}

// DeleteSecurityProfileMarshaler defines marshaler for DeleteSecurityProfile operation
type DeleteSecurityProfileMarshaler struct {
	Input *types.DeleteSecurityProfileInput
}

// DeleteStreamMarshaler defines marshaler for DeleteStream operation
type DeleteStreamMarshaler struct {
	Input *types.DeleteStreamInput
}

// DeleteThingMarshaler defines marshaler for DeleteThing operation
type DeleteThingMarshaler struct {
	Input *types.DeleteThingInput
}

// DeleteThingGroupMarshaler defines marshaler for DeleteThingGroup operation
type DeleteThingGroupMarshaler struct {
	Input *types.DeleteThingGroupInput
}

// DeleteThingTypeMarshaler defines marshaler for DeleteThingType operation
type DeleteThingTypeMarshaler struct {
	Input *types.DeleteThingTypeInput
}

// DeleteTopicRuleMarshaler defines marshaler for DeleteTopicRule operation
type DeleteTopicRuleMarshaler struct {
	Input *types.DeleteTopicRuleInput
}

// DeleteTopicRuleDestinationMarshaler defines marshaler for DeleteTopicRuleDestination operation
type DeleteTopicRuleDestinationMarshaler struct {
	Input *types.DeleteTopicRuleDestinationInput
}

// DeleteV2LoggingLevelMarshaler defines marshaler for DeleteV2LoggingLevel operation
type DeleteV2LoggingLevelMarshaler struct {
	Input *types.DeleteV2LoggingLevelInput
}

// DeprecateThingTypeMarshaler defines marshaler for DeprecateThingType operation
type DeprecateThingTypeMarshaler struct {
	Input *types.DeprecateThingTypeInput
}

// DescribeAccountAuditConfigurationMarshaler defines marshaler for DescribeAccountAuditConfiguration operation
type DescribeAccountAuditConfigurationMarshaler struct {
	Input *types.DescribeAccountAuditConfigurationInput
}

// DescribeAuditFindingMarshaler defines marshaler for DescribeAuditFinding operation
type DescribeAuditFindingMarshaler struct {
	Input *types.DescribeAuditFindingInput
}

// DescribeAuditMitigationActionsTaskMarshaler defines marshaler for DescribeAuditMitigationActionsTask operation
type DescribeAuditMitigationActionsTaskMarshaler struct {
	Input *types.DescribeAuditMitigationActionsTaskInput
}

// DescribeAuditTaskMarshaler defines marshaler for DescribeAuditTask operation
type DescribeAuditTaskMarshaler struct {
	Input *types.DescribeAuditTaskInput
}

// DescribeAuthorizerMarshaler defines marshaler for DescribeAuthorizer operation
type DescribeAuthorizerMarshaler struct {
	Input *types.DescribeAuthorizerInput
}

// DescribeBillingGroupMarshaler defines marshaler for DescribeBillingGroup operation
type DescribeBillingGroupMarshaler struct {
	Input *types.DescribeBillingGroupInput
}

// DescribeCACertificateMarshaler defines marshaler for DescribeCACertificate operation
type DescribeCACertificateMarshaler struct {
	Input *types.DescribeCACertificateInput
}

// DescribeCertificateMarshaler defines marshaler for DescribeCertificate operation
type DescribeCertificateMarshaler struct {
	Input *types.DescribeCertificateInput
}

// DescribeDefaultAuthorizerMarshaler defines marshaler for DescribeDefaultAuthorizer operation
type DescribeDefaultAuthorizerMarshaler struct {
	Input *types.DescribeDefaultAuthorizerInput
}

// DescribeEndpointMarshaler defines marshaler for DescribeEndpoint operation
type DescribeEndpointMarshaler struct {
	Input *types.DescribeEndpointInput
}

// DescribeEventConfigurationsMarshaler defines marshaler for DescribeEventConfigurations operation
type DescribeEventConfigurationsMarshaler struct {
	Input *types.DescribeEventConfigurationsInput
}

// DescribeIndexMarshaler defines marshaler for DescribeIndex operation
type DescribeIndexMarshaler struct {
	Input *types.DescribeIndexInput
}

// DescribeJobMarshaler defines marshaler for DescribeJob operation
type DescribeJobMarshaler struct {
	Input *types.DescribeJobInput
}

// DescribeJobExecutionMarshaler defines marshaler for DescribeJobExecution operation
type DescribeJobExecutionMarshaler struct {
	Input *types.DescribeJobExecutionInput
}

// DescribeMitigationActionMarshaler defines marshaler for DescribeMitigationAction operation
type DescribeMitigationActionMarshaler struct {
	Input *types.DescribeMitigationActionInput
}

// DescribeRoleAliasMarshaler defines marshaler for DescribeRoleAlias operation
type DescribeRoleAliasMarshaler struct {
	Input *types.DescribeRoleAliasInput
}

// DescribeScheduledAuditMarshaler defines marshaler for DescribeScheduledAudit operation
type DescribeScheduledAuditMarshaler struct {
	Input *types.DescribeScheduledAuditInput
}

// DescribeSecurityProfileMarshaler defines marshaler for DescribeSecurityProfile operation
type DescribeSecurityProfileMarshaler struct {
	Input *types.DescribeSecurityProfileInput
}

// DescribeStreamMarshaler defines marshaler for DescribeStream operation
type DescribeStreamMarshaler struct {
	Input *types.DescribeStreamInput
}

// DescribeThingMarshaler defines marshaler for DescribeThing operation
type DescribeThingMarshaler struct {
	Input *types.DescribeThingInput
}

// DescribeThingGroupMarshaler defines marshaler for DescribeThingGroup operation
type DescribeThingGroupMarshaler struct {
	Input *types.DescribeThingGroupInput
}

// DescribeThingRegistrationTaskMarshaler defines marshaler for DescribeThingRegistrationTask operation
type DescribeThingRegistrationTaskMarshaler struct {
	Input *types.DescribeThingRegistrationTaskInput
}

// DescribeThingTypeMarshaler defines marshaler for DescribeThingType operation
type DescribeThingTypeMarshaler struct {
	Input *types.DescribeThingTypeInput
}

// DetachPolicyMarshaler defines marshaler for DetachPolicy operation
type DetachPolicyMarshaler struct {
	Input *types.DetachPolicyInput
}

// DetachPrincipalPolicyMarshaler defines marshaler for DetachPrincipalPolicy operation
type DetachPrincipalPolicyMarshaler struct {
	Input *types.DetachPrincipalPolicyInput
}

// DetachSecurityProfileMarshaler defines marshaler for DetachSecurityProfile operation
type DetachSecurityProfileMarshaler struct {
	Input *types.DetachSecurityProfileInput
}

// DetachThingPrincipalMarshaler defines marshaler for DetachThingPrincipal operation
type DetachThingPrincipalMarshaler struct {
	Input *types.DetachThingPrincipalInput
}

// DisableTopicRuleMarshaler defines marshaler for DisableTopicRule operation
type DisableTopicRuleMarshaler struct {
	Input *types.DisableTopicRuleInput
}

// EnableTopicRuleMarshaler defines marshaler for EnableTopicRule operation
type EnableTopicRuleMarshaler struct {
	Input *types.EnableTopicRuleInput
}

// GetCardinalityMarshaler defines marshaler for GetCardinality operation
type GetCardinalityMarshaler struct {
	Input *types.GetCardinalityInput
}

// GetEffectivePoliciesMarshaler defines marshaler for GetEffectivePolicies operation
type GetEffectivePoliciesMarshaler struct {
	Input *types.GetEffectivePoliciesInput
}

// GetIndexingConfigurationMarshaler defines marshaler for GetIndexingConfiguration operation
type GetIndexingConfigurationMarshaler struct {
	Input *types.GetIndexingConfigurationInput
}

// GetJobDocumentMarshaler defines marshaler for GetJobDocument operation
type GetJobDocumentMarshaler struct {
	Input *types.GetJobDocumentInput
}

// GetLoggingOptionsMarshaler defines marshaler for GetLoggingOptions operation
type GetLoggingOptionsMarshaler struct {
	Input *types.GetLoggingOptionsInput
}

// GetOTAUpdateMarshaler defines marshaler for GetOTAUpdate operation
type GetOTAUpdateMarshaler struct {
	Input *types.GetOTAUpdateInput
}

// GetPercentilesMarshaler defines marshaler for GetPercentiles operation
type GetPercentilesMarshaler struct {
	Input *types.GetPercentilesInput
}

// GetPolicyMarshaler defines marshaler for GetPolicy operation
type GetPolicyMarshaler struct {
	Input *types.GetPolicyInput
}

// GetPolicyVersionMarshaler defines marshaler for GetPolicyVersion operation
type GetPolicyVersionMarshaler struct {
	Input *types.GetPolicyVersionInput
}

// GetRegistrationCodeMarshaler defines marshaler for GetRegistrationCode operation
type GetRegistrationCodeMarshaler struct {
	Input *types.GetRegistrationCodeInput
}

// GetStatisticsMarshaler defines marshaler for GetStatistics operation
type GetStatisticsMarshaler struct {
	Input *types.GetStatisticsInput
}

// GetTopicRuleMarshaler defines marshaler for GetTopicRule operation
type GetTopicRuleMarshaler struct {
	Input *types.GetTopicRuleInput
}

// GetTopicRuleDestinationMarshaler defines marshaler for GetTopicRuleDestination operation
type GetTopicRuleDestinationMarshaler struct {
	Input *types.GetTopicRuleDestinationInput
}

// GetV2LoggingOptionsMarshaler defines marshaler for GetV2LoggingOptions operation
type GetV2LoggingOptionsMarshaler struct {
	Input *types.GetV2LoggingOptionsInput
}

// ListActiveViolationsMarshaler defines marshaler for ListActiveViolations operation
type ListActiveViolationsMarshaler struct {
	Input *types.ListActiveViolationsInput
}

// ListAttachedPoliciesMarshaler defines marshaler for ListAttachedPolicies operation
type ListAttachedPoliciesMarshaler struct {
	Input *types.ListAttachedPoliciesInput
}

// ListAuditFindingsMarshaler defines marshaler for ListAuditFindings operation
type ListAuditFindingsMarshaler struct {
	Input *types.ListAuditFindingsInput
}

// ListAuditMitigationActionsExecutionsMarshaler defines marshaler for ListAuditMitigationActionsExecutions operation
type ListAuditMitigationActionsExecutionsMarshaler struct {
	Input *types.ListAuditMitigationActionsExecutionsInput
}

// ListAuditMitigationActionsTasksMarshaler defines marshaler for ListAuditMitigationActionsTasks operation
type ListAuditMitigationActionsTasksMarshaler struct {
	Input *types.ListAuditMitigationActionsTasksInput
}

// ListAuditTasksMarshaler defines marshaler for ListAuditTasks operation
type ListAuditTasksMarshaler struct {
	Input *types.ListAuditTasksInput
}

// ListAuthorizersMarshaler defines marshaler for ListAuthorizers operation
type ListAuthorizersMarshaler struct {
	Input *types.ListAuthorizersInput
}

// ListBillingGroupsMarshaler defines marshaler for ListBillingGroups operation
type ListBillingGroupsMarshaler struct {
	Input *types.ListBillingGroupsInput
}

// ListCACertificatesMarshaler defines marshaler for ListCACertificates operation
type ListCACertificatesMarshaler struct {
	Input *types.ListCACertificatesInput
}

// ListCertificatesMarshaler defines marshaler for ListCertificates operation
type ListCertificatesMarshaler struct {
	Input *types.ListCertificatesInput
}

// ListCertificatesByCAMarshaler defines marshaler for ListCertificatesByCA operation
type ListCertificatesByCAMarshaler struct {
	Input *types.ListCertificatesByCAInput
}

// ListIndicesMarshaler defines marshaler for ListIndices operation
type ListIndicesMarshaler struct {
	Input *types.ListIndicesInput
}

// ListJobExecutionsForJobMarshaler defines marshaler for ListJobExecutionsForJob operation
type ListJobExecutionsForJobMarshaler struct {
	Input *types.ListJobExecutionsForJobInput
}

// ListJobExecutionsForThingMarshaler defines marshaler for ListJobExecutionsForThing operation
type ListJobExecutionsForThingMarshaler struct {
	Input *types.ListJobExecutionsForThingInput
}

// ListJobsMarshaler defines marshaler for ListJobs operation
type ListJobsMarshaler struct {
	Input *types.ListJobsInput
}

// ListMitigationActionsMarshaler defines marshaler for ListMitigationActions operation
type ListMitigationActionsMarshaler struct {
	Input *types.ListMitigationActionsInput
}

// ListOTAUpdatesMarshaler defines marshaler for ListOTAUpdates operation
type ListOTAUpdatesMarshaler struct {
	Input *types.ListOTAUpdatesInput
}

// ListOutgoingCertificatesMarshaler defines marshaler for ListOutgoingCertificates operation
type ListOutgoingCertificatesMarshaler struct {
	Input *types.ListOutgoingCertificatesInput
}

// ListPoliciesMarshaler defines marshaler for ListPolicies operation
type ListPoliciesMarshaler struct {
	Input *types.ListPoliciesInput
}

// ListPolicyPrincipalsMarshaler defines marshaler for ListPolicyPrincipals operation
type ListPolicyPrincipalsMarshaler struct {
	Input *types.ListPolicyPrincipalsInput
}

// ListPolicyVersionsMarshaler defines marshaler for ListPolicyVersions operation
type ListPolicyVersionsMarshaler struct {
	Input *types.ListPolicyVersionsInput
}

// ListPrincipalPoliciesMarshaler defines marshaler for ListPrincipalPolicies operation
type ListPrincipalPoliciesMarshaler struct {
	Input *types.ListPrincipalPoliciesInput
}

// ListPrincipalThingsMarshaler defines marshaler for ListPrincipalThings operation
type ListPrincipalThingsMarshaler struct {
	Input *types.ListPrincipalThingsInput
}

// ListRoleAliasesMarshaler defines marshaler for ListRoleAliases operation
type ListRoleAliasesMarshaler struct {
	Input *types.ListRoleAliasesInput
}

// ListScheduledAuditsMarshaler defines marshaler for ListScheduledAudits operation
type ListScheduledAuditsMarshaler struct {
	Input *types.ListScheduledAuditsInput
}

// ListSecurityProfilesMarshaler defines marshaler for ListSecurityProfiles operation
type ListSecurityProfilesMarshaler struct {
	Input *types.ListSecurityProfilesInput
}

// ListSecurityProfilesForTargetMarshaler defines marshaler for ListSecurityProfilesForTarget operation
type ListSecurityProfilesForTargetMarshaler struct {
	Input *types.ListSecurityProfilesForTargetInput
}

// ListStreamsMarshaler defines marshaler for ListStreams operation
type ListStreamsMarshaler struct {
	Input *types.ListStreamsInput
}

// ListTagsForResourceMarshaler defines marshaler for ListTagsForResource operation
type ListTagsForResourceMarshaler struct {
	Input *types.ListTagsForResourceInput
}

// ListTargetsForPolicyMarshaler defines marshaler for ListTargetsForPolicy operation
type ListTargetsForPolicyMarshaler struct {
	Input *types.ListTargetsForPolicyInput
}

// ListTargetsForSecurityProfileMarshaler defines marshaler for ListTargetsForSecurityProfile operation
type ListTargetsForSecurityProfileMarshaler struct {
	Input *types.ListTargetsForSecurityProfileInput
}

// ListThingGroupsMarshaler defines marshaler for ListThingGroups operation
type ListThingGroupsMarshaler struct {
	Input *types.ListThingGroupsInput
}

// ListThingGroupsForThingMarshaler defines marshaler for ListThingGroupsForThing operation
type ListThingGroupsForThingMarshaler struct {
	Input *types.ListThingGroupsForThingInput
}

// ListThingPrincipalsMarshaler defines marshaler for ListThingPrincipals operation
type ListThingPrincipalsMarshaler struct {
	Input *types.ListThingPrincipalsInput
}

// ListThingRegistrationTaskReportsMarshaler defines marshaler for ListThingRegistrationTaskReports operation
type ListThingRegistrationTaskReportsMarshaler struct {
	Input *types.ListThingRegistrationTaskReportsInput
}

// ListThingRegistrationTasksMarshaler defines marshaler for ListThingRegistrationTasks operation
type ListThingRegistrationTasksMarshaler struct {
	Input *types.ListThingRegistrationTasksInput
}

// ListThingTypesMarshaler defines marshaler for ListThingTypes operation
type ListThingTypesMarshaler struct {
	Input *types.ListThingTypesInput
}

// ListThingsMarshaler defines marshaler for ListThings operation
type ListThingsMarshaler struct {
	Input *types.ListThingsInput
}

// ListThingsInBillingGroupMarshaler defines marshaler for ListThingsInBillingGroup operation
type ListThingsInBillingGroupMarshaler struct {
	Input *types.ListThingsInBillingGroupInput
}

// ListThingsInThingGroupMarshaler defines marshaler for ListThingsInThingGroup operation
type ListThingsInThingGroupMarshaler struct {
	Input *types.ListThingsInThingGroupInput
}

// ListTopicRuleDestinationsMarshaler defines marshaler for ListTopicRuleDestinations operation
type ListTopicRuleDestinationsMarshaler struct {
	Input *types.ListTopicRuleDestinationsInput
}

// ListTopicRulesMarshaler defines marshaler for ListTopicRules operation
type ListTopicRulesMarshaler struct {
	Input *types.ListTopicRulesInput
}

// ListV2LoggingLevelsMarshaler defines marshaler for ListV2LoggingLevels operation
type ListV2LoggingLevelsMarshaler struct {
	Input *types.ListV2LoggingLevelsInput
}

// ListViolationEventsMarshaler defines marshaler for ListViolationEvents operation
type ListViolationEventsMarshaler struct {
	Input *types.ListViolationEventsInput
}

// RegisterCACertificateMarshaler defines marshaler for RegisterCACertificate operation
type RegisterCACertificateMarshaler struct {
	Input *types.RegisterCACertificateInput
}

// RegisterCertificateMarshaler defines marshaler for RegisterCertificate operation
type RegisterCertificateMarshaler struct {
	Input *types.RegisterCertificateInput
}

// RegisterThingMarshaler defines marshaler for RegisterThing operation
type RegisterThingMarshaler struct {
	Input *types.RegisterThingInput
}

// RejectCertificateTransferMarshaler defines marshaler for RejectCertificateTransfer operation
type RejectCertificateTransferMarshaler struct {
	Input *types.RejectCertificateTransferInput
}

// RemoveThingFromBillingGroupMarshaler defines marshaler for RemoveThingFromBillingGroup operation
type RemoveThingFromBillingGroupMarshaler struct {
	Input *types.RemoveThingFromBillingGroupInput
}

// RemoveThingFromThingGroupMarshaler defines marshaler for RemoveThingFromThingGroup operation
type RemoveThingFromThingGroupMarshaler struct {
	Input *types.RemoveThingFromThingGroupInput
}

// ReplaceTopicRuleMarshaler defines marshaler for ReplaceTopicRule operation
type ReplaceTopicRuleMarshaler struct {
	Input *types.ReplaceTopicRuleInput
}

// SearchIndexMarshaler defines marshaler for SearchIndex operation
type SearchIndexMarshaler struct {
	Input *types.SearchIndexInput
}

// SetDefaultAuthorizerMarshaler defines marshaler for SetDefaultAuthorizer operation
type SetDefaultAuthorizerMarshaler struct {
	Input *types.SetDefaultAuthorizerInput
}

// SetDefaultPolicyVersionMarshaler defines marshaler for SetDefaultPolicyVersion operation
type SetDefaultPolicyVersionMarshaler struct {
	Input *types.SetDefaultPolicyVersionInput
}

// SetLoggingOptionsMarshaler defines marshaler for SetLoggingOptions operation
type SetLoggingOptionsMarshaler struct {
	Input *types.SetLoggingOptionsInput
}

// SetV2LoggingLevelMarshaler defines marshaler for SetV2LoggingLevel operation
type SetV2LoggingLevelMarshaler struct {
	Input *types.SetV2LoggingLevelInput
}

// SetV2LoggingOptionsMarshaler defines marshaler for SetV2LoggingOptions operation
type SetV2LoggingOptionsMarshaler struct {
	Input *types.SetV2LoggingOptionsInput
}

// StartAuditMitigationActionsTaskMarshaler defines marshaler for StartAuditMitigationActionsTask operation
type StartAuditMitigationActionsTaskMarshaler struct {
	Input *types.StartAuditMitigationActionsTaskInput
}

// StartOnDemandAuditTaskMarshaler defines marshaler for StartOnDemandAuditTask operation
type StartOnDemandAuditTaskMarshaler struct {
	Input *types.StartOnDemandAuditTaskInput
}

// StartThingRegistrationTaskMarshaler defines marshaler for StartThingRegistrationTask operation
type StartThingRegistrationTaskMarshaler struct {
	Input *types.StartThingRegistrationTaskInput
}

// StopThingRegistrationTaskMarshaler defines marshaler for StopThingRegistrationTask operation
type StopThingRegistrationTaskMarshaler struct {
	Input *types.StopThingRegistrationTaskInput
}

// TagResourceMarshaler defines marshaler for TagResource operation
type TagResourceMarshaler struct {
	Input *types.TagResourceInput
}

// TestAuthorizationMarshaler defines marshaler for TestAuthorization operation
type TestAuthorizationMarshaler struct {
	Input *types.TestAuthorizationInput
}

// TestInvokeAuthorizerMarshaler defines marshaler for TestInvokeAuthorizer operation
type TestInvokeAuthorizerMarshaler struct {
	Input *types.TestInvokeAuthorizerInput
}

// TransferCertificateMarshaler defines marshaler for TransferCertificate operation
type TransferCertificateMarshaler struct {
	Input *types.TransferCertificateInput
}

// UntagResourceMarshaler defines marshaler for UntagResource operation
type UntagResourceMarshaler struct {
	Input *types.UntagResourceInput
}

// UpdateAccountAuditConfigurationMarshaler defines marshaler for UpdateAccountAuditConfiguration operation
type UpdateAccountAuditConfigurationMarshaler struct {
	Input *types.UpdateAccountAuditConfigurationInput
}

// UpdateAuthorizerMarshaler defines marshaler for UpdateAuthorizer operation
type UpdateAuthorizerMarshaler struct {
	Input *types.UpdateAuthorizerInput
}

// UpdateBillingGroupMarshaler defines marshaler for UpdateBillingGroup operation
type UpdateBillingGroupMarshaler struct {
	Input *types.UpdateBillingGroupInput
}

// UpdateCACertificateMarshaler defines marshaler for UpdateCACertificate operation
type UpdateCACertificateMarshaler struct {
	Input *types.UpdateCACertificateInput
}

// UpdateCertificateMarshaler defines marshaler for UpdateCertificate operation
type UpdateCertificateMarshaler struct {
	Input *types.UpdateCertificateInput
}

// UpdateDynamicThingGroupMarshaler defines marshaler for UpdateDynamicThingGroup operation
type UpdateDynamicThingGroupMarshaler struct {
	Input *types.UpdateDynamicThingGroupInput
}

// UpdateEventConfigurationsMarshaler defines marshaler for UpdateEventConfigurations operation
type UpdateEventConfigurationsMarshaler struct {
	Input *types.UpdateEventConfigurationsInput
}

// UpdateIndexingConfigurationMarshaler defines marshaler for UpdateIndexingConfiguration operation
type UpdateIndexingConfigurationMarshaler struct {
	Input *types.UpdateIndexingConfigurationInput
}

// UpdateJobMarshaler defines marshaler for UpdateJob operation
type UpdateJobMarshaler struct {
	Input *types.UpdateJobInput
}

// UpdateMitigationActionMarshaler defines marshaler for UpdateMitigationAction operation
type UpdateMitigationActionMarshaler struct {
	Input *types.UpdateMitigationActionInput
}

// UpdateRoleAliasMarshaler defines marshaler for UpdateRoleAlias operation
type UpdateRoleAliasMarshaler struct {
	Input *types.UpdateRoleAliasInput
}

// UpdateScheduledAuditMarshaler defines marshaler for UpdateScheduledAudit operation
type UpdateScheduledAuditMarshaler struct {
	Input *types.UpdateScheduledAuditInput
}

// UpdateSecurityProfileMarshaler defines marshaler for UpdateSecurityProfile operation
type UpdateSecurityProfileMarshaler struct {
	Input *types.UpdateSecurityProfileInput
}

// UpdateStreamMarshaler defines marshaler for UpdateStream operation
type UpdateStreamMarshaler struct {
	Input *types.UpdateStreamInput
}

// UpdateThingMarshaler defines marshaler for UpdateThing operation
type UpdateThingMarshaler struct {
	Input *types.UpdateThingInput
}

// UpdateThingGroupMarshaler defines marshaler for UpdateThingGroup operation
type UpdateThingGroupMarshaler struct {
	Input *types.UpdateThingGroupInput
}

// UpdateThingGroupsForThingMarshaler defines marshaler for UpdateThingGroupsForThing operation
type UpdateThingGroupsForThingMarshaler struct {
	Input *types.UpdateThingGroupsForThingInput
}

// UpdateTopicRuleDestinationMarshaler defines marshaler for UpdateTopicRuleDestination operation
type UpdateTopicRuleDestinationMarshaler struct {
	Input *types.UpdateTopicRuleDestinationInput
}

// ValidateSecurityProfileBehaviorsMarshaler defines marshaler for ValidateSecurityProfileBehaviors operation
type ValidateSecurityProfileBehaviorsMarshaler struct {
	Input *types.ValidateSecurityProfileBehaviorsInput
}

func MarshalAcceptCertificateTransferInputShapeAWSREST(v *types.AcceptCertificateTransferInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalAcceptCertificateTransferInputShapeAWSJSON(v *types.AcceptCertificateTransferInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalAddThingToBillingGroupInputShapeAWSREST(v *types.AddThingToBillingGroupInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalAddThingToBillingGroupInputShapeAWSJSON(v *types.AddThingToBillingGroupInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalAddThingToThingGroupInputShapeAWSREST(v *types.AddThingToThingGroupInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalAddThingToThingGroupInputShapeAWSJSON(v *types.AddThingToThingGroupInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalAssociateTargetsWithJobInputShapeAWSREST(v *types.AssociateTargetsWithJobInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalAssociateTargetsWithJobInputShapeAWSJSON(v *types.AssociateTargetsWithJobInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalAttachPolicyInputShapeAWSREST(v *types.AttachPolicyInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalAttachPolicyInputShapeAWSJSON(v *types.AttachPolicyInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalAttachPrincipalPolicyInputShapeAWSREST(v *types.AttachPrincipalPolicyInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalAttachPrincipalPolicyInputShapeAWSJSON(v *types.AttachPrincipalPolicyInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalAttachSecurityProfileInputShapeAWSREST(v *types.AttachSecurityProfileInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalAttachSecurityProfileInputShapeAWSJSON(v *types.AttachSecurityProfileInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalAttachThingPrincipalInputShapeAWSREST(v *types.AttachThingPrincipalInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalAttachThingPrincipalInputShapeAWSJSON(v *types.AttachThingPrincipalInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalCancelAuditMitigationActionsTaskInputShapeAWSREST(v *types.CancelAuditMitigationActionsTaskInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCancelAuditMitigationActionsTaskInputShapeAWSJSON(v *types.CancelAuditMitigationActionsTaskInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalCancelAuditTaskInputShapeAWSREST(v *types.CancelAuditTaskInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCancelAuditTaskInputShapeAWSJSON(v *types.CancelAuditTaskInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalCancelCertificateTransferInputShapeAWSREST(v *types.CancelCertificateTransferInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCancelCertificateTransferInputShapeAWSJSON(v *types.CancelCertificateTransferInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalCancelJobInputShapeAWSREST(v *types.CancelJobInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCancelJobInputShapeAWSJSON(v *types.CancelJobInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalCancelJobExecutionInputShapeAWSREST(v *types.CancelJobExecutionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCancelJobExecutionInputShapeAWSJSON(v *types.CancelJobExecutionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalClearDefaultAuthorizerInputShapeAWSREST(v *types.ClearDefaultAuthorizerInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalClearDefaultAuthorizerInputShapeAWSJSON(v *types.ClearDefaultAuthorizerInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalConfirmTopicRuleDestinationInputShapeAWSREST(v *types.ConfirmTopicRuleDestinationInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalConfirmTopicRuleDestinationInputShapeAWSJSON(v *types.ConfirmTopicRuleDestinationInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalCreateAuthorizerInputShapeAWSREST(v *types.CreateAuthorizerInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCreateAuthorizerInputShapeAWSJSON(v *types.CreateAuthorizerInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalCreateBillingGroupInputShapeAWSREST(v *types.CreateBillingGroupInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCreateBillingGroupInputShapeAWSJSON(v *types.CreateBillingGroupInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalCreateCertificateFromCsrInputShapeAWSREST(v *types.CreateCertificateFromCsrInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCreateCertificateFromCsrInputShapeAWSJSON(v *types.CreateCertificateFromCsrInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalCreateDynamicThingGroupInputShapeAWSREST(v *types.CreateDynamicThingGroupInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCreateDynamicThingGroupInputShapeAWSJSON(v *types.CreateDynamicThingGroupInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalCreateJobInputShapeAWSREST(v *types.CreateJobInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCreateJobInputShapeAWSJSON(v *types.CreateJobInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalCreateKeysAndCertificateInputShapeAWSREST(v *types.CreateKeysAndCertificateInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCreateKeysAndCertificateInputShapeAWSJSON(v *types.CreateKeysAndCertificateInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalCreateMitigationActionInputShapeAWSREST(v *types.CreateMitigationActionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCreateMitigationActionInputShapeAWSJSON(v *types.CreateMitigationActionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalCreateOTAUpdateInputShapeAWSREST(v *types.CreateOTAUpdateInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCreateOTAUpdateInputShapeAWSJSON(v *types.CreateOTAUpdateInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalCreatePolicyInputShapeAWSREST(v *types.CreatePolicyInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCreatePolicyInputShapeAWSJSON(v *types.CreatePolicyInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalCreatePolicyVersionInputShapeAWSREST(v *types.CreatePolicyVersionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCreatePolicyVersionInputShapeAWSJSON(v *types.CreatePolicyVersionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalCreateRoleAliasInputShapeAWSREST(v *types.CreateRoleAliasInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCreateRoleAliasInputShapeAWSJSON(v *types.CreateRoleAliasInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalCreateScheduledAuditInputShapeAWSREST(v *types.CreateScheduledAuditInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCreateScheduledAuditInputShapeAWSJSON(v *types.CreateScheduledAuditInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalCreateSecurityProfileInputShapeAWSREST(v *types.CreateSecurityProfileInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCreateSecurityProfileInputShapeAWSJSON(v *types.CreateSecurityProfileInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalCreateStreamInputShapeAWSREST(v *types.CreateStreamInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCreateStreamInputShapeAWSJSON(v *types.CreateStreamInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalCreateThingInputShapeAWSREST(v *types.CreateThingInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCreateThingInputShapeAWSJSON(v *types.CreateThingInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalCreateThingGroupInputShapeAWSREST(v *types.CreateThingGroupInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCreateThingGroupInputShapeAWSJSON(v *types.CreateThingGroupInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalCreateThingTypeInputShapeAWSREST(v *types.CreateThingTypeInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCreateThingTypeInputShapeAWSJSON(v *types.CreateThingTypeInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalCreateTopicRuleInputShapeAWSREST(v *types.CreateTopicRuleInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCreateTopicRuleInputShapeAWSJSON(v *types.CreateTopicRuleInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalCreateTopicRuleDestinationInputShapeAWSREST(v *types.CreateTopicRuleDestinationInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCreateTopicRuleDestinationInputShapeAWSJSON(v *types.CreateTopicRuleDestinationInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDeleteAccountAuditConfigurationInputShapeAWSREST(v *types.DeleteAccountAuditConfigurationInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeleteAccountAuditConfigurationInputShapeAWSJSON(v *types.DeleteAccountAuditConfigurationInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDeleteAuthorizerInputShapeAWSREST(v *types.DeleteAuthorizerInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeleteAuthorizerInputShapeAWSJSON(v *types.DeleteAuthorizerInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDeleteBillingGroupInputShapeAWSREST(v *types.DeleteBillingGroupInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeleteBillingGroupInputShapeAWSJSON(v *types.DeleteBillingGroupInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDeleteCACertificateInputShapeAWSREST(v *types.DeleteCACertificateInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeleteCACertificateInputShapeAWSJSON(v *types.DeleteCACertificateInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDeleteCertificateInputShapeAWSREST(v *types.DeleteCertificateInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeleteCertificateInputShapeAWSJSON(v *types.DeleteCertificateInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDeleteDynamicThingGroupInputShapeAWSREST(v *types.DeleteDynamicThingGroupInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeleteDynamicThingGroupInputShapeAWSJSON(v *types.DeleteDynamicThingGroupInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDeleteJobInputShapeAWSREST(v *types.DeleteJobInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeleteJobInputShapeAWSJSON(v *types.DeleteJobInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDeleteJobExecutionInputShapeAWSREST(v *types.DeleteJobExecutionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeleteJobExecutionInputShapeAWSJSON(v *types.DeleteJobExecutionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDeleteMitigationActionInputShapeAWSREST(v *types.DeleteMitigationActionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeleteMitigationActionInputShapeAWSJSON(v *types.DeleteMitigationActionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDeleteOTAUpdateInputShapeAWSREST(v *types.DeleteOTAUpdateInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeleteOTAUpdateInputShapeAWSJSON(v *types.DeleteOTAUpdateInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDeletePolicyInputShapeAWSREST(v *types.DeletePolicyInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeletePolicyInputShapeAWSJSON(v *types.DeletePolicyInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDeletePolicyVersionInputShapeAWSREST(v *types.DeletePolicyVersionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeletePolicyVersionInputShapeAWSJSON(v *types.DeletePolicyVersionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDeleteRegistrationCodeInputShapeAWSREST(v *types.DeleteRegistrationCodeInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeleteRegistrationCodeInputShapeAWSJSON(v *types.DeleteRegistrationCodeInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDeleteRoleAliasInputShapeAWSREST(v *types.DeleteRoleAliasInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeleteRoleAliasInputShapeAWSJSON(v *types.DeleteRoleAliasInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDeleteScheduledAuditInputShapeAWSREST(v *types.DeleteScheduledAuditInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeleteScheduledAuditInputShapeAWSJSON(v *types.DeleteScheduledAuditInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDeleteSecurityProfileInputShapeAWSREST(v *types.DeleteSecurityProfileInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeleteSecurityProfileInputShapeAWSJSON(v *types.DeleteSecurityProfileInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDeleteStreamInputShapeAWSREST(v *types.DeleteStreamInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeleteStreamInputShapeAWSJSON(v *types.DeleteStreamInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDeleteThingInputShapeAWSREST(v *types.DeleteThingInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeleteThingInputShapeAWSJSON(v *types.DeleteThingInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDeleteThingGroupInputShapeAWSREST(v *types.DeleteThingGroupInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeleteThingGroupInputShapeAWSJSON(v *types.DeleteThingGroupInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDeleteThingTypeInputShapeAWSREST(v *types.DeleteThingTypeInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeleteThingTypeInputShapeAWSJSON(v *types.DeleteThingTypeInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDeleteTopicRuleInputShapeAWSREST(v *types.DeleteTopicRuleInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeleteTopicRuleInputShapeAWSJSON(v *types.DeleteTopicRuleInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDeleteTopicRuleDestinationInputShapeAWSREST(v *types.DeleteTopicRuleDestinationInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeleteTopicRuleDestinationInputShapeAWSJSON(v *types.DeleteTopicRuleDestinationInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDeleteV2LoggingLevelInputShapeAWSREST(v *types.DeleteV2LoggingLevelInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeleteV2LoggingLevelInputShapeAWSJSON(v *types.DeleteV2LoggingLevelInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDeprecateThingTypeInputShapeAWSREST(v *types.DeprecateThingTypeInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeprecateThingTypeInputShapeAWSJSON(v *types.DeprecateThingTypeInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDescribeAccountAuditConfigurationInputShapeAWSREST(v *types.DescribeAccountAuditConfigurationInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDescribeAccountAuditConfigurationInputShapeAWSJSON(v *types.DescribeAccountAuditConfigurationInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDescribeAuditFindingInputShapeAWSREST(v *types.DescribeAuditFindingInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDescribeAuditFindingInputShapeAWSJSON(v *types.DescribeAuditFindingInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDescribeAuditMitigationActionsTaskInputShapeAWSREST(v *types.DescribeAuditMitigationActionsTaskInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDescribeAuditMitigationActionsTaskInputShapeAWSJSON(v *types.DescribeAuditMitigationActionsTaskInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDescribeAuditTaskInputShapeAWSREST(v *types.DescribeAuditTaskInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDescribeAuditTaskInputShapeAWSJSON(v *types.DescribeAuditTaskInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDescribeAuthorizerInputShapeAWSREST(v *types.DescribeAuthorizerInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDescribeAuthorizerInputShapeAWSJSON(v *types.DescribeAuthorizerInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDescribeBillingGroupInputShapeAWSREST(v *types.DescribeBillingGroupInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDescribeBillingGroupInputShapeAWSJSON(v *types.DescribeBillingGroupInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDescribeCACertificateInputShapeAWSREST(v *types.DescribeCACertificateInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDescribeCACertificateInputShapeAWSJSON(v *types.DescribeCACertificateInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDescribeCertificateInputShapeAWSREST(v *types.DescribeCertificateInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDescribeCertificateInputShapeAWSJSON(v *types.DescribeCertificateInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDescribeDefaultAuthorizerInputShapeAWSREST(v *types.DescribeDefaultAuthorizerInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDescribeDefaultAuthorizerInputShapeAWSJSON(v *types.DescribeDefaultAuthorizerInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDescribeEndpointInputShapeAWSREST(v *types.DescribeEndpointInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDescribeEndpointInputShapeAWSJSON(v *types.DescribeEndpointInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDescribeEventConfigurationsInputShapeAWSREST(v *types.DescribeEventConfigurationsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDescribeEventConfigurationsInputShapeAWSJSON(v *types.DescribeEventConfigurationsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDescribeIndexInputShapeAWSREST(v *types.DescribeIndexInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDescribeIndexInputShapeAWSJSON(v *types.DescribeIndexInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDescribeJobInputShapeAWSREST(v *types.DescribeJobInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDescribeJobInputShapeAWSJSON(v *types.DescribeJobInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDescribeJobExecutionInputShapeAWSREST(v *types.DescribeJobExecutionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDescribeJobExecutionInputShapeAWSJSON(v *types.DescribeJobExecutionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDescribeMitigationActionInputShapeAWSREST(v *types.DescribeMitigationActionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDescribeMitigationActionInputShapeAWSJSON(v *types.DescribeMitigationActionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDescribeRoleAliasInputShapeAWSREST(v *types.DescribeRoleAliasInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDescribeRoleAliasInputShapeAWSJSON(v *types.DescribeRoleAliasInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDescribeScheduledAuditInputShapeAWSREST(v *types.DescribeScheduledAuditInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDescribeScheduledAuditInputShapeAWSJSON(v *types.DescribeScheduledAuditInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDescribeSecurityProfileInputShapeAWSREST(v *types.DescribeSecurityProfileInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDescribeSecurityProfileInputShapeAWSJSON(v *types.DescribeSecurityProfileInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDescribeStreamInputShapeAWSREST(v *types.DescribeStreamInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDescribeStreamInputShapeAWSJSON(v *types.DescribeStreamInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDescribeThingInputShapeAWSREST(v *types.DescribeThingInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDescribeThingInputShapeAWSJSON(v *types.DescribeThingInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDescribeThingGroupInputShapeAWSREST(v *types.DescribeThingGroupInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDescribeThingGroupInputShapeAWSJSON(v *types.DescribeThingGroupInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDescribeThingRegistrationTaskInputShapeAWSREST(v *types.DescribeThingRegistrationTaskInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDescribeThingRegistrationTaskInputShapeAWSJSON(v *types.DescribeThingRegistrationTaskInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDescribeThingTypeInputShapeAWSREST(v *types.DescribeThingTypeInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDescribeThingTypeInputShapeAWSJSON(v *types.DescribeThingTypeInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDetachPolicyInputShapeAWSREST(v *types.DetachPolicyInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDetachPolicyInputShapeAWSJSON(v *types.DetachPolicyInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDetachPrincipalPolicyInputShapeAWSREST(v *types.DetachPrincipalPolicyInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDetachPrincipalPolicyInputShapeAWSJSON(v *types.DetachPrincipalPolicyInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDetachSecurityProfileInputShapeAWSREST(v *types.DetachSecurityProfileInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDetachSecurityProfileInputShapeAWSJSON(v *types.DetachSecurityProfileInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDetachThingPrincipalInputShapeAWSREST(v *types.DetachThingPrincipalInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDetachThingPrincipalInputShapeAWSJSON(v *types.DetachThingPrincipalInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDisableTopicRuleInputShapeAWSREST(v *types.DisableTopicRuleInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDisableTopicRuleInputShapeAWSJSON(v *types.DisableTopicRuleInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalEnableTopicRuleInputShapeAWSREST(v *types.EnableTopicRuleInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalEnableTopicRuleInputShapeAWSJSON(v *types.EnableTopicRuleInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalGetCardinalityInputShapeAWSREST(v *types.GetCardinalityInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetCardinalityInputShapeAWSJSON(v *types.GetCardinalityInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalGetEffectivePoliciesInputShapeAWSREST(v *types.GetEffectivePoliciesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetEffectivePoliciesInputShapeAWSJSON(v *types.GetEffectivePoliciesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalGetIndexingConfigurationInputShapeAWSREST(v *types.GetIndexingConfigurationInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetIndexingConfigurationInputShapeAWSJSON(v *types.GetIndexingConfigurationInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalGetJobDocumentInputShapeAWSREST(v *types.GetJobDocumentInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetJobDocumentInputShapeAWSJSON(v *types.GetJobDocumentInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalGetLoggingOptionsInputShapeAWSREST(v *types.GetLoggingOptionsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetLoggingOptionsInputShapeAWSJSON(v *types.GetLoggingOptionsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalGetOTAUpdateInputShapeAWSREST(v *types.GetOTAUpdateInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetOTAUpdateInputShapeAWSJSON(v *types.GetOTAUpdateInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalGetPercentilesInputShapeAWSREST(v *types.GetPercentilesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetPercentilesInputShapeAWSJSON(v *types.GetPercentilesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalGetPolicyInputShapeAWSREST(v *types.GetPolicyInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetPolicyInputShapeAWSJSON(v *types.GetPolicyInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalGetPolicyVersionInputShapeAWSREST(v *types.GetPolicyVersionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetPolicyVersionInputShapeAWSJSON(v *types.GetPolicyVersionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalGetRegistrationCodeInputShapeAWSREST(v *types.GetRegistrationCodeInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetRegistrationCodeInputShapeAWSJSON(v *types.GetRegistrationCodeInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalGetStatisticsInputShapeAWSREST(v *types.GetStatisticsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetStatisticsInputShapeAWSJSON(v *types.GetStatisticsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalGetTopicRuleInputShapeAWSREST(v *types.GetTopicRuleInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetTopicRuleInputShapeAWSJSON(v *types.GetTopicRuleInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalGetTopicRuleDestinationInputShapeAWSREST(v *types.GetTopicRuleDestinationInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetTopicRuleDestinationInputShapeAWSJSON(v *types.GetTopicRuleDestinationInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalGetV2LoggingOptionsInputShapeAWSREST(v *types.GetV2LoggingOptionsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetV2LoggingOptionsInputShapeAWSJSON(v *types.GetV2LoggingOptionsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListActiveViolationsInputShapeAWSREST(v *types.ListActiveViolationsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListActiveViolationsInputShapeAWSJSON(v *types.ListActiveViolationsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListAttachedPoliciesInputShapeAWSREST(v *types.ListAttachedPoliciesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListAttachedPoliciesInputShapeAWSJSON(v *types.ListAttachedPoliciesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListAuditFindingsInputShapeAWSREST(v *types.ListAuditFindingsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListAuditFindingsInputShapeAWSJSON(v *types.ListAuditFindingsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListAuditMitigationActionsExecutionsInputShapeAWSREST(v *types.ListAuditMitigationActionsExecutionsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListAuditMitigationActionsExecutionsInputShapeAWSJSON(v *types.ListAuditMitigationActionsExecutionsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListAuditMitigationActionsTasksInputShapeAWSREST(v *types.ListAuditMitigationActionsTasksInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListAuditMitigationActionsTasksInputShapeAWSJSON(v *types.ListAuditMitigationActionsTasksInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListAuditTasksInputShapeAWSREST(v *types.ListAuditTasksInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListAuditTasksInputShapeAWSJSON(v *types.ListAuditTasksInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListAuthorizersInputShapeAWSREST(v *types.ListAuthorizersInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListAuthorizersInputShapeAWSJSON(v *types.ListAuthorizersInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListBillingGroupsInputShapeAWSREST(v *types.ListBillingGroupsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListBillingGroupsInputShapeAWSJSON(v *types.ListBillingGroupsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListCACertificatesInputShapeAWSREST(v *types.ListCACertificatesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListCACertificatesInputShapeAWSJSON(v *types.ListCACertificatesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListCertificatesInputShapeAWSREST(v *types.ListCertificatesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListCertificatesInputShapeAWSJSON(v *types.ListCertificatesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListCertificatesByCAInputShapeAWSREST(v *types.ListCertificatesByCAInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListCertificatesByCAInputShapeAWSJSON(v *types.ListCertificatesByCAInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListIndicesInputShapeAWSREST(v *types.ListIndicesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListIndicesInputShapeAWSJSON(v *types.ListIndicesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListJobExecutionsForJobInputShapeAWSREST(v *types.ListJobExecutionsForJobInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListJobExecutionsForJobInputShapeAWSJSON(v *types.ListJobExecutionsForJobInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListJobExecutionsForThingInputShapeAWSREST(v *types.ListJobExecutionsForThingInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListJobExecutionsForThingInputShapeAWSJSON(v *types.ListJobExecutionsForThingInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListJobsInputShapeAWSREST(v *types.ListJobsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListJobsInputShapeAWSJSON(v *types.ListJobsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListMitigationActionsInputShapeAWSREST(v *types.ListMitigationActionsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListMitigationActionsInputShapeAWSJSON(v *types.ListMitigationActionsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListOTAUpdatesInputShapeAWSREST(v *types.ListOTAUpdatesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListOTAUpdatesInputShapeAWSJSON(v *types.ListOTAUpdatesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListOutgoingCertificatesInputShapeAWSREST(v *types.ListOutgoingCertificatesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListOutgoingCertificatesInputShapeAWSJSON(v *types.ListOutgoingCertificatesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListPoliciesInputShapeAWSREST(v *types.ListPoliciesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListPoliciesInputShapeAWSJSON(v *types.ListPoliciesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListPolicyPrincipalsInputShapeAWSREST(v *types.ListPolicyPrincipalsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListPolicyPrincipalsInputShapeAWSJSON(v *types.ListPolicyPrincipalsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListPolicyVersionsInputShapeAWSREST(v *types.ListPolicyVersionsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListPolicyVersionsInputShapeAWSJSON(v *types.ListPolicyVersionsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListPrincipalPoliciesInputShapeAWSREST(v *types.ListPrincipalPoliciesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListPrincipalPoliciesInputShapeAWSJSON(v *types.ListPrincipalPoliciesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListPrincipalThingsInputShapeAWSREST(v *types.ListPrincipalThingsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListPrincipalThingsInputShapeAWSJSON(v *types.ListPrincipalThingsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListRoleAliasesInputShapeAWSREST(v *types.ListRoleAliasesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListRoleAliasesInputShapeAWSJSON(v *types.ListRoleAliasesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListScheduledAuditsInputShapeAWSREST(v *types.ListScheduledAuditsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListScheduledAuditsInputShapeAWSJSON(v *types.ListScheduledAuditsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListSecurityProfilesInputShapeAWSREST(v *types.ListSecurityProfilesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListSecurityProfilesInputShapeAWSJSON(v *types.ListSecurityProfilesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListSecurityProfilesForTargetInputShapeAWSREST(v *types.ListSecurityProfilesForTargetInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListSecurityProfilesForTargetInputShapeAWSJSON(v *types.ListSecurityProfilesForTargetInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListStreamsInputShapeAWSREST(v *types.ListStreamsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListStreamsInputShapeAWSJSON(v *types.ListStreamsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListTagsForResourceInputShapeAWSREST(v *types.ListTagsForResourceInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListTagsForResourceInputShapeAWSJSON(v *types.ListTagsForResourceInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListTargetsForPolicyInputShapeAWSREST(v *types.ListTargetsForPolicyInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListTargetsForPolicyInputShapeAWSJSON(v *types.ListTargetsForPolicyInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListTargetsForSecurityProfileInputShapeAWSREST(v *types.ListTargetsForSecurityProfileInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListTargetsForSecurityProfileInputShapeAWSJSON(v *types.ListTargetsForSecurityProfileInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListThingGroupsInputShapeAWSREST(v *types.ListThingGroupsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListThingGroupsInputShapeAWSJSON(v *types.ListThingGroupsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListThingGroupsForThingInputShapeAWSREST(v *types.ListThingGroupsForThingInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListThingGroupsForThingInputShapeAWSJSON(v *types.ListThingGroupsForThingInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListThingPrincipalsInputShapeAWSREST(v *types.ListThingPrincipalsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListThingPrincipalsInputShapeAWSJSON(v *types.ListThingPrincipalsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListThingRegistrationTaskReportsInputShapeAWSREST(v *types.ListThingRegistrationTaskReportsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListThingRegistrationTaskReportsInputShapeAWSJSON(v *types.ListThingRegistrationTaskReportsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListThingRegistrationTasksInputShapeAWSREST(v *types.ListThingRegistrationTasksInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListThingRegistrationTasksInputShapeAWSJSON(v *types.ListThingRegistrationTasksInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListThingTypesInputShapeAWSREST(v *types.ListThingTypesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListThingTypesInputShapeAWSJSON(v *types.ListThingTypesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListThingsInputShapeAWSREST(v *types.ListThingsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListThingsInputShapeAWSJSON(v *types.ListThingsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListThingsInBillingGroupInputShapeAWSREST(v *types.ListThingsInBillingGroupInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListThingsInBillingGroupInputShapeAWSJSON(v *types.ListThingsInBillingGroupInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListThingsInThingGroupInputShapeAWSREST(v *types.ListThingsInThingGroupInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListThingsInThingGroupInputShapeAWSJSON(v *types.ListThingsInThingGroupInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListTopicRuleDestinationsInputShapeAWSREST(v *types.ListTopicRuleDestinationsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListTopicRuleDestinationsInputShapeAWSJSON(v *types.ListTopicRuleDestinationsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListTopicRulesInputShapeAWSREST(v *types.ListTopicRulesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListTopicRulesInputShapeAWSJSON(v *types.ListTopicRulesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListV2LoggingLevelsInputShapeAWSREST(v *types.ListV2LoggingLevelsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListV2LoggingLevelsInputShapeAWSJSON(v *types.ListV2LoggingLevelsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListViolationEventsInputShapeAWSREST(v *types.ListViolationEventsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListViolationEventsInputShapeAWSJSON(v *types.ListViolationEventsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalRegisterCACertificateInputShapeAWSREST(v *types.RegisterCACertificateInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalRegisterCACertificateInputShapeAWSJSON(v *types.RegisterCACertificateInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalRegisterCertificateInputShapeAWSREST(v *types.RegisterCertificateInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalRegisterCertificateInputShapeAWSJSON(v *types.RegisterCertificateInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalRegisterThingInputShapeAWSREST(v *types.RegisterThingInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalRegisterThingInputShapeAWSJSON(v *types.RegisterThingInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalRejectCertificateTransferInputShapeAWSREST(v *types.RejectCertificateTransferInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalRejectCertificateTransferInputShapeAWSJSON(v *types.RejectCertificateTransferInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalRemoveThingFromBillingGroupInputShapeAWSREST(v *types.RemoveThingFromBillingGroupInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalRemoveThingFromBillingGroupInputShapeAWSJSON(v *types.RemoveThingFromBillingGroupInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalRemoveThingFromThingGroupInputShapeAWSREST(v *types.RemoveThingFromThingGroupInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalRemoveThingFromThingGroupInputShapeAWSJSON(v *types.RemoveThingFromThingGroupInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalReplaceTopicRuleInputShapeAWSREST(v *types.ReplaceTopicRuleInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalReplaceTopicRuleInputShapeAWSJSON(v *types.ReplaceTopicRuleInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalSearchIndexInputShapeAWSREST(v *types.SearchIndexInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalSearchIndexInputShapeAWSJSON(v *types.SearchIndexInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalSetDefaultAuthorizerInputShapeAWSREST(v *types.SetDefaultAuthorizerInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalSetDefaultAuthorizerInputShapeAWSJSON(v *types.SetDefaultAuthorizerInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalSetDefaultPolicyVersionInputShapeAWSREST(v *types.SetDefaultPolicyVersionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalSetDefaultPolicyVersionInputShapeAWSJSON(v *types.SetDefaultPolicyVersionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalSetLoggingOptionsInputShapeAWSREST(v *types.SetLoggingOptionsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalSetLoggingOptionsInputShapeAWSJSON(v *types.SetLoggingOptionsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalSetV2LoggingLevelInputShapeAWSREST(v *types.SetV2LoggingLevelInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalSetV2LoggingLevelInputShapeAWSJSON(v *types.SetV2LoggingLevelInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalSetV2LoggingOptionsInputShapeAWSREST(v *types.SetV2LoggingOptionsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalSetV2LoggingOptionsInputShapeAWSJSON(v *types.SetV2LoggingOptionsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalStartAuditMitigationActionsTaskInputShapeAWSREST(v *types.StartAuditMitigationActionsTaskInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalStartAuditMitigationActionsTaskInputShapeAWSJSON(v *types.StartAuditMitigationActionsTaskInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalStartOnDemandAuditTaskInputShapeAWSREST(v *types.StartOnDemandAuditTaskInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalStartOnDemandAuditTaskInputShapeAWSJSON(v *types.StartOnDemandAuditTaskInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalStartThingRegistrationTaskInputShapeAWSREST(v *types.StartThingRegistrationTaskInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalStartThingRegistrationTaskInputShapeAWSJSON(v *types.StartThingRegistrationTaskInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalStopThingRegistrationTaskInputShapeAWSREST(v *types.StopThingRegistrationTaskInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalStopThingRegistrationTaskInputShapeAWSJSON(v *types.StopThingRegistrationTaskInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalTagResourceInputShapeAWSREST(v *types.TagResourceInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalTagResourceInputShapeAWSJSON(v *types.TagResourceInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalTestAuthorizationInputShapeAWSREST(v *types.TestAuthorizationInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalTestAuthorizationInputShapeAWSJSON(v *types.TestAuthorizationInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalTestInvokeAuthorizerInputShapeAWSREST(v *types.TestInvokeAuthorizerInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalTestInvokeAuthorizerInputShapeAWSJSON(v *types.TestInvokeAuthorizerInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalTransferCertificateInputShapeAWSREST(v *types.TransferCertificateInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalTransferCertificateInputShapeAWSJSON(v *types.TransferCertificateInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalUntagResourceInputShapeAWSREST(v *types.UntagResourceInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUntagResourceInputShapeAWSJSON(v *types.UntagResourceInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalUpdateAccountAuditConfigurationInputShapeAWSREST(v *types.UpdateAccountAuditConfigurationInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUpdateAccountAuditConfigurationInputShapeAWSJSON(v *types.UpdateAccountAuditConfigurationInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalUpdateAuthorizerInputShapeAWSREST(v *types.UpdateAuthorizerInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUpdateAuthorizerInputShapeAWSJSON(v *types.UpdateAuthorizerInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalUpdateBillingGroupInputShapeAWSREST(v *types.UpdateBillingGroupInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUpdateBillingGroupInputShapeAWSJSON(v *types.UpdateBillingGroupInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalUpdateCACertificateInputShapeAWSREST(v *types.UpdateCACertificateInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUpdateCACertificateInputShapeAWSJSON(v *types.UpdateCACertificateInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalUpdateCertificateInputShapeAWSREST(v *types.UpdateCertificateInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUpdateCertificateInputShapeAWSJSON(v *types.UpdateCertificateInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalUpdateDynamicThingGroupInputShapeAWSREST(v *types.UpdateDynamicThingGroupInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUpdateDynamicThingGroupInputShapeAWSJSON(v *types.UpdateDynamicThingGroupInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalUpdateEventConfigurationsInputShapeAWSREST(v *types.UpdateEventConfigurationsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUpdateEventConfigurationsInputShapeAWSJSON(v *types.UpdateEventConfigurationsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalUpdateIndexingConfigurationInputShapeAWSREST(v *types.UpdateIndexingConfigurationInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUpdateIndexingConfigurationInputShapeAWSJSON(v *types.UpdateIndexingConfigurationInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalUpdateJobInputShapeAWSREST(v *types.UpdateJobInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUpdateJobInputShapeAWSJSON(v *types.UpdateJobInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalUpdateMitigationActionInputShapeAWSREST(v *types.UpdateMitigationActionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUpdateMitigationActionInputShapeAWSJSON(v *types.UpdateMitigationActionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalUpdateRoleAliasInputShapeAWSREST(v *types.UpdateRoleAliasInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUpdateRoleAliasInputShapeAWSJSON(v *types.UpdateRoleAliasInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalUpdateScheduledAuditInputShapeAWSREST(v *types.UpdateScheduledAuditInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUpdateScheduledAuditInputShapeAWSJSON(v *types.UpdateScheduledAuditInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalUpdateSecurityProfileInputShapeAWSREST(v *types.UpdateSecurityProfileInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUpdateSecurityProfileInputShapeAWSJSON(v *types.UpdateSecurityProfileInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalUpdateStreamInputShapeAWSREST(v *types.UpdateStreamInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUpdateStreamInputShapeAWSJSON(v *types.UpdateStreamInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalUpdateThingInputShapeAWSREST(v *types.UpdateThingInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUpdateThingInputShapeAWSJSON(v *types.UpdateThingInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalUpdateThingGroupInputShapeAWSREST(v *types.UpdateThingGroupInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUpdateThingGroupInputShapeAWSJSON(v *types.UpdateThingGroupInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalUpdateThingGroupsForThingInputShapeAWSREST(v *types.UpdateThingGroupsForThingInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUpdateThingGroupsForThingInputShapeAWSJSON(v *types.UpdateThingGroupsForThingInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalUpdateTopicRuleDestinationInputShapeAWSREST(v *types.UpdateTopicRuleDestinationInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUpdateTopicRuleDestinationInputShapeAWSJSON(v *types.UpdateTopicRuleDestinationInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalValidateSecurityProfileBehaviorsInputShapeAWSREST(v *types.ValidateSecurityProfileBehaviorsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalValidateSecurityProfileBehaviorsInputShapeAWSJSON(v *types.ValidateSecurityProfileBehaviorsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}
func (m AcceptCertificateTransferMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalAcceptCertificateTransferInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalAcceptCertificateTransferInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m AcceptCertificateTransferMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "AcceptCertificateTransfer.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m AddThingToBillingGroupMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalAddThingToBillingGroupInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalAddThingToBillingGroupInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m AddThingToBillingGroupMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "AddThingToBillingGroup.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m AddThingToThingGroupMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalAddThingToThingGroupInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalAddThingToThingGroupInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m AddThingToThingGroupMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "AddThingToThingGroup.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m AssociateTargetsWithJobMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalAssociateTargetsWithJobInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalAssociateTargetsWithJobInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m AssociateTargetsWithJobMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "AssociateTargetsWithJob.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m AttachPolicyMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalAttachPolicyInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalAttachPolicyInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m AttachPolicyMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "AttachPolicy.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m AttachPrincipalPolicyMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalAttachPrincipalPolicyInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalAttachPrincipalPolicyInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m AttachPrincipalPolicyMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "AttachPrincipalPolicy.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m AttachSecurityProfileMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalAttachSecurityProfileInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalAttachSecurityProfileInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m AttachSecurityProfileMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "AttachSecurityProfile.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m AttachThingPrincipalMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalAttachThingPrincipalInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalAttachThingPrincipalInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m AttachThingPrincipalMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "AttachThingPrincipal.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m CancelAuditMitigationActionsTaskMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCancelAuditMitigationActionsTaskInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCancelAuditMitigationActionsTaskInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CancelAuditMitigationActionsTaskMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CancelAuditMitigationActionsTask.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m CancelAuditTaskMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCancelAuditTaskInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCancelAuditTaskInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CancelAuditTaskMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CancelAuditTask.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m CancelCertificateTransferMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCancelCertificateTransferInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCancelCertificateTransferInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CancelCertificateTransferMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CancelCertificateTransfer.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m CancelJobMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCancelJobInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCancelJobInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CancelJobMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CancelJob.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m CancelJobExecutionMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCancelJobExecutionInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCancelJobExecutionInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CancelJobExecutionMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CancelJobExecution.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ClearDefaultAuthorizerMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalClearDefaultAuthorizerInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalClearDefaultAuthorizerInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ClearDefaultAuthorizerMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ClearDefaultAuthorizer.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ConfirmTopicRuleDestinationMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalConfirmTopicRuleDestinationInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalConfirmTopicRuleDestinationInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ConfirmTopicRuleDestinationMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ConfirmTopicRuleDestination.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m CreateAuthorizerMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCreateAuthorizerInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCreateAuthorizerInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CreateAuthorizerMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CreateAuthorizer.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m CreateBillingGroupMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCreateBillingGroupInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCreateBillingGroupInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CreateBillingGroupMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CreateBillingGroup.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m CreateCertificateFromCsrMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCreateCertificateFromCsrInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCreateCertificateFromCsrInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CreateCertificateFromCsrMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CreateCertificateFromCsr.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m CreateDynamicThingGroupMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCreateDynamicThingGroupInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCreateDynamicThingGroupInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CreateDynamicThingGroupMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CreateDynamicThingGroup.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m CreateJobMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCreateJobInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCreateJobInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CreateJobMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CreateJob.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m CreateKeysAndCertificateMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCreateKeysAndCertificateInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCreateKeysAndCertificateInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CreateKeysAndCertificateMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CreateKeysAndCertificate.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m CreateMitigationActionMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCreateMitigationActionInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCreateMitigationActionInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CreateMitigationActionMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CreateMitigationAction.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m CreateOTAUpdateMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCreateOTAUpdateInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCreateOTAUpdateInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CreateOTAUpdateMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CreateOTAUpdate.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m CreatePolicyMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCreatePolicyInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCreatePolicyInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CreatePolicyMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CreatePolicy.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m CreatePolicyVersionMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCreatePolicyVersionInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCreatePolicyVersionInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CreatePolicyVersionMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CreatePolicyVersion.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m CreateRoleAliasMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCreateRoleAliasInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCreateRoleAliasInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CreateRoleAliasMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CreateRoleAlias.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m CreateScheduledAuditMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCreateScheduledAuditInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCreateScheduledAuditInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CreateScheduledAuditMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CreateScheduledAudit.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m CreateSecurityProfileMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCreateSecurityProfileInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCreateSecurityProfileInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CreateSecurityProfileMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CreateSecurityProfile.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m CreateStreamMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCreateStreamInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCreateStreamInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CreateStreamMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CreateStream.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m CreateThingMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCreateThingInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCreateThingInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CreateThingMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CreateThing.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m CreateThingGroupMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCreateThingGroupInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCreateThingGroupInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CreateThingGroupMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CreateThingGroup.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m CreateThingTypeMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCreateThingTypeInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCreateThingTypeInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CreateThingTypeMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CreateThingType.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m CreateTopicRuleMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCreateTopicRuleInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCreateTopicRuleInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CreateTopicRuleMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CreateTopicRule.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m CreateTopicRuleDestinationMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCreateTopicRuleDestinationInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCreateTopicRuleDestinationInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CreateTopicRuleDestinationMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CreateTopicRuleDestination.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteAccountAuditConfigurationMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteAccountAuditConfigurationInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeleteAccountAuditConfigurationInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteAccountAuditConfigurationMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteAccountAuditConfiguration.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteAuthorizerMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteAuthorizerInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeleteAuthorizerInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteAuthorizerMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteAuthorizer.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteBillingGroupMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteBillingGroupInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeleteBillingGroupInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteBillingGroupMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteBillingGroup.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteCACertificateMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteCACertificateInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeleteCACertificateInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteCACertificateMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteCACertificate.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteCertificateMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteCertificateInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeleteCertificateInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteCertificateMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteCertificate.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteDynamicThingGroupMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteDynamicThingGroupInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeleteDynamicThingGroupInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteDynamicThingGroupMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteDynamicThingGroup.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteJobMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteJobInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeleteJobInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteJobMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteJob.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteJobExecutionMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteJobExecutionInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeleteJobExecutionInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteJobExecutionMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteJobExecution.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteMitigationActionMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteMitigationActionInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeleteMitigationActionInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteMitigationActionMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteMitigationAction.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteOTAUpdateMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteOTAUpdateInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeleteOTAUpdateInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteOTAUpdateMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteOTAUpdate.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeletePolicyMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeletePolicyInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeletePolicyInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeletePolicyMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeletePolicy.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeletePolicyVersionMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeletePolicyVersionInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeletePolicyVersionInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeletePolicyVersionMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeletePolicyVersion.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteRegistrationCodeMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteRegistrationCodeInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeleteRegistrationCodeInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteRegistrationCodeMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteRegistrationCode.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteRoleAliasMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteRoleAliasInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeleteRoleAliasInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteRoleAliasMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteRoleAlias.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteScheduledAuditMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteScheduledAuditInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeleteScheduledAuditInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteScheduledAuditMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteScheduledAudit.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteSecurityProfileMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteSecurityProfileInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeleteSecurityProfileInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteSecurityProfileMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteSecurityProfile.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteStreamMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteStreamInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeleteStreamInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteStreamMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteStream.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteThingMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteThingInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeleteThingInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteThingMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteThing.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteThingGroupMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteThingGroupInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeleteThingGroupInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteThingGroupMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteThingGroup.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteThingTypeMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteThingTypeInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeleteThingTypeInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteThingTypeMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteThingType.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteTopicRuleMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteTopicRuleInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeleteTopicRuleInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteTopicRuleMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteTopicRule.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteTopicRuleDestinationMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteTopicRuleDestinationInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeleteTopicRuleDestinationInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteTopicRuleDestinationMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteTopicRuleDestination.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteV2LoggingLevelMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteV2LoggingLevelInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeleteV2LoggingLevelInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteV2LoggingLevelMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteV2LoggingLevel.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeprecateThingTypeMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeprecateThingTypeInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeprecateThingTypeInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeprecateThingTypeMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeprecateThingType.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DescribeAccountAuditConfigurationMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDescribeAccountAuditConfigurationInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDescribeAccountAuditConfigurationInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DescribeAccountAuditConfigurationMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DescribeAccountAuditConfiguration.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DescribeAuditFindingMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDescribeAuditFindingInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDescribeAuditFindingInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DescribeAuditFindingMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DescribeAuditFinding.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DescribeAuditMitigationActionsTaskMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDescribeAuditMitigationActionsTaskInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDescribeAuditMitigationActionsTaskInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DescribeAuditMitigationActionsTaskMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DescribeAuditMitigationActionsTask.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DescribeAuditTaskMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDescribeAuditTaskInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDescribeAuditTaskInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DescribeAuditTaskMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DescribeAuditTask.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DescribeAuthorizerMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDescribeAuthorizerInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDescribeAuthorizerInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DescribeAuthorizerMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DescribeAuthorizer.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DescribeBillingGroupMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDescribeBillingGroupInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDescribeBillingGroupInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DescribeBillingGroupMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DescribeBillingGroup.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DescribeCACertificateMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDescribeCACertificateInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDescribeCACertificateInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DescribeCACertificateMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DescribeCACertificate.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DescribeCertificateMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDescribeCertificateInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDescribeCertificateInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DescribeCertificateMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DescribeCertificate.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DescribeDefaultAuthorizerMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDescribeDefaultAuthorizerInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDescribeDefaultAuthorizerInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DescribeDefaultAuthorizerMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DescribeDefaultAuthorizer.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DescribeEndpointMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDescribeEndpointInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDescribeEndpointInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DescribeEndpointMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DescribeEndpoint.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DescribeEventConfigurationsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDescribeEventConfigurationsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDescribeEventConfigurationsInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DescribeEventConfigurationsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DescribeEventConfigurations.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DescribeIndexMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDescribeIndexInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDescribeIndexInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DescribeIndexMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DescribeIndex.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DescribeJobMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDescribeJobInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDescribeJobInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DescribeJobMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DescribeJob.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DescribeJobExecutionMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDescribeJobExecutionInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDescribeJobExecutionInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DescribeJobExecutionMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DescribeJobExecution.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DescribeMitigationActionMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDescribeMitigationActionInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDescribeMitigationActionInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DescribeMitigationActionMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DescribeMitigationAction.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DescribeRoleAliasMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDescribeRoleAliasInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDescribeRoleAliasInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DescribeRoleAliasMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DescribeRoleAlias.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DescribeScheduledAuditMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDescribeScheduledAuditInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDescribeScheduledAuditInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DescribeScheduledAuditMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DescribeScheduledAudit.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DescribeSecurityProfileMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDescribeSecurityProfileInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDescribeSecurityProfileInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DescribeSecurityProfileMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DescribeSecurityProfile.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DescribeStreamMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDescribeStreamInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDescribeStreamInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DescribeStreamMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DescribeStream.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DescribeThingMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDescribeThingInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDescribeThingInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DescribeThingMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DescribeThing.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DescribeThingGroupMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDescribeThingGroupInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDescribeThingGroupInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DescribeThingGroupMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DescribeThingGroup.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DescribeThingRegistrationTaskMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDescribeThingRegistrationTaskInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDescribeThingRegistrationTaskInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DescribeThingRegistrationTaskMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DescribeThingRegistrationTask.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DescribeThingTypeMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDescribeThingTypeInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDescribeThingTypeInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DescribeThingTypeMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DescribeThingType.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DetachPolicyMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDetachPolicyInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDetachPolicyInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DetachPolicyMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DetachPolicy.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DetachPrincipalPolicyMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDetachPrincipalPolicyInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDetachPrincipalPolicyInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DetachPrincipalPolicyMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DetachPrincipalPolicy.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DetachSecurityProfileMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDetachSecurityProfileInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDetachSecurityProfileInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DetachSecurityProfileMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DetachSecurityProfile.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DetachThingPrincipalMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDetachThingPrincipalInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDetachThingPrincipalInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DetachThingPrincipalMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DetachThingPrincipal.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DisableTopicRuleMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDisableTopicRuleInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDisableTopicRuleInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DisableTopicRuleMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DisableTopicRule.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m EnableTopicRuleMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalEnableTopicRuleInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalEnableTopicRuleInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m EnableTopicRuleMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "EnableTopicRule.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetCardinalityMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetCardinalityInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetCardinalityInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetCardinalityMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetCardinality.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetEffectivePoliciesMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetEffectivePoliciesInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetEffectivePoliciesInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetEffectivePoliciesMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetEffectivePolicies.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetIndexingConfigurationMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetIndexingConfigurationInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetIndexingConfigurationInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetIndexingConfigurationMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetIndexingConfiguration.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetJobDocumentMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetJobDocumentInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetJobDocumentInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetJobDocumentMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetJobDocument.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetLoggingOptionsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetLoggingOptionsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetLoggingOptionsInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetLoggingOptionsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetLoggingOptions.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetOTAUpdateMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetOTAUpdateInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetOTAUpdateInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetOTAUpdateMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetOTAUpdate.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetPercentilesMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetPercentilesInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetPercentilesInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetPercentilesMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetPercentiles.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetPolicyMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetPolicyInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetPolicyInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetPolicyMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetPolicy.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetPolicyVersionMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetPolicyVersionInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetPolicyVersionInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetPolicyVersionMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetPolicyVersion.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetRegistrationCodeMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetRegistrationCodeInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetRegistrationCodeInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetRegistrationCodeMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetRegistrationCode.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetStatisticsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetStatisticsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetStatisticsInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetStatisticsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetStatistics.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetTopicRuleMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetTopicRuleInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetTopicRuleInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetTopicRuleMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetTopicRule.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetTopicRuleDestinationMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetTopicRuleDestinationInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetTopicRuleDestinationInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetTopicRuleDestinationMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetTopicRuleDestination.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetV2LoggingOptionsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetV2LoggingOptionsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetV2LoggingOptionsInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetV2LoggingOptionsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetV2LoggingOptions.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListActiveViolationsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListActiveViolationsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListActiveViolationsInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListActiveViolationsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListActiveViolations.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListAttachedPoliciesMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListAttachedPoliciesInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListAttachedPoliciesInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListAttachedPoliciesMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListAttachedPolicies.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListAuditFindingsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListAuditFindingsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListAuditFindingsInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListAuditFindingsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListAuditFindings.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListAuditMitigationActionsExecutionsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListAuditMitigationActionsExecutionsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListAuditMitigationActionsExecutionsInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListAuditMitigationActionsExecutionsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListAuditMitigationActionsExecutions.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListAuditMitigationActionsTasksMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListAuditMitigationActionsTasksInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListAuditMitigationActionsTasksInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListAuditMitigationActionsTasksMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListAuditMitigationActionsTasks.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListAuditTasksMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListAuditTasksInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListAuditTasksInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListAuditTasksMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListAuditTasks.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListAuthorizersMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListAuthorizersInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListAuthorizersInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListAuthorizersMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListAuthorizers.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListBillingGroupsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListBillingGroupsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListBillingGroupsInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListBillingGroupsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListBillingGroups.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListCACertificatesMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListCACertificatesInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListCACertificatesInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListCACertificatesMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListCACertificates.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListCertificatesMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListCertificatesInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListCertificatesInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListCertificatesMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListCertificates.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListCertificatesByCAMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListCertificatesByCAInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListCertificatesByCAInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListCertificatesByCAMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListCertificatesByCA.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListIndicesMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListIndicesInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListIndicesInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListIndicesMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListIndices.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListJobExecutionsForJobMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListJobExecutionsForJobInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListJobExecutionsForJobInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListJobExecutionsForJobMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListJobExecutionsForJob.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListJobExecutionsForThingMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListJobExecutionsForThingInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListJobExecutionsForThingInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListJobExecutionsForThingMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListJobExecutionsForThing.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListJobsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListJobsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListJobsInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListJobsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListJobs.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListMitigationActionsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListMitigationActionsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListMitigationActionsInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListMitigationActionsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListMitigationActions.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListOTAUpdatesMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListOTAUpdatesInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListOTAUpdatesInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListOTAUpdatesMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListOTAUpdates.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListOutgoingCertificatesMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListOutgoingCertificatesInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListOutgoingCertificatesInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListOutgoingCertificatesMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListOutgoingCertificates.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListPoliciesMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListPoliciesInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListPoliciesInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListPoliciesMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListPolicies.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListPolicyPrincipalsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListPolicyPrincipalsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListPolicyPrincipalsInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListPolicyPrincipalsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListPolicyPrincipals.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListPolicyVersionsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListPolicyVersionsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListPolicyVersionsInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListPolicyVersionsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListPolicyVersions.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListPrincipalPoliciesMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListPrincipalPoliciesInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListPrincipalPoliciesInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListPrincipalPoliciesMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListPrincipalPolicies.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListPrincipalThingsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListPrincipalThingsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListPrincipalThingsInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListPrincipalThingsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListPrincipalThings.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListRoleAliasesMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListRoleAliasesInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListRoleAliasesInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListRoleAliasesMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListRoleAliases.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListScheduledAuditsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListScheduledAuditsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListScheduledAuditsInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListScheduledAuditsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListScheduledAudits.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListSecurityProfilesMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListSecurityProfilesInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListSecurityProfilesInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListSecurityProfilesMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListSecurityProfiles.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListSecurityProfilesForTargetMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListSecurityProfilesForTargetInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListSecurityProfilesForTargetInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListSecurityProfilesForTargetMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListSecurityProfilesForTarget.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListStreamsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListStreamsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListStreamsInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListStreamsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListStreams.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListTagsForResourceMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListTagsForResourceInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListTagsForResourceInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListTagsForResourceMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListTagsForResource.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListTargetsForPolicyMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListTargetsForPolicyInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListTargetsForPolicyInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListTargetsForPolicyMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListTargetsForPolicy.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListTargetsForSecurityProfileMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListTargetsForSecurityProfileInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListTargetsForSecurityProfileInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListTargetsForSecurityProfileMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListTargetsForSecurityProfile.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListThingGroupsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListThingGroupsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListThingGroupsInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListThingGroupsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListThingGroups.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListThingGroupsForThingMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListThingGroupsForThingInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListThingGroupsForThingInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListThingGroupsForThingMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListThingGroupsForThing.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListThingPrincipalsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListThingPrincipalsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListThingPrincipalsInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListThingPrincipalsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListThingPrincipals.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListThingRegistrationTaskReportsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListThingRegistrationTaskReportsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListThingRegistrationTaskReportsInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListThingRegistrationTaskReportsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListThingRegistrationTaskReports.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListThingRegistrationTasksMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListThingRegistrationTasksInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListThingRegistrationTasksInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListThingRegistrationTasksMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListThingRegistrationTasks.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListThingTypesMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListThingTypesInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListThingTypesInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListThingTypesMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListThingTypes.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListThingsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListThingsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListThingsInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListThingsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListThings.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListThingsInBillingGroupMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListThingsInBillingGroupInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListThingsInBillingGroupInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListThingsInBillingGroupMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListThingsInBillingGroup.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListThingsInThingGroupMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListThingsInThingGroupInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListThingsInThingGroupInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListThingsInThingGroupMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListThingsInThingGroup.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListTopicRuleDestinationsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListTopicRuleDestinationsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListTopicRuleDestinationsInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListTopicRuleDestinationsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListTopicRuleDestinations.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListTopicRulesMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListTopicRulesInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListTopicRulesInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListTopicRulesMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListTopicRules.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListV2LoggingLevelsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListV2LoggingLevelsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListV2LoggingLevelsInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListV2LoggingLevelsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListV2LoggingLevels.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListViolationEventsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListViolationEventsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListViolationEventsInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListViolationEventsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListViolationEvents.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m RegisterCACertificateMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalRegisterCACertificateInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalRegisterCACertificateInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m RegisterCACertificateMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "RegisterCACertificate.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m RegisterCertificateMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalRegisterCertificateInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalRegisterCertificateInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m RegisterCertificateMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "RegisterCertificate.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m RegisterThingMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalRegisterThingInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalRegisterThingInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m RegisterThingMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "RegisterThing.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m RejectCertificateTransferMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalRejectCertificateTransferInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalRejectCertificateTransferInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m RejectCertificateTransferMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "RejectCertificateTransfer.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m RemoveThingFromBillingGroupMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalRemoveThingFromBillingGroupInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalRemoveThingFromBillingGroupInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m RemoveThingFromBillingGroupMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "RemoveThingFromBillingGroup.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m RemoveThingFromThingGroupMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalRemoveThingFromThingGroupInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalRemoveThingFromThingGroupInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m RemoveThingFromThingGroupMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "RemoveThingFromThingGroup.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ReplaceTopicRuleMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalReplaceTopicRuleInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalReplaceTopicRuleInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ReplaceTopicRuleMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ReplaceTopicRule.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m SearchIndexMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalSearchIndexInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalSearchIndexInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m SearchIndexMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "SearchIndex.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m SetDefaultAuthorizerMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalSetDefaultAuthorizerInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalSetDefaultAuthorizerInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m SetDefaultAuthorizerMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "SetDefaultAuthorizer.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m SetDefaultPolicyVersionMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalSetDefaultPolicyVersionInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalSetDefaultPolicyVersionInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m SetDefaultPolicyVersionMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "SetDefaultPolicyVersion.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m SetLoggingOptionsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalSetLoggingOptionsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalSetLoggingOptionsInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m SetLoggingOptionsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "SetLoggingOptions.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m SetV2LoggingLevelMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalSetV2LoggingLevelInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalSetV2LoggingLevelInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m SetV2LoggingLevelMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "SetV2LoggingLevel.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m SetV2LoggingOptionsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalSetV2LoggingOptionsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalSetV2LoggingOptionsInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m SetV2LoggingOptionsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "SetV2LoggingOptions.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m StartAuditMitigationActionsTaskMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalStartAuditMitigationActionsTaskInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalStartAuditMitigationActionsTaskInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m StartAuditMitigationActionsTaskMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "StartAuditMitigationActionsTask.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m StartOnDemandAuditTaskMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalStartOnDemandAuditTaskInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalStartOnDemandAuditTaskInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m StartOnDemandAuditTaskMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "StartOnDemandAuditTask.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m StartThingRegistrationTaskMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalStartThingRegistrationTaskInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalStartThingRegistrationTaskInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m StartThingRegistrationTaskMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "StartThingRegistrationTask.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m StopThingRegistrationTaskMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalStopThingRegistrationTaskInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalStopThingRegistrationTaskInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m StopThingRegistrationTaskMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "StopThingRegistrationTask.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m TagResourceMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalTagResourceInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalTagResourceInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m TagResourceMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "TagResource.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m TestAuthorizationMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalTestAuthorizationInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalTestAuthorizationInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m TestAuthorizationMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "TestAuthorization.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m TestInvokeAuthorizerMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalTestInvokeAuthorizerInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalTestInvokeAuthorizerInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m TestInvokeAuthorizerMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "TestInvokeAuthorizer.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m TransferCertificateMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalTransferCertificateInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalTransferCertificateInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m TransferCertificateMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "TransferCertificate.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UntagResourceMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUntagResourceInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUntagResourceInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UntagResourceMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UntagResource.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UpdateAccountAuditConfigurationMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUpdateAccountAuditConfigurationInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUpdateAccountAuditConfigurationInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UpdateAccountAuditConfigurationMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UpdateAccountAuditConfiguration.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UpdateAuthorizerMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUpdateAuthorizerInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUpdateAuthorizerInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UpdateAuthorizerMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UpdateAuthorizer.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UpdateBillingGroupMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUpdateBillingGroupInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUpdateBillingGroupInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UpdateBillingGroupMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UpdateBillingGroup.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UpdateCACertificateMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUpdateCACertificateInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUpdateCACertificateInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UpdateCACertificateMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UpdateCACertificate.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UpdateCertificateMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUpdateCertificateInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUpdateCertificateInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UpdateCertificateMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UpdateCertificate.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UpdateDynamicThingGroupMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUpdateDynamicThingGroupInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUpdateDynamicThingGroupInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UpdateDynamicThingGroupMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UpdateDynamicThingGroup.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UpdateEventConfigurationsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUpdateEventConfigurationsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUpdateEventConfigurationsInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UpdateEventConfigurationsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UpdateEventConfigurations.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UpdateIndexingConfigurationMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUpdateIndexingConfigurationInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUpdateIndexingConfigurationInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UpdateIndexingConfigurationMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UpdateIndexingConfiguration.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UpdateJobMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUpdateJobInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUpdateJobInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UpdateJobMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UpdateJob.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UpdateMitigationActionMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUpdateMitigationActionInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUpdateMitigationActionInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UpdateMitigationActionMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UpdateMitigationAction.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UpdateRoleAliasMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUpdateRoleAliasInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUpdateRoleAliasInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UpdateRoleAliasMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UpdateRoleAlias.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UpdateScheduledAuditMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUpdateScheduledAuditInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUpdateScheduledAuditInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UpdateScheduledAuditMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UpdateScheduledAudit.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UpdateSecurityProfileMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUpdateSecurityProfileInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUpdateSecurityProfileInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UpdateSecurityProfileMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UpdateSecurityProfile.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UpdateStreamMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUpdateStreamInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUpdateStreamInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UpdateStreamMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UpdateStream.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UpdateThingMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUpdateThingInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUpdateThingInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UpdateThingMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UpdateThing.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UpdateThingGroupMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUpdateThingGroupInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUpdateThingGroupInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UpdateThingGroupMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UpdateThingGroup.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UpdateThingGroupsForThingMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUpdateThingGroupsForThingInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUpdateThingGroupsForThingInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UpdateThingGroupsForThingMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UpdateThingGroupsForThing.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UpdateTopicRuleDestinationMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUpdateTopicRuleDestinationInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUpdateTopicRuleDestinationInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UpdateTopicRuleDestinationMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UpdateTopicRuleDestination.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ValidateSecurityProfileBehaviorsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalValidateSecurityProfileBehaviorsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalValidateSecurityProfileBehaviorsInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ValidateSecurityProfileBehaviorsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ValidateSecurityProfileBehaviors.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}
