// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

// Package aws_restjson service, marshal.go contains the generated operation marshalers and methods on it.

package aws_restjson

import (
	"bytes"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/awserr"
	"github.com/aws/aws-sdk-go-v2/private/protocol/jsonrpc"
	"github.com/aws/aws-sdk-go-v2/private/protocol/rest"
	"github.com/aws/aws-sdk-go-v2/service/lambda/types"
)

var _ bytes.Buffer
var _ awserr.Error

// AddLayerVersionPermissionMarshaler defines marshaler for AddLayerVersionPermission operation
type AddLayerVersionPermissionMarshaler struct {
	Input *types.AddLayerVersionPermissionInput
}

// AddPermissionMarshaler defines marshaler for AddPermission operation
type AddPermissionMarshaler struct {
	Input *types.AddPermissionInput
}

// CreateAliasMarshaler defines marshaler for CreateAlias operation
type CreateAliasMarshaler struct {
	Input *types.CreateAliasInput
}

// CreateEventSourceMappingMarshaler defines marshaler for CreateEventSourceMapping operation
type CreateEventSourceMappingMarshaler struct {
	Input *types.CreateEventSourceMappingInput
}

// CreateFunctionMarshaler defines marshaler for CreateFunction operation
type CreateFunctionMarshaler struct {
	Input *types.CreateFunctionInput
}

// DeleteAliasMarshaler defines marshaler for DeleteAlias operation
type DeleteAliasMarshaler struct {
	Input *types.DeleteAliasInput
}

// DeleteEventSourceMappingMarshaler defines marshaler for DeleteEventSourceMapping operation
type DeleteEventSourceMappingMarshaler struct {
	Input *types.DeleteEventSourceMappingInput
}

// DeleteFunctionMarshaler defines marshaler for DeleteFunction operation
type DeleteFunctionMarshaler struct {
	Input *types.DeleteFunctionInput
}

// DeleteFunctionConcurrencyMarshaler defines marshaler for DeleteFunctionConcurrency operation
type DeleteFunctionConcurrencyMarshaler struct {
	Input *types.DeleteFunctionConcurrencyInput
}

// DeleteLayerVersionMarshaler defines marshaler for DeleteLayerVersion operation
type DeleteLayerVersionMarshaler struct {
	Input *types.DeleteLayerVersionInput
}

// GetAccountSettingsMarshaler defines marshaler for GetAccountSettings operation
type GetAccountSettingsMarshaler struct {
	Input *types.GetAccountSettingsInput
}

// GetAliasMarshaler defines marshaler for GetAlias operation
type GetAliasMarshaler struct {
	Input *types.GetAliasInput
}

// GetEventSourceMappingMarshaler defines marshaler for GetEventSourceMapping operation
type GetEventSourceMappingMarshaler struct {
	Input *types.GetEventSourceMappingInput
}

// GetFunctionMarshaler defines marshaler for GetFunction operation
type GetFunctionMarshaler struct {
	Input *types.GetFunctionInput
}

// GetFunctionConfigurationMarshaler defines marshaler for GetFunctionConfiguration operation
type GetFunctionConfigurationMarshaler struct {
	Input *types.GetFunctionConfigurationInput
}

// GetLayerVersionMarshaler defines marshaler for GetLayerVersion operation
type GetLayerVersionMarshaler struct {
	Input *types.GetLayerVersionInput
}

// GetLayerVersionByArnMarshaler defines marshaler for GetLayerVersionByArn operation
type GetLayerVersionByArnMarshaler struct {
	Input *types.GetLayerVersionByArnInput
}

// GetLayerVersionPolicyMarshaler defines marshaler for GetLayerVersionPolicy operation
type GetLayerVersionPolicyMarshaler struct {
	Input *types.GetLayerVersionPolicyInput
}

// GetPolicyMarshaler defines marshaler for GetPolicy operation
type GetPolicyMarshaler struct {
	Input *types.GetPolicyInput
}

// InvokeMarshaler defines marshaler for Invoke operation
type InvokeMarshaler struct {
	Input *types.InvokeInput
}

// InvokeAsyncMarshaler defines marshaler for InvokeAsync operation
type InvokeAsyncMarshaler struct {
	Input *types.InvokeAsyncInput
}

// ListAliasesMarshaler defines marshaler for ListAliases operation
type ListAliasesMarshaler struct {
	Input *types.ListAliasesInput
}

// ListEventSourceMappingsMarshaler defines marshaler for ListEventSourceMappings operation
type ListEventSourceMappingsMarshaler struct {
	Input *types.ListEventSourceMappingsInput
}

// ListFunctionsMarshaler defines marshaler for ListFunctions operation
type ListFunctionsMarshaler struct {
	Input *types.ListFunctionsInput
}

// ListLayerVersionsMarshaler defines marshaler for ListLayerVersions operation
type ListLayerVersionsMarshaler struct {
	Input *types.ListLayerVersionsInput
}

// ListLayersMarshaler defines marshaler for ListLayers operation
type ListLayersMarshaler struct {
	Input *types.ListLayersInput
}

// ListTagsMarshaler defines marshaler for ListTags operation
type ListTagsMarshaler struct {
	Input *types.ListTagsInput
}

// ListVersionsByFunctionMarshaler defines marshaler for ListVersionsByFunction operation
type ListVersionsByFunctionMarshaler struct {
	Input *types.ListVersionsByFunctionInput
}

// PublishLayerVersionMarshaler defines marshaler for PublishLayerVersion operation
type PublishLayerVersionMarshaler struct {
	Input *types.PublishLayerVersionInput
}

// PublishVersionMarshaler defines marshaler for PublishVersion operation
type PublishVersionMarshaler struct {
	Input *types.PublishVersionInput
}

// PutFunctionConcurrencyMarshaler defines marshaler for PutFunctionConcurrency operation
type PutFunctionConcurrencyMarshaler struct {
	Input *types.PutFunctionConcurrencyInput
}

// RemoveLayerVersionPermissionMarshaler defines marshaler for RemoveLayerVersionPermission operation
type RemoveLayerVersionPermissionMarshaler struct {
	Input *types.RemoveLayerVersionPermissionInput
}

// RemovePermissionMarshaler defines marshaler for RemovePermission operation
type RemovePermissionMarshaler struct {
	Input *types.RemovePermissionInput
}

// TagResourceMarshaler defines marshaler for TagResource operation
type TagResourceMarshaler struct {
	Input *types.TagResourceInput
}

// UntagResourceMarshaler defines marshaler for UntagResource operation
type UntagResourceMarshaler struct {
	Input *types.UntagResourceInput
}

// UpdateAliasMarshaler defines marshaler for UpdateAlias operation
type UpdateAliasMarshaler struct {
	Input *types.UpdateAliasInput
}

// UpdateEventSourceMappingMarshaler defines marshaler for UpdateEventSourceMapping operation
type UpdateEventSourceMappingMarshaler struct {
	Input *types.UpdateEventSourceMappingInput
}

// UpdateFunctionCodeMarshaler defines marshaler for UpdateFunctionCode operation
type UpdateFunctionCodeMarshaler struct {
	Input *types.UpdateFunctionCodeInput
}

// UpdateFunctionConfigurationMarshaler defines marshaler for UpdateFunctionConfiguration operation
type UpdateFunctionConfigurationMarshaler struct {
	Input *types.UpdateFunctionConfigurationInput
}

func MarshalAddLayerVersionPermissionInputShapeAWSREST(v *types.AddLayerVersionPermissionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalAddLayerVersionPermissionInputShapeAWSJSON(v *types.AddLayerVersionPermissionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalAddPermissionInputShapeAWSREST(v *types.AddPermissionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalAddPermissionInputShapeAWSJSON(v *types.AddPermissionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalCreateAliasInputShapeAWSREST(v *types.CreateAliasInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCreateAliasInputShapeAWSJSON(v *types.CreateAliasInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalCreateEventSourceMappingInputShapeAWSREST(v *types.CreateEventSourceMappingInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCreateEventSourceMappingInputShapeAWSJSON(v *types.CreateEventSourceMappingInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalCreateFunctionInputShapeAWSREST(v *types.CreateFunctionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCreateFunctionInputShapeAWSJSON(v *types.CreateFunctionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDeleteAliasInputShapeAWSREST(v *types.DeleteAliasInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeleteAliasInputShapeAWSJSON(v *types.DeleteAliasInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDeleteEventSourceMappingInputShapeAWSREST(v *types.DeleteEventSourceMappingInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeleteEventSourceMappingInputShapeAWSJSON(v *types.DeleteEventSourceMappingInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDeleteFunctionInputShapeAWSREST(v *types.DeleteFunctionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeleteFunctionInputShapeAWSJSON(v *types.DeleteFunctionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDeleteFunctionConcurrencyInputShapeAWSREST(v *types.DeleteFunctionConcurrencyInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeleteFunctionConcurrencyInputShapeAWSJSON(v *types.DeleteFunctionConcurrencyInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDeleteLayerVersionInputShapeAWSREST(v *types.DeleteLayerVersionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeleteLayerVersionInputShapeAWSJSON(v *types.DeleteLayerVersionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalGetAccountSettingsInputShapeAWSREST(v *types.GetAccountSettingsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetAccountSettingsInputShapeAWSJSON(v *types.GetAccountSettingsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalGetAliasInputShapeAWSREST(v *types.GetAliasInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetAliasInputShapeAWSJSON(v *types.GetAliasInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalGetEventSourceMappingInputShapeAWSREST(v *types.GetEventSourceMappingInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetEventSourceMappingInputShapeAWSJSON(v *types.GetEventSourceMappingInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalGetFunctionInputShapeAWSREST(v *types.GetFunctionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetFunctionInputShapeAWSJSON(v *types.GetFunctionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalGetFunctionConfigurationInputShapeAWSREST(v *types.GetFunctionConfigurationInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetFunctionConfigurationInputShapeAWSJSON(v *types.GetFunctionConfigurationInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalGetLayerVersionInputShapeAWSREST(v *types.GetLayerVersionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetLayerVersionInputShapeAWSJSON(v *types.GetLayerVersionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalGetLayerVersionByArnInputShapeAWSREST(v *types.GetLayerVersionByArnInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetLayerVersionByArnInputShapeAWSJSON(v *types.GetLayerVersionByArnInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalGetLayerVersionPolicyInputShapeAWSREST(v *types.GetLayerVersionPolicyInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetLayerVersionPolicyInputShapeAWSJSON(v *types.GetLayerVersionPolicyInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalGetPolicyInputShapeAWSREST(v *types.GetPolicyInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetPolicyInputShapeAWSJSON(v *types.GetPolicyInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalInvokeInputShapeAWSREST(v *types.InvokeInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalInvokeInputShapeAWSJSON(v *types.InvokeInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalInvokeAsyncInputShapeAWSREST(v *types.InvokeAsyncInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalInvokeAsyncInputShapeAWSJSON(v *types.InvokeAsyncInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListAliasesInputShapeAWSREST(v *types.ListAliasesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListAliasesInputShapeAWSJSON(v *types.ListAliasesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListEventSourceMappingsInputShapeAWSREST(v *types.ListEventSourceMappingsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListEventSourceMappingsInputShapeAWSJSON(v *types.ListEventSourceMappingsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListFunctionsInputShapeAWSREST(v *types.ListFunctionsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListFunctionsInputShapeAWSJSON(v *types.ListFunctionsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListLayerVersionsInputShapeAWSREST(v *types.ListLayerVersionsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListLayerVersionsInputShapeAWSJSON(v *types.ListLayerVersionsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListLayersInputShapeAWSREST(v *types.ListLayersInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListLayersInputShapeAWSJSON(v *types.ListLayersInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListTagsInputShapeAWSREST(v *types.ListTagsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListTagsInputShapeAWSJSON(v *types.ListTagsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalListVersionsByFunctionInputShapeAWSREST(v *types.ListVersionsByFunctionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalListVersionsByFunctionInputShapeAWSJSON(v *types.ListVersionsByFunctionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalPublishLayerVersionInputShapeAWSREST(v *types.PublishLayerVersionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalPublishLayerVersionInputShapeAWSJSON(v *types.PublishLayerVersionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalPublishVersionInputShapeAWSREST(v *types.PublishVersionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalPublishVersionInputShapeAWSJSON(v *types.PublishVersionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalPutFunctionConcurrencyInputShapeAWSREST(v *types.PutFunctionConcurrencyInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalPutFunctionConcurrencyInputShapeAWSJSON(v *types.PutFunctionConcurrencyInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalRemoveLayerVersionPermissionInputShapeAWSREST(v *types.RemoveLayerVersionPermissionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalRemoveLayerVersionPermissionInputShapeAWSJSON(v *types.RemoveLayerVersionPermissionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalRemovePermissionInputShapeAWSREST(v *types.RemovePermissionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalRemovePermissionInputShapeAWSJSON(v *types.RemovePermissionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalTagResourceInputShapeAWSREST(v *types.TagResourceInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalTagResourceInputShapeAWSJSON(v *types.TagResourceInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalUntagResourceInputShapeAWSREST(v *types.UntagResourceInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUntagResourceInputShapeAWSJSON(v *types.UntagResourceInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalUpdateAliasInputShapeAWSREST(v *types.UpdateAliasInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUpdateAliasInputShapeAWSJSON(v *types.UpdateAliasInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalUpdateEventSourceMappingInputShapeAWSREST(v *types.UpdateEventSourceMappingInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUpdateEventSourceMappingInputShapeAWSJSON(v *types.UpdateEventSourceMappingInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalUpdateFunctionCodeInputShapeAWSREST(v *types.UpdateFunctionCodeInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUpdateFunctionCodeInputShapeAWSJSON(v *types.UpdateFunctionCodeInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalUpdateFunctionConfigurationInputShapeAWSREST(v *types.UpdateFunctionConfigurationInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUpdateFunctionConfigurationInputShapeAWSJSON(v *types.UpdateFunctionConfigurationInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}
func (m AddLayerVersionPermissionMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalAddLayerVersionPermissionInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalAddLayerVersionPermissionInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m AddLayerVersionPermissionMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "AddLayerVersionPermission.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m AddPermissionMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalAddPermissionInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalAddPermissionInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m AddPermissionMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "AddPermission.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m CreateAliasMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCreateAliasInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCreateAliasInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CreateAliasMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CreateAlias.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m CreateEventSourceMappingMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCreateEventSourceMappingInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCreateEventSourceMappingInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CreateEventSourceMappingMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CreateEventSourceMapping.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m CreateFunctionMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCreateFunctionInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCreateFunctionInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CreateFunctionMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CreateFunction.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteAliasMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteAliasInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeleteAliasInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteAliasMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteAlias.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteEventSourceMappingMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteEventSourceMappingInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeleteEventSourceMappingInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteEventSourceMappingMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteEventSourceMapping.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteFunctionMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteFunctionInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeleteFunctionInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteFunctionMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteFunction.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteFunctionConcurrencyMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteFunctionConcurrencyInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeleteFunctionConcurrencyInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteFunctionConcurrencyMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteFunctionConcurrency.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteLayerVersionMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteLayerVersionInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeleteLayerVersionInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteLayerVersionMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteLayerVersion.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetAccountSettingsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetAccountSettingsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetAccountSettingsInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetAccountSettingsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetAccountSettings.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetAliasMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetAliasInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetAliasInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetAliasMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetAlias.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetEventSourceMappingMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetEventSourceMappingInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetEventSourceMappingInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetEventSourceMappingMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetEventSourceMapping.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetFunctionMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetFunctionInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetFunctionInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetFunctionMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetFunction.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetFunctionConfigurationMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetFunctionConfigurationInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetFunctionConfigurationInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetFunctionConfigurationMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetFunctionConfiguration.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetLayerVersionMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetLayerVersionInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetLayerVersionInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetLayerVersionMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetLayerVersion.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetLayerVersionByArnMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetLayerVersionByArnInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetLayerVersionByArnInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetLayerVersionByArnMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetLayerVersionByArn.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetLayerVersionPolicyMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetLayerVersionPolicyInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetLayerVersionPolicyInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetLayerVersionPolicyMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetLayerVersionPolicy.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetPolicyMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetPolicyInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetPolicyInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetPolicyMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetPolicy.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m InvokeMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalInvokeInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalInvokeInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m InvokeMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "Invoke.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m InvokeAsyncMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalInvokeAsyncInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalInvokeAsyncInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m InvokeAsyncMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "InvokeAsync.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListAliasesMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListAliasesInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListAliasesInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListAliasesMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListAliases.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListEventSourceMappingsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListEventSourceMappingsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListEventSourceMappingsInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListEventSourceMappingsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListEventSourceMappings.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListFunctionsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListFunctionsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListFunctionsInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListFunctionsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListFunctions.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListLayerVersionsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListLayerVersionsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListLayerVersionsInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListLayerVersionsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListLayerVersions.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListLayersMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListLayersInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListLayersInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListLayersMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListLayers.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListTagsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListTagsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListTagsInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListTagsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListTags.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ListVersionsByFunctionMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalListVersionsByFunctionInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalListVersionsByFunctionInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ListVersionsByFunctionMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ListVersionsByFunction.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m PublishLayerVersionMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalPublishLayerVersionInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalPublishLayerVersionInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m PublishLayerVersionMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "PublishLayerVersion.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m PublishVersionMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalPublishVersionInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalPublishVersionInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m PublishVersionMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "PublishVersion.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m PutFunctionConcurrencyMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalPutFunctionConcurrencyInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalPutFunctionConcurrencyInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m PutFunctionConcurrencyMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "PutFunctionConcurrency.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m RemoveLayerVersionPermissionMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalRemoveLayerVersionPermissionInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalRemoveLayerVersionPermissionInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m RemoveLayerVersionPermissionMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "RemoveLayerVersionPermission.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m RemovePermissionMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalRemovePermissionInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalRemovePermissionInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m RemovePermissionMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "RemovePermission.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m TagResourceMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalTagResourceInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalTagResourceInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m TagResourceMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "TagResource.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UntagResourceMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUntagResourceInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUntagResourceInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UntagResourceMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UntagResource.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UpdateAliasMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUpdateAliasInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUpdateAliasInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UpdateAliasMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UpdateAlias.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UpdateEventSourceMappingMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUpdateEventSourceMappingInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUpdateEventSourceMappingInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UpdateEventSourceMappingMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UpdateEventSourceMapping.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UpdateFunctionCodeMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUpdateFunctionCodeInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUpdateFunctionCodeInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UpdateFunctionCodeMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UpdateFunctionCode.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UpdateFunctionConfigurationMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUpdateFunctionConfigurationInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUpdateFunctionConfigurationInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UpdateFunctionConfigurationMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UpdateFunctionConfiguration.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}
