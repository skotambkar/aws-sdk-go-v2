// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

// Package aws_restjson service, marshal.go contains the generated operation marshalers and methods on it.

package aws_restjson

import (
	"bytes"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/awserr"
	"github.com/aws/aws-sdk-go-v2/private/protocol/jsonrpc"
	"github.com/aws/aws-sdk-go-v2/private/protocol/rest"
	"github.com/aws/aws-sdk-go-v2/service/iotjobsdataplane/types"
)

var _ bytes.Buffer
var _ awserr.Error

// DescribeJobExecutionMarshaler defines marshaler for DescribeJobExecution operation
type DescribeJobExecutionMarshaler struct {
	Input *types.DescribeJobExecutionInput
}

// GetPendingJobExecutionsMarshaler defines marshaler for GetPendingJobExecutions operation
type GetPendingJobExecutionsMarshaler struct {
	Input *types.GetPendingJobExecutionsInput
}

// StartNextPendingJobExecutionMarshaler defines marshaler for StartNextPendingJobExecution operation
type StartNextPendingJobExecutionMarshaler struct {
	Input *types.StartNextPendingJobExecutionInput
}

// UpdateJobExecutionMarshaler defines marshaler for UpdateJobExecution operation
type UpdateJobExecutionMarshaler struct {
	Input *types.UpdateJobExecutionInput
}

func MarshalDescribeJobExecutionInputShapeAWSREST(v *types.DescribeJobExecutionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDescribeJobExecutionInputShapeAWSJSON(v *types.DescribeJobExecutionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalGetPendingJobExecutionsInputShapeAWSREST(v *types.GetPendingJobExecutionsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetPendingJobExecutionsInputShapeAWSJSON(v *types.GetPendingJobExecutionsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalStartNextPendingJobExecutionInputShapeAWSREST(v *types.StartNextPendingJobExecutionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalStartNextPendingJobExecutionInputShapeAWSJSON(v *types.StartNextPendingJobExecutionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalUpdateJobExecutionInputShapeAWSREST(v *types.UpdateJobExecutionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUpdateJobExecutionInputShapeAWSJSON(v *types.UpdateJobExecutionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}
func (m DescribeJobExecutionMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDescribeJobExecutionInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDescribeJobExecutionInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DescribeJobExecutionMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DescribeJobExecution.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetPendingJobExecutionsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetPendingJobExecutionsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetPendingJobExecutionsInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetPendingJobExecutionsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetPendingJobExecutions.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m StartNextPendingJobExecutionMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalStartNextPendingJobExecutionInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalStartNextPendingJobExecutionInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m StartNextPendingJobExecutionMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "StartNextPendingJobExecution.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UpdateJobExecutionMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUpdateJobExecutionInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUpdateJobExecutionInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UpdateJobExecutionMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UpdateJobExecution.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}
