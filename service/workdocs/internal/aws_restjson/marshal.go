// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

// Package aws_restjson service, marshal.go contains the generated operation marshalers and methods on it.

package aws_restjson

import (
	"bytes"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/awserr"
	"github.com/aws/aws-sdk-go-v2/private/protocol/jsonrpc"
	"github.com/aws/aws-sdk-go-v2/private/protocol/rest"
	"github.com/aws/aws-sdk-go-v2/service/workdocs/types"
)

var _ bytes.Buffer
var _ awserr.Error

// AbortDocumentVersionUploadMarshaler defines marshaler for AbortDocumentVersionUpload operation
type AbortDocumentVersionUploadMarshaler struct {
	Input *types.AbortDocumentVersionUploadInput
}

// ActivateUserMarshaler defines marshaler for ActivateUser operation
type ActivateUserMarshaler struct {
	Input *types.ActivateUserInput
}

// AddResourcePermissionsMarshaler defines marshaler for AddResourcePermissions operation
type AddResourcePermissionsMarshaler struct {
	Input *types.AddResourcePermissionsInput
}

// CreateCommentMarshaler defines marshaler for CreateComment operation
type CreateCommentMarshaler struct {
	Input *types.CreateCommentInput
}

// CreateCustomMetadataMarshaler defines marshaler for CreateCustomMetadata operation
type CreateCustomMetadataMarshaler struct {
	Input *types.CreateCustomMetadataInput
}

// CreateFolderMarshaler defines marshaler for CreateFolder operation
type CreateFolderMarshaler struct {
	Input *types.CreateFolderInput
}

// CreateLabelsMarshaler defines marshaler for CreateLabels operation
type CreateLabelsMarshaler struct {
	Input *types.CreateLabelsInput
}

// CreateNotificationSubscriptionMarshaler defines marshaler for CreateNotificationSubscription operation
type CreateNotificationSubscriptionMarshaler struct {
	Input *types.CreateNotificationSubscriptionInput
}

// CreateUserMarshaler defines marshaler for CreateUser operation
type CreateUserMarshaler struct {
	Input *types.CreateUserInput
}

// DeactivateUserMarshaler defines marshaler for DeactivateUser operation
type DeactivateUserMarshaler struct {
	Input *types.DeactivateUserInput
}

// DeleteCommentMarshaler defines marshaler for DeleteComment operation
type DeleteCommentMarshaler struct {
	Input *types.DeleteCommentInput
}

// DeleteCustomMetadataMarshaler defines marshaler for DeleteCustomMetadata operation
type DeleteCustomMetadataMarshaler struct {
	Input *types.DeleteCustomMetadataInput
}

// DeleteDocumentMarshaler defines marshaler for DeleteDocument operation
type DeleteDocumentMarshaler struct {
	Input *types.DeleteDocumentInput
}

// DeleteFolderMarshaler defines marshaler for DeleteFolder operation
type DeleteFolderMarshaler struct {
	Input *types.DeleteFolderInput
}

// DeleteFolderContentsMarshaler defines marshaler for DeleteFolderContents operation
type DeleteFolderContentsMarshaler struct {
	Input *types.DeleteFolderContentsInput
}

// DeleteLabelsMarshaler defines marshaler for DeleteLabels operation
type DeleteLabelsMarshaler struct {
	Input *types.DeleteLabelsInput
}

// DeleteNotificationSubscriptionMarshaler defines marshaler for DeleteNotificationSubscription operation
type DeleteNotificationSubscriptionMarshaler struct {
	Input *types.DeleteNotificationSubscriptionInput
}

// DeleteUserMarshaler defines marshaler for DeleteUser operation
type DeleteUserMarshaler struct {
	Input *types.DeleteUserInput
}

// DescribeActivitiesMarshaler defines marshaler for DescribeActivities operation
type DescribeActivitiesMarshaler struct {
	Input *types.DescribeActivitiesInput
}

// DescribeCommentsMarshaler defines marshaler for DescribeComments operation
type DescribeCommentsMarshaler struct {
	Input *types.DescribeCommentsInput
}

// DescribeDocumentVersionsMarshaler defines marshaler for DescribeDocumentVersions operation
type DescribeDocumentVersionsMarshaler struct {
	Input *types.DescribeDocumentVersionsInput
}

// DescribeFolderContentsMarshaler defines marshaler for DescribeFolderContents operation
type DescribeFolderContentsMarshaler struct {
	Input *types.DescribeFolderContentsInput
}

// DescribeGroupsMarshaler defines marshaler for DescribeGroups operation
type DescribeGroupsMarshaler struct {
	Input *types.DescribeGroupsInput
}

// DescribeNotificationSubscriptionsMarshaler defines marshaler for DescribeNotificationSubscriptions operation
type DescribeNotificationSubscriptionsMarshaler struct {
	Input *types.DescribeNotificationSubscriptionsInput
}

// DescribeResourcePermissionsMarshaler defines marshaler for DescribeResourcePermissions operation
type DescribeResourcePermissionsMarshaler struct {
	Input *types.DescribeResourcePermissionsInput
}

// DescribeRootFoldersMarshaler defines marshaler for DescribeRootFolders operation
type DescribeRootFoldersMarshaler struct {
	Input *types.DescribeRootFoldersInput
}

// DescribeUsersMarshaler defines marshaler for DescribeUsers operation
type DescribeUsersMarshaler struct {
	Input *types.DescribeUsersInput
}

// GetCurrentUserMarshaler defines marshaler for GetCurrentUser operation
type GetCurrentUserMarshaler struct {
	Input *types.GetCurrentUserInput
}

// GetDocumentMarshaler defines marshaler for GetDocument operation
type GetDocumentMarshaler struct {
	Input *types.GetDocumentInput
}

// GetDocumentPathMarshaler defines marshaler for GetDocumentPath operation
type GetDocumentPathMarshaler struct {
	Input *types.GetDocumentPathInput
}

// GetDocumentVersionMarshaler defines marshaler for GetDocumentVersion operation
type GetDocumentVersionMarshaler struct {
	Input *types.GetDocumentVersionInput
}

// GetFolderMarshaler defines marshaler for GetFolder operation
type GetFolderMarshaler struct {
	Input *types.GetFolderInput
}

// GetFolderPathMarshaler defines marshaler for GetFolderPath operation
type GetFolderPathMarshaler struct {
	Input *types.GetFolderPathInput
}

// GetResourcesMarshaler defines marshaler for GetResources operation
type GetResourcesMarshaler struct {
	Input *types.GetResourcesInput
}

// InitiateDocumentVersionUploadMarshaler defines marshaler for InitiateDocumentVersionUpload operation
type InitiateDocumentVersionUploadMarshaler struct {
	Input *types.InitiateDocumentVersionUploadInput
}

// RemoveAllResourcePermissionsMarshaler defines marshaler for RemoveAllResourcePermissions operation
type RemoveAllResourcePermissionsMarshaler struct {
	Input *types.RemoveAllResourcePermissionsInput
}

// RemoveResourcePermissionMarshaler defines marshaler for RemoveResourcePermission operation
type RemoveResourcePermissionMarshaler struct {
	Input *types.RemoveResourcePermissionInput
}

// UpdateDocumentMarshaler defines marshaler for UpdateDocument operation
type UpdateDocumentMarshaler struct {
	Input *types.UpdateDocumentInput
}

// UpdateDocumentVersionMarshaler defines marshaler for UpdateDocumentVersion operation
type UpdateDocumentVersionMarshaler struct {
	Input *types.UpdateDocumentVersionInput
}

// UpdateFolderMarshaler defines marshaler for UpdateFolder operation
type UpdateFolderMarshaler struct {
	Input *types.UpdateFolderInput
}

// UpdateUserMarshaler defines marshaler for UpdateUser operation
type UpdateUserMarshaler struct {
	Input *types.UpdateUserInput
}

func MarshalAbortDocumentVersionUploadInputShapeAWSREST(v *types.AbortDocumentVersionUploadInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalAbortDocumentVersionUploadInputShapeAWSJSON(v *types.AbortDocumentVersionUploadInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalActivateUserInputShapeAWSREST(v *types.ActivateUserInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalActivateUserInputShapeAWSJSON(v *types.ActivateUserInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalAddResourcePermissionsInputShapeAWSREST(v *types.AddResourcePermissionsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalAddResourcePermissionsInputShapeAWSJSON(v *types.AddResourcePermissionsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalCreateCommentInputShapeAWSREST(v *types.CreateCommentInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCreateCommentInputShapeAWSJSON(v *types.CreateCommentInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalCreateCustomMetadataInputShapeAWSREST(v *types.CreateCustomMetadataInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCreateCustomMetadataInputShapeAWSJSON(v *types.CreateCustomMetadataInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalCreateFolderInputShapeAWSREST(v *types.CreateFolderInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCreateFolderInputShapeAWSJSON(v *types.CreateFolderInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalCreateLabelsInputShapeAWSREST(v *types.CreateLabelsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCreateLabelsInputShapeAWSJSON(v *types.CreateLabelsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalCreateNotificationSubscriptionInputShapeAWSREST(v *types.CreateNotificationSubscriptionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCreateNotificationSubscriptionInputShapeAWSJSON(v *types.CreateNotificationSubscriptionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalCreateUserInputShapeAWSREST(v *types.CreateUserInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalCreateUserInputShapeAWSJSON(v *types.CreateUserInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDeactivateUserInputShapeAWSREST(v *types.DeactivateUserInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeactivateUserInputShapeAWSJSON(v *types.DeactivateUserInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDeleteCommentInputShapeAWSREST(v *types.DeleteCommentInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeleteCommentInputShapeAWSJSON(v *types.DeleteCommentInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDeleteCustomMetadataInputShapeAWSREST(v *types.DeleteCustomMetadataInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeleteCustomMetadataInputShapeAWSJSON(v *types.DeleteCustomMetadataInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDeleteDocumentInputShapeAWSREST(v *types.DeleteDocumentInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeleteDocumentInputShapeAWSJSON(v *types.DeleteDocumentInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDeleteFolderInputShapeAWSREST(v *types.DeleteFolderInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeleteFolderInputShapeAWSJSON(v *types.DeleteFolderInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDeleteFolderContentsInputShapeAWSREST(v *types.DeleteFolderContentsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeleteFolderContentsInputShapeAWSJSON(v *types.DeleteFolderContentsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDeleteLabelsInputShapeAWSREST(v *types.DeleteLabelsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeleteLabelsInputShapeAWSJSON(v *types.DeleteLabelsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDeleteNotificationSubscriptionInputShapeAWSREST(v *types.DeleteNotificationSubscriptionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeleteNotificationSubscriptionInputShapeAWSJSON(v *types.DeleteNotificationSubscriptionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDeleteUserInputShapeAWSREST(v *types.DeleteUserInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDeleteUserInputShapeAWSJSON(v *types.DeleteUserInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDescribeActivitiesInputShapeAWSREST(v *types.DescribeActivitiesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDescribeActivitiesInputShapeAWSJSON(v *types.DescribeActivitiesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDescribeCommentsInputShapeAWSREST(v *types.DescribeCommentsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDescribeCommentsInputShapeAWSJSON(v *types.DescribeCommentsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDescribeDocumentVersionsInputShapeAWSREST(v *types.DescribeDocumentVersionsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDescribeDocumentVersionsInputShapeAWSJSON(v *types.DescribeDocumentVersionsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDescribeFolderContentsInputShapeAWSREST(v *types.DescribeFolderContentsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDescribeFolderContentsInputShapeAWSJSON(v *types.DescribeFolderContentsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDescribeGroupsInputShapeAWSREST(v *types.DescribeGroupsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDescribeGroupsInputShapeAWSJSON(v *types.DescribeGroupsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDescribeNotificationSubscriptionsInputShapeAWSREST(v *types.DescribeNotificationSubscriptionsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDescribeNotificationSubscriptionsInputShapeAWSJSON(v *types.DescribeNotificationSubscriptionsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDescribeResourcePermissionsInputShapeAWSREST(v *types.DescribeResourcePermissionsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDescribeResourcePermissionsInputShapeAWSJSON(v *types.DescribeResourcePermissionsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDescribeRootFoldersInputShapeAWSREST(v *types.DescribeRootFoldersInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDescribeRootFoldersInputShapeAWSJSON(v *types.DescribeRootFoldersInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalDescribeUsersInputShapeAWSREST(v *types.DescribeUsersInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalDescribeUsersInputShapeAWSJSON(v *types.DescribeUsersInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalGetCurrentUserInputShapeAWSREST(v *types.GetCurrentUserInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetCurrentUserInputShapeAWSJSON(v *types.GetCurrentUserInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalGetDocumentInputShapeAWSREST(v *types.GetDocumentInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetDocumentInputShapeAWSJSON(v *types.GetDocumentInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalGetDocumentPathInputShapeAWSREST(v *types.GetDocumentPathInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetDocumentPathInputShapeAWSJSON(v *types.GetDocumentPathInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalGetDocumentVersionInputShapeAWSREST(v *types.GetDocumentVersionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetDocumentVersionInputShapeAWSJSON(v *types.GetDocumentVersionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalGetFolderInputShapeAWSREST(v *types.GetFolderInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetFolderInputShapeAWSJSON(v *types.GetFolderInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalGetFolderPathInputShapeAWSREST(v *types.GetFolderPathInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetFolderPathInputShapeAWSJSON(v *types.GetFolderPathInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalGetResourcesInputShapeAWSREST(v *types.GetResourcesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalGetResourcesInputShapeAWSJSON(v *types.GetResourcesInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalInitiateDocumentVersionUploadInputShapeAWSREST(v *types.InitiateDocumentVersionUploadInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalInitiateDocumentVersionUploadInputShapeAWSJSON(v *types.InitiateDocumentVersionUploadInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalRemoveAllResourcePermissionsInputShapeAWSREST(v *types.RemoveAllResourcePermissionsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalRemoveAllResourcePermissionsInputShapeAWSJSON(v *types.RemoveAllResourcePermissionsInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalRemoveResourcePermissionInputShapeAWSREST(v *types.RemoveResourcePermissionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalRemoveResourcePermissionInputShapeAWSJSON(v *types.RemoveResourcePermissionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalUpdateDocumentInputShapeAWSREST(v *types.UpdateDocumentInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUpdateDocumentInputShapeAWSJSON(v *types.UpdateDocumentInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalUpdateDocumentVersionInputShapeAWSREST(v *types.UpdateDocumentVersionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUpdateDocumentVersionInputShapeAWSJSON(v *types.UpdateDocumentVersionInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalUpdateFolderInputShapeAWSREST(v *types.UpdateFolderInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUpdateFolderInputShapeAWSJSON(v *types.UpdateFolderInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}

func MarshalUpdateUserInputShapeAWSREST(v *types.UpdateUserInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	rest.Build(r)
	return nil
}
func MarshalUpdateUserInputShapeAWSJSON(v *types.UpdateUserInput, r *aws.Request) error {
	// delegate to reflection based marshaling
	if t := rest.PayloadType(r.Params); t == "structure" || t == "" {
		jsonrpc.Build(r)
	}
	return nil
}
func (m AbortDocumentVersionUploadMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalAbortDocumentVersionUploadInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalAbortDocumentVersionUploadInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m AbortDocumentVersionUploadMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "AbortDocumentVersionUpload.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m ActivateUserMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalActivateUserInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalActivateUserInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m ActivateUserMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "ActivateUser.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m AddResourcePermissionsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalAddResourcePermissionsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalAddResourcePermissionsInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m AddResourcePermissionsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "AddResourcePermissions.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m CreateCommentMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCreateCommentInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCreateCommentInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CreateCommentMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CreateComment.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m CreateCustomMetadataMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCreateCustomMetadataInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCreateCustomMetadataInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CreateCustomMetadataMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CreateCustomMetadata.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m CreateFolderMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCreateFolderInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCreateFolderInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CreateFolderMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CreateFolder.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m CreateLabelsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCreateLabelsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCreateLabelsInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CreateLabelsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CreateLabels.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m CreateNotificationSubscriptionMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCreateNotificationSubscriptionInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCreateNotificationSubscriptionInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CreateNotificationSubscriptionMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CreateNotificationSubscription.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m CreateUserMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalCreateUserInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalCreateUserInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m CreateUserMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "CreateUser.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeactivateUserMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeactivateUserInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeactivateUserInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeactivateUserMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeactivateUser.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteCommentMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteCommentInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeleteCommentInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteCommentMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteComment.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteCustomMetadataMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteCustomMetadataInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeleteCustomMetadataInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteCustomMetadataMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteCustomMetadata.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteDocumentMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteDocumentInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeleteDocumentInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteDocumentMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteDocument.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteFolderMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteFolderInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeleteFolderInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteFolderMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteFolder.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteFolderContentsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteFolderContentsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeleteFolderContentsInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteFolderContentsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteFolderContents.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteLabelsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteLabelsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeleteLabelsInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteLabelsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteLabels.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteNotificationSubscriptionMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteNotificationSubscriptionInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeleteNotificationSubscriptionInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteNotificationSubscriptionMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteNotificationSubscription.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DeleteUserMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDeleteUserInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDeleteUserInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DeleteUserMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DeleteUser.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DescribeActivitiesMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDescribeActivitiesInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDescribeActivitiesInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DescribeActivitiesMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DescribeActivities.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DescribeCommentsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDescribeCommentsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDescribeCommentsInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DescribeCommentsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DescribeComments.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DescribeDocumentVersionsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDescribeDocumentVersionsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDescribeDocumentVersionsInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DescribeDocumentVersionsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DescribeDocumentVersions.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DescribeFolderContentsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDescribeFolderContentsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDescribeFolderContentsInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DescribeFolderContentsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DescribeFolderContents.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DescribeGroupsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDescribeGroupsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDescribeGroupsInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DescribeGroupsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DescribeGroups.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DescribeNotificationSubscriptionsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDescribeNotificationSubscriptionsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDescribeNotificationSubscriptionsInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DescribeNotificationSubscriptionsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DescribeNotificationSubscriptions.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DescribeResourcePermissionsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDescribeResourcePermissionsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDescribeResourcePermissionsInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DescribeResourcePermissionsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DescribeResourcePermissions.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DescribeRootFoldersMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDescribeRootFoldersInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDescribeRootFoldersInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DescribeRootFoldersMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DescribeRootFolders.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m DescribeUsersMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalDescribeUsersInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalDescribeUsersInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m DescribeUsersMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "DescribeUsers.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetCurrentUserMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetCurrentUserInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetCurrentUserInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetCurrentUserMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetCurrentUser.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetDocumentMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetDocumentInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetDocumentInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetDocumentMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetDocument.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetDocumentPathMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetDocumentPathInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetDocumentPathInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetDocumentPathMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetDocumentPath.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetDocumentVersionMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetDocumentVersionInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetDocumentVersionInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetDocumentVersionMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetDocumentVersion.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetFolderMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetFolderInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetFolderInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetFolderMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetFolder.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetFolderPathMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetFolderPathInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetFolderPathInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetFolderPathMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetFolderPath.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m GetResourcesMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalGetResourcesInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalGetResourcesInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m GetResourcesMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "GetResources.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m InitiateDocumentVersionUploadMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalInitiateDocumentVersionUploadInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalInitiateDocumentVersionUploadInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m InitiateDocumentVersionUploadMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "InitiateDocumentVersionUpload.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m RemoveAllResourcePermissionsMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalRemoveAllResourcePermissionsInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalRemoveAllResourcePermissionsInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m RemoveAllResourcePermissionsMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "RemoveAllResourcePermissions.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m RemoveResourcePermissionMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalRemoveResourcePermissionInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalRemoveResourcePermissionInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m RemoveResourcePermissionMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "RemoveResourcePermission.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UpdateDocumentMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUpdateDocumentInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUpdateDocumentInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UpdateDocumentMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UpdateDocument.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UpdateDocumentVersionMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUpdateDocumentVersionInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUpdateDocumentVersionInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UpdateDocumentVersionMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UpdateDocumentVersion.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UpdateFolderMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUpdateFolderInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUpdateFolderInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UpdateFolderMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UpdateFolder.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}

func (m UpdateUserMarshaler) MarshalOperation(r *aws.Request) {
	var err error

	err = MarshalUpdateUserInputShapeAWSREST(m.Input, r)
	if err != nil {
		r.Error = err
	}

	err = MarshalUpdateUserInputShapeAWSJSON(m.Input, r)
	if err != nil {
		r.Error = err
	}

}

// GetNamedBuildHandler returns a Named Build Handler for an operation marshal function
func (m UpdateUserMarshaler) GetNamedBuildHandler() aws.NamedHandler {
	const BuildHandler = "UpdateUser.BuildHandler"
	return aws.NamedHandler{
		Name: BuildHandler,
		Fn:   m.MarshalOperation,
	}
}
